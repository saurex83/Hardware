###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               07/Mar/2020  11:29:52
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\Neocore\Hardware\STACK_CORE_SRC\action_manager.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EW8F6A.tmp
#        (E:\Neocore\Hardware\STACK_CORE_SRC\action_manager.c -lC
#        "E:\Neocore\Hardware\PRJ Test\Debug\List" -o "E:\Neocore\Hardware\PRJ
#        Test\Debug\Obj" -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\8051\LIB\DLIB\dl8051Normal.h" --no_path_in_file_macros -I
#        E:\Neocore\Hardware\Stack_core_src\ -On --vla --use_c++_inline
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --mfc E:\Neocore\Hardware\STACK_CORE_SRC\alarm_timer.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\buffer.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\coder.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\cpu.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\debug.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\dma.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\frame.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\led.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\llc.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\mac.c "E:\Neocore\Hardware\PRJ
#        Test\main.c" E:\Neocore\Hardware\STACK_CORE_SRC\mem_slots.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\mem_utils.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\model.c
#        E:\Neocore\Hardware\Stack_core_src\radio.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\rtc.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\sync.c
#        E:\Neocore\Hardware\STACK_CORE_SRC\time_manager.c
#        "E:\Neocore\Hardware\PRJ Test\u_alarm_timer.c"
#        "E:\Neocore\Hardware\PRJ Test\u_buffer.c" "E:\Neocore\Hardware\PRJ
#        Test\u_debug.c" "E:\Neocore\Hardware\PRJ Test\u_frame.c"
#        "E:\Neocore\Hardware\PRJ Test\u_macros.c" "E:\Neocore\Hardware\PRJ
#        Test\u_mem_slots.c" "E:\Neocore\Hardware\PRJ Test\u_mem_utils.c"
#        E:\Neocore\Hardware\STACK_CORE_SRC\ustimer.c "E:\Neocore\Hardware\PRJ
#        Test\utest.c")
#    Locale             =  Russian_Russia.1251
#    List file          =  
#        E:\Neocore\Hardware\PRJ Test\Debug\List\action_manager.lst
#    Object file        =  
#        E:\Neocore\Hardware\PRJ Test\Debug\Obj\action_manager.r51
#
###############################################################################

E:\Neocore\Hardware\STACK_CORE_SRC\action_manager.c
      1          #include "action_manager.h"
      2          #include "modules_list.h"
      3          #include "model.h"
      4          #include "debug.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x94
   \   unsigned char volatile __sfr T2CTRL
   \                     T2CTRL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa2
   \   unsigned char volatile __sfr T2M0
   \                     T2M0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa3
   \   unsigned char volatile __sfr T2M1
   \                     T2M1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa4
   \   unsigned char volatile __sfr T2MOVF0
   \                     T2MOVF0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa5
   \   unsigned char volatile __sfr T2MOVF1
   \                     T2MOVF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb3
   \   unsigned char volatile __sfr ENCCS
   \                     ENCCS:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd2
   \   unsigned char volatile __sfr DMA1CFGL
   \                     DMA1CFGL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd3
   \   unsigned char volatile __sfr DMA1CFGH
   \                     DMA1CFGH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd4
   \   unsigned char volatile __sfr DMA0CFGL
   \                     DMA0CFGL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd5
   \   unsigned char volatile __sfr DMA0CFGH
   \                     DMA0CFGH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd9
   \   unsigned char volatile __sfr RFD
   \                     RFD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      5          
      6          /**
      7          @file
      8          */
      9          
     10          /* Определения */
     11          #define ITEMS_COUNT(name) (sizeof(name)/sizeof(module_s*))
     12          #define RUNNER(array, fun) {\
     13          for (char i = 0; i < ITEMS_COUNT(array); i++){\
     14              ASSERT(array[i]->fun != NULL);\
     15              array[i]->fun();\
     16              }\
     17          };
     18          
     19          
     20          /* Локальные переменные */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          static module_s* COLD_MOD[] = COLD_MOD_DEF;
   \                     ??COLD_MOD:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for COLD_MOD>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     22          static module_s* HOT_MOD[] = HOT_MOD_DEF;
   \                     ??HOT_MOD:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for HOT_MOD>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          static module_s* HW_MOD[] = HW_MOD_DEF;
   \                     ??HW_MOD:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for HW_MOD>`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     24          static module_s* SW_MOD[] = SW_MOD_DEF;
   \                     ??SW_MOD:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for SW_MOD>`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          static module_s* IRQ_MOD[] = IRQ_MOD_DEF;
   \                     ??IRQ_MOD:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for IRQ_MOD>`
   \   000006                REQUIRE __INIT_XDATA_I
     26          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     27          static void (*CALLBACK)(void);
   \                     ??CALLBACK:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void AM_set_callback(void (*fn)(void)){
   \                     AM_set_callback:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     30            ASSERT(fn);
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   7025         JNZ       ??AM_set_callback_0
   \   00000D                ; Setup parameters for call to function printf
   \   00000D   75..1E       MOV       ?V0,#0x1e
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00001B   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   000025   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   000027   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F                ; Setup parameters for call to function DBG_CORE_HALT
   \   00002F   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     31            CALLBACK = fn;
   \                     ??AM_set_callback_0:
   \   000032   90....       MOV       DPTR,#??CALLBACK
   \   000035   EE           MOV       A,R6
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   EF           MOV       A,R7
   \   000039   F0           MOVX      @DPTR,A
     32          }
   \   00003A   7F02         MOV       R7,#0x2
   \   00003C   02....       LJMP      ?BANKED_LEAVE_XDATA
     33          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void AM_Callback(void){
   \                     AM_Callback:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     35            ASSERT(CALLBACK);
   \   000005   90....       MOV       DPTR,#??CALLBACK
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   49           ORL       A,R1
   \   00000F   7025         JNZ       ??AM_Callback_0
   \   000011                ; Setup parameters for call to function printf
   \   000011   75..23       MOV       ?V0,#0x23
   \   000014   75..00       MOV       ?V1,#0x0
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00001F   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   000029   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   00002B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033                ; Setup parameters for call to function DBG_CORE_HALT
   \   000033   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     36            CALLBACK();
   \                     ??AM_Callback_0:
   \   000036                ; Setup parameters for indirect call
   \   000036   90....       MOV       DPTR,#??CALLBACK
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F583         MOV       DPH,A
   \   00003F   8882         MOV       DPL,R0
   \   000041   12....       LCALL     ?CALL_IND
     37          }
   \   000044   7F02         MOV       R7,#0x2
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
     38          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     39          void AM_Cold_start(void){
   \                     AM_Cold_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     40            RUNNER(COLD_MOD, Cold_Start);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Cold_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9403         SUBB      A,#0x3
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_Cold_start_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??COLD_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   C8           XCH       A,R0
   \   000038   2406         ADD       A,#0x6
   \   00003A   F582         MOV       DPL,A
   \   00003C   C8           XCH       A,R0
   \   00003D   3400         ADDC      A,#0x0
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   49           ORL       A,R1
   \   000048   7025         JNZ       ??AM_Cold_start_2
   \   00004A                ; Setup parameters for call to function printf
   \   00004A   75..28       MOV       ?V0,#0x28
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000058   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   000062   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   000064   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C                ; Setup parameters for call to function DBG_CORE_HALT
   \   00006C   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Cold_start_2:
   \   00006F                ; Setup parameters for indirect call
   \   00006F   EE           MOV       A,R6
   \   000070   F8           MOV       R0,A
   \   000071   7900         MOV       R1,#0x0
   \   000073   E8           MOV       A,R0
   \   000074   75F002       MOV       B,#0x2
   \   000077   A4           MUL       AB
   \   000078   C8           XCH       A,R0
   \   000079   AAF0         MOV       R2,B
   \   00007B   75F000       MOV       B,#0x0
   \   00007E   A4           MUL       AB
   \   00007F   2A           ADD       A,R2
   \   000080   FA           MOV       R2,A
   \   000081   75F002       MOV       B,#0x2
   \   000084   E9           MOV       A,R1
   \   000085   A4           MUL       AB
   \   000086   2A           ADD       A,R2
   \   000087   F9           MOV       R1,A
   \   000088   74..         MOV       A,#??COLD_MOD & 0xff
   \   00008A   28           ADD       A,R0
   \   00008B   F582         MOV       DPL,A
   \   00008D   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   00008F   39           ADDC      A,R1
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F8           MOV       R0,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C8           XCH       A,R0
   \   000097   2406         ADD       A,#0x6
   \   000099   F582         MOV       DPL,A
   \   00009B   C8           XCH       A,R0
   \   00009C   3400         ADDC      A,#0x0
   \   00009E   F583         MOV       DPH,A
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   12....       LCALL     ?CALL_IND
   \   0000AB   0E           INC       R6
   \   0000AC   02....       LJMP      ??AM_Cold_start_0 & 0xFFFF
     41          }
   \                     ??AM_Cold_start_1:
   \   0000AF   7F02         MOV       R7,#0x2
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void AM_Hot_start(void){
   \                     AM_Hot_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     44            RUNNER(HOT_MOD, Hot_Start);  
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Hot_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9404         SUBB      A,#0x4
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_Hot_start_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??HOT_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   C8           XCH       A,R0
   \   000038   2408         ADD       A,#0x8
   \   00003A   F582         MOV       DPL,A
   \   00003C   C8           XCH       A,R0
   \   00003D   3400         ADDC      A,#0x0
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   49           ORL       A,R1
   \   000048   7025         JNZ       ??AM_Hot_start_2
   \   00004A                ; Setup parameters for call to function printf
   \   00004A   75..2C       MOV       ?V0,#0x2c
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000058   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   000062   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   000064   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C                ; Setup parameters for call to function DBG_CORE_HALT
   \   00006C   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Hot_start_2:
   \   00006F                ; Setup parameters for indirect call
   \   00006F   EE           MOV       A,R6
   \   000070   F8           MOV       R0,A
   \   000071   7900         MOV       R1,#0x0
   \   000073   E8           MOV       A,R0
   \   000074   75F002       MOV       B,#0x2
   \   000077   A4           MUL       AB
   \   000078   C8           XCH       A,R0
   \   000079   AAF0         MOV       R2,B
   \   00007B   75F000       MOV       B,#0x0
   \   00007E   A4           MUL       AB
   \   00007F   2A           ADD       A,R2
   \   000080   FA           MOV       R2,A
   \   000081   75F002       MOV       B,#0x2
   \   000084   E9           MOV       A,R1
   \   000085   A4           MUL       AB
   \   000086   2A           ADD       A,R2
   \   000087   F9           MOV       R1,A
   \   000088   74..         MOV       A,#??HOT_MOD & 0xff
   \   00008A   28           ADD       A,R0
   \   00008B   F582         MOV       DPL,A
   \   00008D   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   00008F   39           ADDC      A,R1
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F8           MOV       R0,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C8           XCH       A,R0
   \   000097   2408         ADD       A,#0x8
   \   000099   F582         MOV       DPL,A
   \   00009B   C8           XCH       A,R0
   \   00009C   3400         ADDC      A,#0x0
   \   00009E   F583         MOV       DPH,A
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   12....       LCALL     ?CALL_IND
   \   0000AB   0E           INC       R6
   \   0000AC   02....       LJMP      ??AM_Hot_start_0 & 0xFFFF
     45          }
   \                     ??AM_Hot_start_1:
   \   0000AF   7F02         MOV       R7,#0x2
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
     46          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          void AM_HW_Init(void){
   \                     AM_HW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     48            RUNNER(HW_MOD, HW_Init);      
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_HW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9408         SUBB      A,#0x8
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_HW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??HW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   7025         JNZ       ??AM_HW_Init_2
   \   000044                ; Setup parameters for call to function printf
   \   000044   75..30       MOV       ?V0,#0x30
   \   000047   75..00       MOV       ?V1,#0x0
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000052   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   00005C   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   00005E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000061   7404         MOV       A,#0x4
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066                ; Setup parameters for call to function DBG_CORE_HALT
   \   000066   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_HW_Init_2:
   \   000069                ; Setup parameters for indirect call
   \   000069   EE           MOV       A,R6
   \   00006A   F8           MOV       R0,A
   \   00006B   7900         MOV       R1,#0x0
   \   00006D   E8           MOV       A,R0
   \   00006E   75F002       MOV       B,#0x2
   \   000071   A4           MUL       AB
   \   000072   C8           XCH       A,R0
   \   000073   AAF0         MOV       R2,B
   \   000075   75F000       MOV       B,#0x0
   \   000078   A4           MUL       AB
   \   000079   2A           ADD       A,R2
   \   00007A   FA           MOV       R2,A
   \   00007B   75F002       MOV       B,#0x2
   \   00007E   E9           MOV       A,R1
   \   00007F   A4           MUL       AB
   \   000080   2A           ADD       A,R2
   \   000081   F9           MOV       R1,A
   \   000082   74..         MOV       A,#??HW_MOD & 0xff
   \   000084   28           ADD       A,R0
   \   000085   F582         MOV       DPL,A
   \   000087   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   000089   39           ADDC      A,R1
   \   00008A   F583         MOV       DPH,A
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F8           MOV       R0,A
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F583         MOV       DPH,A
   \   000092   8882         MOV       DPL,R0
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F583         MOV       DPH,A
   \   00009A   8882         MOV       DPL,R0
   \   00009C   12....       LCALL     ?CALL_IND
   \   00009F   0E           INC       R6
   \   0000A0   02....       LJMP      ??AM_HW_Init_0 & 0xFFFF
     49          }
   \                     ??AM_HW_Init_1:
   \   0000A3   7F02         MOV       R7,#0x2
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     51          void AM_SW_Init(void){
   \                     AM_SW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     52            RUNNER(SW_MOD, SW_Init);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_SW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9408         SUBB      A,#0x8
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_SW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??SW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   E8           MOV       A,R0
   \   000043   49           ORL       A,R1
   \   000044   7025         JNZ       ??AM_SW_Init_2
   \   000046                ; Setup parameters for call to function printf
   \   000046   75..34       MOV       ?V0,#0x34
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000054   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   00005E   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   000060   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068                ; Setup parameters for call to function DBG_CORE_HALT
   \   000068   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_SW_Init_2:
   \   00006B                ; Setup parameters for indirect call
   \   00006B   EE           MOV       A,R6
   \   00006C   F8           MOV       R0,A
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   E8           MOV       A,R0
   \   000070   75F002       MOV       B,#0x2
   \   000073   A4           MUL       AB
   \   000074   C8           XCH       A,R0
   \   000075   AAF0         MOV       R2,B
   \   000077   75F000       MOV       B,#0x0
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   FA           MOV       R2,A
   \   00007D   75F002       MOV       B,#0x2
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   F9           MOV       R1,A
   \   000084   74..         MOV       A,#??SW_MOD & 0xff
   \   000086   28           ADD       A,R0
   \   000087   F582         MOV       DPL,A
   \   000089   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   00008B   39           ADDC      A,R1
   \   00008C   F583         MOV       DPH,A
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F8           MOV       R0,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F583         MOV       DPH,A
   \   000094   8882         MOV       DPL,R0
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F583         MOV       DPH,A
   \   00009E   8882         MOV       DPL,R0
   \   0000A0   12....       LCALL     ?CALL_IND
   \   0000A3   0E           INC       R6
   \   0000A4   02....       LJMP      ??AM_SW_Init_0 & 0xFFFF
     53          }
   \                     ??AM_SW_Init_1:
   \   0000A7   7F02         MOV       R7,#0x2
   \   0000A9   02....       LJMP      ?BANKED_LEAVE_XDATA
     54          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          void AM_IRQ_Init(void){
   \                     AM_IRQ_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     56            RUNNER(IRQ_MOD, IRQ_Init);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_IRQ_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9403         SUBB      A,#0x3
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_IRQ_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??IRQ_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??IRQ_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   E8           MOV       A,R0
   \   000045   49           ORL       A,R1
   \   000046   7025         JNZ       ??AM_IRQ_Init_2
   \   000048                ; Setup parameters for call to function printf
   \   000048   75..38       MOV       ?V0,#0x38
   \   00004B   75..00       MOV       ?V1,#0x0
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000056   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">` & 0xff
   \   000060   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">` >> 8) & 0xff
   \   000062   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00006A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_IRQ_Init_2:
   \   00006D                ; Setup parameters for indirect call
   \   00006D   EE           MOV       A,R6
   \   00006E   F8           MOV       R0,A
   \   00006F   7900         MOV       R1,#0x0
   \   000071   E8           MOV       A,R0
   \   000072   75F002       MOV       B,#0x2
   \   000075   A4           MUL       AB
   \   000076   C8           XCH       A,R0
   \   000077   AAF0         MOV       R2,B
   \   000079   75F000       MOV       B,#0x0
   \   00007C   A4           MUL       AB
   \   00007D   2A           ADD       A,R2
   \   00007E   FA           MOV       R2,A
   \   00007F   75F002       MOV       B,#0x2
   \   000082   E9           MOV       A,R1
   \   000083   A4           MUL       AB
   \   000084   2A           ADD       A,R2
   \   000085   F9           MOV       R1,A
   \   000086   74..         MOV       A,#??IRQ_MOD & 0xff
   \   000088   28           ADD       A,R0
   \   000089   F582         MOV       DPL,A
   \   00008B   74..         MOV       A,#(??IRQ_MOD >> 8) & 0xff
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F8           MOV       R0,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F583         MOV       DPH,A
   \   000096   8882         MOV       DPL,R0
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F8           MOV       R0,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   8882         MOV       DPL,R0
   \   0000A4   12....       LCALL     ?CALL_IND
   \   0000A7   0E           INC       R6
   \   0000A8   02....       LJMP      ??AM_IRQ_Init_0 & 0xFFFF
     57          }
   \                     ??AM_IRQ_Init_1:
   \   0000AB   7F02         MOV       R7,#0x2
   \   0000AD   02....       LJMP      ?BANKED_LEAVE_XDATA
     58          
     59          
E:\Neocore\Hardware\STACK_CORE_SRC\alarm_timer.c
      1          #include "alarm_timer.h"
      2          #include "time_manager.h"
      3          #include "action_manager.h"
      4          #include "ioCC2530.h"
      5          #include "stdbool.h"
      6          #include "stdint.h"
      7          #include "debug.h"
      8          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      9          
     10          /**
     11          @file
     12          */
     13          
     14          #define MAX_NWTIME (nwtime_t)32767
     15          
     16          static void HW_Init(void);  
     17          static inline void IRQEnable(bool state);
     18          static uint32_t ReadTimer(void);
     19          static inline bool isIRQEnable(void);
     20          static inline uint32_t calcCompareTime(nwtime_t time);
     21          static void loadTimerCompare(uint32_t ticks);
     22          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          module_s AT_MODULE = {ALIAS(HW_Init)};
   \                     AT_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for AT_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static nwtime_t TOFFSET; 
   \                     ??TOFFSET:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          static uint32_t COMPARE_TIME; //!< Значение в регистре compare
   \                     ??COMPARE_TIME:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     26          
     27          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     28          static void HW_Init(void){
   \                     ??HW_Init:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     29            TOFFSET = 0;
   \   000004   90....       MOV       DPTR,#??TOFFSET
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
     30            COMPARE_TIME = 0;
   \   00000E   90....       MOV       DPTR,#??COMPARE_TIME
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
     31            IRQEnable(false);
   \   000020                ; Setup parameters for call to function IRQEnable
   \   000020   C2F0         CLR       B.0
   \   000022   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
     32          };
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
     33          
     34          static void SW_Init(void){
     35            TOFFSET = 0;
     36            COMPARE_TIME = 0;
     37            IRQEnable(false);
     38          }; 
     39          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          void AT_enable(bool state){
   \                     AT_enable:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   A2F0         MOV       C,B.0
   \   000007   92..         MOV       ?VB.0,C
     41            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   FE           MOV       R6,A
   \   00000E                ; Setup parameters for call to function __cli
   \   00000E   12....       LCALL     `??__cli::?relay`; Banked call to: __cli
   \   000011   E9           MOV       A,R1
   \   000012   F8           MOV       R0,A
   \                     ??AT_enable_0:
   \   000013   E8           MOV       A,R0
   \   000014   6010         JZ        ??AT_enable_1
     42              IRQEnable(state);
   \   000016                ; Setup parameters for call to function IRQEnable
   \   000016   A2..         MOV       C,?VB.0
   \   000018   92F0         MOV       B.0,C
   \   00001A   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
     43            }
   \   00001D   7800         MOV       R0,#0x0
   \   00001F   EE           MOV       A,R6
   \   000020   A2E0         MOV       C,0xE0 /* A   */.0
   \   000022   92AF         MOV       0xa8.7,C
   \   000024   80ED         SJMP      ??AT_enable_0
     44          };
   \                     ??AT_enable_1:
   \   000026   7F01         MOV       R7,#0x1
   \   000028   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00002B                REQUIRE _A_IEN0
     45          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     46          nwtime_t AT_interval(nwtime_t beg, nwtime_t end){
   \                     AT_interval:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     47            return (beg > end) ? (beg - end) : (MAX_NWTIME - beg + end);
   \   000000   C3           CLR       C
   \   000001   EC           MOV       A,R4
   \   000002   9A           SUBB      A,R2
   \   000003   ED           MOV       A,R5
   \   000004   9B           SUBB      A,R3
   \   000005   5009         JNC       ??AT_interval_0
   \   000007   EA           MOV       A,R2
   \   000008   C3           CLR       C
   \   000009   9C           SUBB      A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   EB           MOV       A,R3
   \   00000C   9D           SUBB      A,R5
   \   00000D   FB           MOV       R3,A
   \   00000E   800F         SJMP      ??AT_interval_1
   \                     ??AT_interval_0:
   \   000010   74FF         MOV       A,#-0x1
   \   000012   C3           CLR       C
   \   000013   9A           SUBB      A,R2
   \   000014   F8           MOV       R0,A
   \   000015   747F         MOV       A,#0x7f
   \   000017   9B           SUBB      A,R3
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   2C           ADD       A,R4
   \   00001B   FA           MOV       R2,A
   \   00001C   E9           MOV       A,R1
   \   00001D   3D           ADDC      A,R5
   \   00001E   FB           MOV       R3,A
   \                     ??AT_interval_1:
   \   00001F   02....       LJMP      ?BRET
     48          }
     49          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     50          void AT_set_time(nwtime_t time){
   \                     AT_set_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     51            ASSERT(time <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4025         JC        ??AT_set_time_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75..33       MOV       ?V0,#0x33
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   000020   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_1` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_1` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034                ; Setup parameters for call to function DBG_CORE_HALT
   \   000034   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     52            nwtime_t timer = ReadTimer();
   \                     ??AT_set_time_0:
   \   000037                ; Setup parameters for call to function ReadTimer
   \   000037   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   8C..         MOV       ?V2,R4
   \   000040   8D..         MOV       ?V3,R5
   \   000042   85....       MOV       ?V4,?V0
   \   000045   85....       MOV       ?V5,?V1
     53            TOFFSET = time - timer;
   \   000048   EE           MOV       A,R6
   \   000049   C3           CLR       C
   \   00004A   95..         SUBB      A,?V4
   \   00004C   F8           MOV       R0,A
   \   00004D   EF           MOV       A,R7
   \   00004E   95..         SUBB      A,?V5
   \   000050   F9           MOV       R1,A
   \   000051   90....       MOV       DPTR,#??TOFFSET
   \   000054   E8           MOV       A,R0
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   E9           MOV       A,R1
   \   000058   F0           MOVX      @DPTR,A
     54            TOFFSET &= 0x7FFF;
   \   000059   90....       MOV       DPTR,#??TOFFSET
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   54FF         ANL       A,#0xff
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   547F         ANL       A,#0x7f
   \   000064   F0           MOVX      @DPTR,A
     55            // После установки времени нужно изменить compare time в таймере
     56            // Но только в случаи если прерывание активно
     57            if (isIRQEnable())
   \   000065                ; Setup parameters for call to function isIRQEnable
   \   000065   12....       LCALL     `??isIRQEnable::?relay`; Banked call to: isIRQEnable
   \   000068   500F         JNC       ??AT_set_time_1
     58              AT_set_alarm(COMPARE_TIME);
   \   00006A                ; Setup parameters for call to function AT_set_alarm
   \   00006A   90....       MOV       DPTR,#??COMPARE_TIME
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?L_MOV_X
   \   000072   AA..         MOV       R2,?V0
   \   000074   AB..         MOV       R3,?V1
   \   000076   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     59          }
   \                     ??AT_set_time_1:
   \   000079   7F06         MOV       R7,#0x6
   \   00007B   02....       LJMP      ?BANKED_LEAVE_XDATA
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          nwtime_t AT_time(void){
   \                     AT_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     62            uint32_t val = ReadTimer();
   \   000005                ; Setup parameters for call to function ReadTimer
   \   000005   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   8C..         MOV       ?V6,R4
   \   00000E   8D..         MOV       ?V7,R5
     63            // TOFFSET = NETWORK TIME - TIMER
     64            // NETWORK TIME = TIMER + TOFFSET
     65            val +=TOFFSET;
   \   000010   90....       MOV       DPTR,#??TOFFSET
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V1,A
   \   00001A   E4           CLR       A
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   F5..         MOV       ?V3,A
   \   00001F   78..         MOV       R0,#?V4
   \   000021   79..         MOV       R1,#?V0
   \   000023   12....       LCALL     ?L_ADD
     66            val &= 0x7FFF; // Приводим значения таймера к 0-32767
   \   000026   90....       MOV       DPTR,#__Constant_7fff
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_AND_X
     67            return val;
   \   00002E   AA..         MOV       R2,?V4
   \   000030   AB..         MOV       R3,?V5
   \   000032   7F08         MOV       R7,#0x8
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
     68          }
     69          
     70          /**
     71          @brief Ждем наступления определенного момента времени
     72          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     73          void AT_wait(nwtime_t time){
   \                     AT_wait:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     74            ASSERT(time <= MAX_NWTIME);  
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4025         JC        ??AT_wait_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75..4A       MOV       ?V0,#0x4a
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   000020   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_1` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_1` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034                ; Setup parameters for call to function DBG_CORE_HALT
   \   000034   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     75            static union 
     76            {
     77              uint32_t val;
     78              uint8_t fild[4];
     79            } val;
     80            val.val = 0;
   \                     ??AT_wait_0:
   \   000037   90....       MOV       DPTR,#??val
   \   00003A   7400         MOV       A,#0x0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   7400         MOV       A,#0x0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   7400         MOV       A,#0x0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   7400         MOV       A,#0x0
   \   000048   F0           MOVX      @DPTR,A
     81            // TOFFSET = NETWORK TIME - TIMER
     82            // NETWORK TIME = TIMER + TOFFSET
     83            // Ждем синхронизацию таймера после пробуждения
     84            while (!(SLEEPSTA & 0x01));
   \                     ??AT_wait_1:
   \   000049   E59D         MOV       A,0x9d
   \   00004B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004D   50FA         JNC       ??AT_wait_1
     85            do{
     86              // Соблюдаем порядок чтения регисторов ST  
     87              val.fild[0] = ST0;
   \                     ??AT_wait_2:
   \   00004F   E595         MOV       A,0x95
   \   000051   90....       MOV       DPTR,#??val
   \   000054   F0           MOVX      @DPTR,A
     88              val.fild[1] = ST1;
   \   000055   E596         MOV       A,0x96
   \   000057   90....       MOV       DPTR,#??val + 1
   \   00005A   F0           MOVX      @DPTR,A
     89              val.fild[2] = ST2;
   \   00005B   E597         MOV       A,0x97
   \   00005D   90....       MOV       DPTR,#??val + 2
   \   000060   F0           MOVX      @DPTR,A
     90              val.val +=TOFFSET;
   \   000061   90....       MOV       DPTR,#??TOFFSET
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V1,A
   \   00006B   E4           CLR       A
   \   00006C   F5..         MOV       ?V2,A
   \   00006E   F5..         MOV       ?V3,A
   \   000070   90....       MOV       DPTR,#??val
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?L_ADD_TO_X
     91              val.val &= 0x7FFF; // Приводим значения таймера к 0-32767    
   \   000078   90....       MOV       DPTR,#__Constant_7fff
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?L_MOV_X
   \   000080   90....       MOV       DPTR,#??val
   \   000083   78..         MOV       R0,#?V0
   \   000085   12....       LCALL     ?L_AND_TO_X
     92            } while (val.val < time);
   \   000088   8E..         MOV       ?V0,R6
   \   00008A   8F..         MOV       ?V1,R7
   \   00008C   E4           CLR       A
   \   00008D   F5..         MOV       ?V2,A
   \   00008F   F5..         MOV       ?V3,A
   \   000091   90....       MOV       DPTR,#??val
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?UL_GT_X
   \   000099   40B4         JC        ??AT_wait_2
     93          }
   \   00009B   7F04         MOV       R7,#0x4
   \   00009D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000A0                REQUIRE SLEEPSTA
   \   0000A0                REQUIRE ST0
   \   0000A0                REQUIRE ST1
   \   0000A0                REQUIRE ST2

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     94          
     95          /**
     96          @brief Разрешение прерываний таймера сна
     97          @params[in] state = true - разрешить обработку прерываний
     98          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          static inline void IRQEnable(bool state){
   \                     ??IRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   A2F0         MOV       C,B.0
   \   000002   92F0         MOV       B.0,C
    100            if (state)
   \   000004   A2F0         MOV       C,B.0
   \   000006   5004         JNC       ??IRQEnable_1
    101              STIE = 1;
   \   000008   D2AD         SETB      0xa8.5
   \   00000A   8002         SJMP      ??IRQEnable_2
    102            else
    103              STIE = 0;
   \                     ??IRQEnable_1:
   \   00000C   C2AD         CLR       0xa8.5
    104          }
   \                     ??IRQEnable_2:
   \   00000E   02....       LJMP      ?BRET
   \   000011                REQUIRE _A_IEN0
    105          
    106          /**
    107          @brief Устанавливает время прерывания
    108          @details Время прерывания устанавливается относительно времени сети
    109          ,к примеру, что бы проснуться в таймслот номер 0, нужно установить ticks = 0.
    110          Процедура учитывает текущее значение таймера и перерасчитывает значение ticks. 
    111          @params[in] ticks время сети в тиках когда нужно проснуться
    112          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          void AT_set_alarm(nwtime_t alarm){
   \                     AT_set_alarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    114            ASSERT(alarm <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4025         JC        ??AT_set_alarm_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75..72       MOV       ?V0,#0x72
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   000020   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_1` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_1` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034                ; Setup parameters for call to function DBG_CORE_HALT
   \   000034   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    115            COMPARE_TIME = alarm; // Сохраняем установленное значение
   \                     ??AT_set_alarm_0:
   \   000037   EE           MOV       A,R6
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   E4           CLR       A
   \   00003C   FC           MOV       R4,A
   \   00003D   FD           MOV       R5,A
   \   00003E   90....       MOV       DPTR,#??COMPARE_TIME
   \   000041   EA           MOV       A,R2
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   EB           MOV       A,R3
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   EC           MOV       A,R4
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   ED           MOV       A,R5
   \   00004B   F0           MOVX      @DPTR,A
    116            uint32_t compare_time = calcCompareTime(alarm);
   \   00004C                ; Setup parameters for call to function calcCompareTime
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??calcCompareTime::?relay`; Banked call to: calcCompareTime
   \   000053   8A..         MOV       ?V0,R2
   \   000055   8B..         MOV       ?V1,R3
   \   000057   8C..         MOV       ?V2,R4
   \   000059   8D..         MOV       ?V3,R5
    117            loadTimerCompare(compare_time);
   \   00005B                ; Setup parameters for call to function loadTimerCompare
   \   00005B   AA..         MOV       R2,?V0
   \   00005D   AB..         MOV       R3,?V1
   \   00005F   AC..         MOV       R4,?V2
   \   000061   AD..         MOV       R5,?V3
   \   000063   12....       LCALL     `??loadTimerCompare::?relay`; Banked call to: loadTimerCompare
    118            IRQEnable(true);
   \   000066                ; Setup parameters for call to function IRQEnable
   \   000066   D2F0         SETB      B.0
   \   000068   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    119          }
   \   00006B   7F04         MOV       R7,#0x4
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA
    120          
    121          /**
    122          @brief Вычисляет значение, которое нужно установить в регистр compare таймера.
    123          @params[in] time время сети в тикак
    124          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          static inline uint32_t calcCompareTime(nwtime_t time){   
   \                     ??calcCompareTime:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    126              uint32_t timer = ReadTimer(); // Текущее значение счетчика
   \   000014                ; Setup parameters for call to function ReadTimer
   \   000014   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000017   8A..         MOV       ?V4,R2
   \   000019   8B..         MOV       ?V5,R3
   \   00001B   8C..         MOV       ?V6,R4
   \   00001D   8D..         MOV       ?V7,R5
    127              //NETWORK TIME = TIMER + TOFFSET  
    128              // Приводим такты к тактам таймера
    129              uint16_t ticks_offset = (time - TOFFSET) & 0x7FFF;
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   C082         PUSH      DPL
   \   000026   C083         PUSH      DPH
   \   000028   90....       MOV       DPTR,#??TOFFSET
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   D083         POP       DPH
   \   000032   D082         POP       DPL
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C3           CLR       C
   \   000036   98           SUBB      A,R0
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   99           SUBB      A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   E8           MOV       A,R0
   \   00003D   54FF         ANL       A,#0xff
   \   00003F   FE           MOV       R6,A
   \   000040   E9           MOV       A,R1
   \   000041   547F         ANL       A,#0x7f
   \   000043   FF           MOV       R7,A
    130              uint32_t cmp_time = timer & ~0x7FFF; // Убираем младшие 15 бит
   \   000044   85....       MOV       ?V0,?V4
   \   000047   85....       MOV       ?V1,?V5
   \   00004A   85....       MOV       ?V2,?V6
   \   00004D   85....       MOV       ?V3,?V7
   \   000050   90....       MOV       DPTR,#__Constant_ffff8000
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?L_AND_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_MOV_TO_X
    131              cmp_time |= ticks_offset; // Вычисляем новое время
   \   000063   8E..         MOV       ?V0,R6
   \   000065   8F..         MOV       ?V1,R7
   \   000067   E4           CLR       A
   \   000068   F5..         MOV       ?V2,A
   \   00006A   F5..         MOV       ?V3,A
   \   00006C   85..82       MOV       DPL,?XSP + 0
   \   00006F   85..83       MOV       DPH,?XSP + 1
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?L_IOR_TO_X
    132              if (cmp_time <= timer){
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?UL_GE_X
   \   000082   5026         JNC       ??calcCompareTime_1
    133                cmp_time += 0x8000;
   \   000084   90....       MOV       DPTR,#__Constant_8000
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_MOV_X
   \   00008C   85..82       MOV       DPL,?XSP + 0
   \   00008F   85..83       MOV       DPH,?XSP + 1
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?L_ADD_TO_X
    134                cmp_time &=0xFFFFFF;
   \   000097   90....       MOV       DPTR,#__Constant_ffffff
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_X
   \   00009F   85..82       MOV       DPL,?XSP + 0
   \   0000A2   85..83       MOV       DPH,?XSP + 1
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?L_AND_TO_X
    135              }
    136               LOG_OFF("Timer = %lu, Ticks = %d,CMP = %lu \r\n",
    137                    timer, ticks, cmp_time );
    138              return cmp_time;
   \                     ??calcCompareTime_1:
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   12....       LCALL     ?XLOAD_R2345
   \   0000B3   7406         MOV       A,#0x6
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B8   7F08         MOV       R7,#0x8
   \   0000BA   02....       LJMP      ?BANKED_LEAVE_XDATA
    139          }
    140          
    141          /**
    142          @brief Возвращает текущее значение таймера
    143          @return Текущие ticks
    144          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          static uint32_t ReadTimer(void){
   \                     ??ReadTimer:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    146            static union 
    147            {
    148              uint32_t val;
    149              uint8_t fild[4];
    150            } ret_val;
    151            ret_val.val = 0;
   \   000004   90....       MOV       DPTR,#??ret_val
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
    152            // Ждем синхронизацию таймера после пробуждения
    153            while (!(SLEEPSTA & 0x01));
   \                     ??ReadTimer_1:
   \   000016   E59D         MOV       A,0x9d
   \   000018   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001A   50FA         JNC       ??ReadTimer_1
    154            // Соблюдаем порядок чтения регисторов ST  
    155            ret_val.fild[0] = ST0;
   \   00001C   E595         MOV       A,0x95
   \   00001E   90....       MOV       DPTR,#??ret_val
   \   000021   F0           MOVX      @DPTR,A
    156            ret_val.fild[1] = ST1;
   \   000022   E596         MOV       A,0x96
   \   000024   90....       MOV       DPTR,#??ret_val + 1
   \   000027   F0           MOVX      @DPTR,A
    157            ret_val.fild[2] = ST2;
   \   000028   E597         MOV       A,0x97
   \   00002A   90....       MOV       DPTR,#??ret_val + 2
   \   00002D   F0           MOVX      @DPTR,A
    158            return ret_val.val;
   \   00002E   90....       MOV       DPTR,#??ret_val
   \   000031   12....       LCALL     ?XLOAD_R2345
   \   000034   D083         POP       DPH
   \   000036   D082         POP       DPL
   \   000038   02....       LJMP      ?BRET
   \   00003B                REQUIRE SLEEPSTA
   \   00003B                REQUIRE ST0
   \   00003B                REQUIRE ST1
   \   00003B                REQUIRE ST2
    159          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??ret_val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    160          
    161          /**
    162          @brief Устанавливает время пробуждения микроконтролера
    163          @params[in] ticks 24 битное значение времени пробуждения в ticks
    164          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    165          static void loadTimerCompare(uint32_t ticks){
   \                     ??loadTimerCompare:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    166            union 
    167            {
    168              uint32_t val;
    169              uint8_t fild[4];
    170            } value;
    171            value.val = ticks;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
    172            // Ждем разрешения на запись нового значения
    173            while (!(STLOAD & 0x01));
   \                     ??loadTimerCompare_1:
   \   00001D   E5AD         MOV       A,0xad
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   50FA         JNC       ??loadTimerCompare_1
    174            // Регистр ST0 должен быть записан в последнию очередь
    175            ST2 = value.fild[2];
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F597         MOV       0x97,A
    176            ST1 = value.fild[1];
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F596         MOV       0x96,A
    177            ST0 = value.fild[0];
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F595         MOV       0x95,A
    178          }
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   7F04         MOV       R7,#0x4
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000046                REQUIRE STLOAD
   \   000046                REQUIRE ST2
   \   000046                REQUIRE ST1
   \   000046                REQUIRE ST0
    179          
    180          /**
    181          @brief Проверка активности прерывания таймера
    182          @return true если прерывание установленно
    183          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          static inline bool isIRQEnable(void){
   \                     ??isIRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    185            return STIE;
   \   000000   A2AD         MOV       C,0xa8.5
   \   000002   02....       LJMP      ?BRET
   \   000005                REQUIRE _A_IEN0
    186          }
    187          
    188          /**
    189          @brief Обработчик прерывания таймера сна
    190          */
    191          #pragma vector=ST_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    192          __interrupt void TimerCompareInterrupt(void){ 
   \                     TimerCompareInterrupt:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   C0E0         PUSH      A
   \   000002   74F1         MOV       A,#-0xf
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    193            nwtime_t time = AT_time();
   \   000007                ; Setup parameters for call to function AT_time
   \   000007   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   AE..         MOV       R6,?V0
   \   000010   AF..         MOV       R7,?V1
    194            // Отключаем прерывание таймера. Забота пользователя его включить
    195            IRQEnable(false); 
   \   000012                ; Setup parameters for call to function IRQEnable
   \   000012   C2F0         CLR       B.0
   \   000014   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    196            TM_IRQ(time); // Передаем управление менеджеру времени
   \   000017                ; Setup parameters for call to function TM_IRQ
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??TM_IRQ::?relay`; Banked call to: TM_IRQ
    197            STIF = 0; // Очищаем флаг прерывания
   \   00001E   C2C7         CLR       0xc0.7
    198          }
   \   000020   7F02         MOV       R7,#0x2
   \   000022   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000025                REQUIRE _A_IRCON
E:\Neocore\Hardware\STACK_CORE_SRC\buffer.c
      1          #include "debug.h"
      2          #include "macros.h"
      3          #include "frame.h"
      4          #include "stdbool.h"
      5          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      6          #include "list.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void INIT_LIST_HEAD(struct list_head *)
   \                     ??INIT_LIST_HEAD:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   EA           MOV       A,R2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   EB           MOV       A,R3
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   EA           MOV       A,R2
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *)
   \                     ??__list_add_valid:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   D3           SETB      C
   \   000001   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool __list_del_entry_valid(struct list_head *)
   \                     ??__list_del_entry_valid:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   D3           SETB      C
   \   000001   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_add(struct list_head *, struct list_head *, struct list_head *)
   \                     ??__list_add:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
   \   000019                ; Setup parameters for call to function __list_add_valid
   \   000019   78..         MOV       R0,#?V2
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   AC..         MOV       R4,?V0
   \   000020   AD..         MOV       R5,?V1
   \   000022   EE           MOV       A,R6
   \   000023   FA           MOV       R2,A
   \   000024   EF           MOV       A,R7
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??__list_add_valid::?relay`; Banked call to: __list_add_valid
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   5030         JNC       ??__list_add_1
   \   000030   85..82       MOV       DPL,?V2
   \   000033   85..83       MOV       DPH,?V3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   EF           MOV       A,R7
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   E5..         MOV       A,?V2
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E5..         MOV       A,?V3
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E5..         MOV       A,?V0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V1
   \   000054   F0           MOVX      @DPTR,A
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   EE           MOV       A,R6
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EF           MOV       A,R7
   \   00005F   F0           MOVX      @DPTR,A
   \                     ??__list_add_1:
   \   000060   7F04         MOV       R7,#0x4
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void list_add(struct list_head *, struct list_head *)
   \                     ??list_add:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D                ; Setup parameters for call to function __list_add
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000014   EE           MOV       A,R6
   \   000015   FC           MOV       R4,A
   \   000016   EF           MOV       A,R7
   \   000017   FD           MOV       R5,A
   \   000018   AA..         MOV       R2,?V0
   \   00001A   AB..         MOV       R3,?V1
   \   00001C   12....       LCALL     `??__list_add::?relay`; Banked call to: __list_add
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   7F02         MOV       R7,#0x2
   \   000026   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_del(struct list_head *, struct list_head *)
   \                     ??__list_del:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   EA           MOV       A,R2
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   EB           MOV       A,R3
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   EC           MOV       A,R4
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   ED           MOV       A,R5
   \   000017   F0           MOVX      @DPTR,A
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_del_entry(struct list_head *)
   \                     ??__list_del_entry:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009                ; Setup parameters for call to function __list_del_entry_valid
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??__list_del_entry_valid::?relay`; Banked call to: __list_del_entry_valid
   \   000010   5017         JNC       ??__list_del_entry_1
   \   000012                ; Setup parameters for call to function __list_del
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FC           MOV       R4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??__list_del::?relay`; Banked call to: __list_del
   \                     ??__list_del_entry_1:
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void list_del(struct list_head *)
   \                     ??list_del:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009                ; Setup parameters for call to function __list_del_entry
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??__list_del_entry::?relay`; Banked call to: __list_del_entry
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   7401         MOV       A,#0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   7402         MOV       A,#0x2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   7402         MOV       A,#0x2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   7F01         MOV       R7,#0x1
   \   00002A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant int list_is_last(struct list_head const *, struct list_head const *)
   \                     ??list_is_last:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   EC           MOV       A,R4
   \   00000E   68           XRL       A,R0
   \   00000F   7002         JNZ       ??list_is_last_1
   \   000011   ED           MOV       A,R5
   \   000012   69           XRL       A,R1
   \                     ??list_is_last_1:
   \   000013   7004         JNZ       ??list_is_last_2
   \   000015   D2F0         SETB      B.0
   \   000017   8002         SJMP      ??list_is_last_3
   \                     ??list_is_last_2:
   \   000019   C2F0         CLR       B.0
   \                     ??list_is_last_3:
   \   00001B   A2F0         MOV       C,B.0
   \   00001D   E4           CLR       A
   \   00001E   33           RLC       A
   \   00001F   FA           MOV       R2,A
   \   000020   7B00         MOV       R3,#0x0
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant int list_empty(struct list_head const *)
   \                     ??list_empty:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   EA           MOV       A,R2
   \   00000E   68           XRL       A,R0
   \   00000F   7002         JNZ       ??list_empty_1
   \   000011   EB           MOV       A,R3
   \   000012   69           XRL       A,R1
   \                     ??list_empty_1:
   \   000013   7004         JNZ       ??list_empty_2
   \   000015   D2F0         SETB      B.0
   \   000017   8002         SJMP      ??list_empty_3
   \                     ??list_empty_2:
   \   000019   C2F0         CLR       B.0
   \                     ??list_empty_3:
   \   00001B   A2F0         MOV       C,B.0
   \   00001D   E4           CLR       A
   \   00001E   33           RLC       A
   \   00001F   FA           MOV       R2,A
   \   000020   7B00         MOV       R3,#0x0
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
      7          
      8          #include "action_manager.h"
      9          static void SW_Init(void);
     10          static void IRQ_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     11          module_s BF_MODULE = {ALIAS(SW_Init),ALIAS(IRQ_Init)};
   \                     BF_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for BF_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     12          
     13          struct node {
     14            struct frame *frame;
     15            struct list_head list ;
     16          };
     17          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          static struct node NODE_LIST[MAX_TXRX_BUFF_SIZE];
   \                     ??NODE_LIST:
   \   000000                DS 120
   \   000078                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     19          LIST_HEAD(TX_LIST_HEAD);
   \                     TX_LIST_HEAD:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for TX_LIST_HEAD>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     20          LIST_HEAD(RX_LIST_HEAD);
   \                     RX_LIST_HEAD:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for RX_LIST_HEAD>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static int TX_BUFF_FRAME_COUNT;
   \                     ??TX_BUFF_FRAME_COUNT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static int RX_BUFF_FRAME_COUNT;
   \                     ??RX_BUFF_FRAME_COUNT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     23          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          static void IRQ_Init(void){};
   \                     ??IRQ_Init:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          static void SW_Init(void){
   \                     ??SW_Init:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     27            TX_BUFF_FRAME_COUNT = 0;
   \   000005   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000008   7400         MOV       A,#0x0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   7400         MOV       A,#0x0
   \   00000E   F0           MOVX      @DPTR,A
     28            RX_BUFF_FRAME_COUNT = 0;
   \   00000F   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000012   7400         MOV       A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
     29            INIT_LIST_HEAD(&TX_LIST_HEAD);
   \   000019                ; Setup parameters for call to function INIT_LIST_HEAD
   \   000019   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   00001B   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   00001D   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     30            INIT_LIST_HEAD(&RX_LIST_HEAD);
   \   000020                ; Setup parameters for call to function INIT_LIST_HEAD
   \   000020   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   000022   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   000024   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     31            
     32            for_each_type(struct node, NODE_LIST, node){
   \   000027   7E..         MOV       R6,#??NODE_LIST & 0xff
   \   000029   7F..         MOV       R7,#(??NODE_LIST >> 8) & 0xff
   \                     ??SW_Init_10:
   \   00002B   C3           CLR       C
   \   00002C   EE           MOV       A,R6
   \   00002D   94..         SUBB      A,#(??NODE_LIST + 120) & 0xff
   \   00002F   EF           MOV       A,R7
   \   000030   94..         SUBB      A,#((??NODE_LIST + 120) >> 8) & 0xff
   \   000032   501E         JNC       ??SW_Init_11
     33              node->frame = NULL;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   7400         MOV       A,#0x0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   7400         MOV       A,#0x0
   \   00003E   F0           MOVX      @DPTR,A
     34              INIT_LIST_HEAD(&node->list);
   \   00003F                ; Setup parameters for call to function INIT_LIST_HEAD
   \   00003F   EE           MOV       A,R6
   \   000040   2402         ADD       A,#0x2
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     35            }
   \   000049   EE           MOV       A,R6
   \   00004A   2406         ADD       A,#0x6
   \   00004C   FE           MOV       R6,A
   \   00004D   50DC         JNC       ??SW_Init_10
   \   00004F   0F           INC       R7
   \   000050   80D9         SJMP      ??SW_Init_10
     36          };
   \                     ??SW_Init_11:
   \   000052   7F01         MOV       R7,#0x1
   \   000054   02....       LJMP      ?BANKED_LEAVE_XDATA
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          int BF_rx_busy(){
   \                     BF_rx_busy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     39            return RX_BUFF_FRAME_COUNT;
   \   000004   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FB           MOV       R3,A
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
     40          };
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          int BF_tx_busy(){
   \                     BF_tx_busy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     43            return TX_BUFF_FRAME_COUNT;
   \   000004   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FB           MOV       R3,A
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
     44          }
     45          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     46          int BF_available(){
   \                     BF_available:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     47            int summ = RX_BUFF_FRAME_COUNT + TX_BUFF_FRAME_COUNT;
   \   000005   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000010   E0           MOVX      A,@DPTR
   \   000011   28           ADD       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   39           ADDC      A,R1
   \   000016   FF           MOV       R7,A
     48            ASSERT(summ <= MAX_TXRX_BUFF_SIZE);
   \   000017   C3           CLR       C
   \   000018   EE           MOV       A,R6
   \   000019   9415         SUBB      A,#0x15
   \   00001B   EF           MOV       A,R7
   \   00001C   9400         SUBB      A,#0x0
   \   00001E   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000020   65D0         XRL       A,PSW
   \   000022   33           RLC       A
   \   000023   4025         JC        ??BF_available_0
   \   000025                ; Setup parameters for call to function printf
   \   000025   75..30       MOV       ?V0,#0x30
   \   000028   75..00       MOV       ?V1,#0x0
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75....       MOV       ?V0,#`?<Constant "buffer.c">` & 0xff
   \   000033   75....       MOV       ?V1,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_2` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_2` >> 8) & 0xff
   \   00003F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047                ; Setup parameters for call to function DBG_CORE_HALT
   \   000047   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     49            return MAX_TXRX_BUFF_SIZE - summ;
   \                     ??BF_available_0:
   \   00004A   7414         MOV       A,#0x14
   \   00004C   C3           CLR       C
   \   00004D   9E           SUBB      A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   7400         MOV       A,#0x0
   \   000051   9F           SUBB      A,R7
   \   000052   FB           MOV       R3,A
   \   000053   7F02         MOV       R7,#0x2
   \   000055   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          }
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          int BF_available_tx(){
   \                     BF_available_tx:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     53            int summ = MAX_TX_BUFF - TX_BUFF_FRAME_COUNT;
   \   000004   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   740A         MOV       A,#0xa
   \   00000E   C3           CLR       C
   \   00000F   98           SUBB      A,R0
   \   000010   FA           MOV       R2,A
   \   000011   7400         MOV       A,#0x0
   \   000013   99           SUBB      A,R1
   \   000014   FB           MOV       R3,A
     54            return summ;
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
     55          }
     56          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     57          int BF_available_rx(){
   \                     BF_available_rx:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     58            int summ = MAX_RX_BUFF - RX_BUFF_FRAME_COUNT;
   \   000004   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   740A         MOV       A,#0xa
   \   00000E   C3           CLR       C
   \   00000F   98           SUBB      A,R0
   \   000010   FA           MOV       R2,A
   \   000011   7400         MOV       A,#0x0
   \   000013   99           SUBB      A,R1
   \   000014   FB           MOV       R3,A
     59            return summ;
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
     60          }
     61          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     62          static inline struct node* find_free_node(void){
   \                     ??find_free_node:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     63            for_each_type(struct node, NODE_LIST, node)
   \   000005   7E..         MOV       R6,#??NODE_LIST & 0xff
   \   000007   7F..         MOV       R7,#(??NODE_LIST >> 8) & 0xff
   \                     ??find_free_node_1:
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   94..         SUBB      A,#(??NODE_LIST + 120) & 0xff
   \   00000D   EF           MOV       A,R7
   \   00000E   94..         SUBB      A,#((??NODE_LIST + 120) >> 8) & 0xff
   \   000010   5026         JNC       ??find_free_node_2
     64              if (node->frame == NULL){
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   E8           MOV       A,R0
   \   00001C   49           ORL       A,R1
   \   00001D   7010         JNZ       ??find_free_node_3
     65                INIT_LIST_HEAD(&node->list);
   \   00001F                ; Setup parameters for call to function INIT_LIST_HEAD
   \   00001F   EE           MOV       A,R6
   \   000020   2402         ADD       A,#0x2
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   3F           ADDC      A,R7
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     66                return node;
   \   000029   EE           MOV       A,R6
   \   00002A   FA           MOV       R2,A
   \   00002B   EF           MOV       A,R7
   \   00002C   FB           MOV       R3,A
   \   00002D   800D         SJMP      ??find_free_node_4
     67              }
   \                     ??find_free_node_3:
   \   00002F   EE           MOV       A,R6
   \   000030   2406         ADD       A,#0x6
   \   000032   FE           MOV       R6,A
   \   000033   50D4         JNC       ??find_free_node_1
   \   000035   0F           INC       R7
   \   000036   80D1         SJMP      ??find_free_node_1
     68            return NULL;
   \                     ??find_free_node_2:
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \                     ??find_free_node_4:
   \   00003C   7F01         MOV       R7,#0x1
   \   00003E   02....       LJMP      ?BANKED_LEAVE_XDATA
     69          };
     70          
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          static inline bool _push(struct list_head *list, struct frame *frame){
   \                     ??_push:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
     73            ASSERT(frame != NULL);
   \   00000D   E5..         MOV       A,?V0
   \   00000F   45..         ORL       A,?V1
   \   000011   7025         JNZ       ??_push_1
   \   000013                ; Setup parameters for call to function printf
   \   000013   75..49       MOV       ?V4,#0x49
   \   000016   75..00       MOV       ?V5,#0x0
   \   000019   78..         MOV       R0,#?V4
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV       ?V4,#`?<Constant "buffer.c">` & 0xff
   \   000021   75....       MOV       ?V5,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V4
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_2` & 0xff
   \   00002B   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_2` >> 8) & 0xff
   \   00002D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   \   000035                ; Setup parameters for call to function DBG_CORE_HALT
   \   000035   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     74            struct node *node = find_free_node();
   \                     ??_push_1:
   \   000038                ; Setup parameters for call to function find_free_node
   \   000038   12....       LCALL     `??find_free_node::?relay`; Banked call to: find_free_node
   \   00003B   8A..         MOV       ?V4,R2
   \   00003D   8B..         MOV       ?V5,R3
   \   00003F   AE..         MOV       R6,?V4
   \   000041   AF..         MOV       R7,?V5
     75            if (!node) // Нет свободных мест
   \   000043   EE           MOV       A,R6
   \   000044   4F           ORL       A,R7
   \   000045   7003         JNZ       ??_push_2
     76              return false;
   \   000047   C3           CLR       C
   \   000048   801A         SJMP      ??_push_3
     77            node->frame = frame;
   \                     ??_push_2:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   E5..         MOV       A,?V0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V1
   \   000054   F0           MOVX      @DPTR,A
     78            list_add(&node->list , list);
   \   000055                ; Setup parameters for call to function list_add
   \   000055   AC..         MOV       R4,?V2
   \   000057   AD..         MOV       R5,?V3
   \   000059   EE           MOV       A,R6
   \   00005A   2402         ADD       A,#0x2
   \   00005C   FA           MOV       R2,A
   \   00005D   E4           CLR       A
   \   00005E   3F           ADDC      A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??list_add::?relay`; Banked call to: list_add
     79            return true;
   \   000063   D3           SETB      C
   \                     ??_push_3:
   \   000064   7F06         MOV       R7,#0x6
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
     80          };
     81          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     82          bool BF_push_tx(struct frame *frame){
   \                     BF_push_tx:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     83            bool res = false;
   \   000009   C2..         CLR       ?VB.0
     84            ATOMIC_BLOCK_RESTORE{
   \   00000B   A2AF         MOV       C,0xa8.7
   \   00000D   E4           CLR       A
   \   00000E   33           RLC       A
   \   00000F   F5..         MOV       ?V0,A
   \   000011                ; Setup parameters for call to function __cli
   \   000011   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000014   E9           MOV       A,R1
   \   000015   F8           MOV       R0,A
   \                     ??BF_push_tx_0:
   \   000016   E8           MOV       A,R0
   \   000017   6039         JZ        ??BF_push_tx_1
     85              if (TX_BUFF_FRAME_COUNT < MAX_TX_BUFF){
   \   000019   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   00001C   C3           CLR       C
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   940A         SUBB      A,#0xa
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   9400         SUBB      A,#0x0
   \   000024   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000026   65D0         XRL       A,PSW
   \   000028   33           RLC       A
   \   000029   501D         JNC       ??BF_push_tx_2
     86                res = _push(&TX_LIST_HEAD, frame);
   \   00002B                ; Setup parameters for call to function _push
   \   00002B   EE           MOV       A,R6
   \   00002C   FC           MOV       R4,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FD           MOV       R5,A
   \   00002F   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   000031   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   000033   12....       LCALL     `??_push::?relay`; Banked call to: _push
   \   000036   92..         MOV       ?VB.0,C
     87                if (res)
   \   000038   A2..         MOV       C,?VB.0
   \   00003A   500C         JNC       ??BF_push_tx_2
     88                  TX_BUFF_FRAME_COUNT++;
   \   00003C   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   2401         ADD       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   3400         ADDC      A,#0x0
   \   000047   F0           MOVX      @DPTR,A
     89              }
     90            };
   \                     ??BF_push_tx_2:
   \   000048   7800         MOV       R0,#0x0
   \   00004A   E5..         MOV       A,?V0
   \   00004C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004E   92AF         MOV       0xa8.7,C
   \   000050   80C4         SJMP      ??BF_push_tx_0
     91            return res;
   \                     ??BF_push_tx_1:
   \   000052   A2..         MOV       C,?VB.0
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000059                REQUIRE _A_IEN0
     92          };
     93          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          bool BF_push_rx(struct frame *frame){
   \                     BF_push_rx:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     95            bool res = false;
   \   000009   C2..         CLR       ?VB.0
     96            ATOMIC_BLOCK_RESTORE{
   \   00000B   A2AF         MOV       C,0xa8.7
   \   00000D   E4           CLR       A
   \   00000E   33           RLC       A
   \   00000F   F5..         MOV       ?V0,A
   \   000011                ; Setup parameters for call to function __cli
   \   000011   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000014   E9           MOV       A,R1
   \   000015   F8           MOV       R0,A
   \                     ??BF_push_rx_0:
   \   000016   E8           MOV       A,R0
   \   000017   6039         JZ        ??BF_push_rx_1
     97              if (RX_BUFF_FRAME_COUNT < MAX_RX_BUFF){
   \   000019   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   00001C   C3           CLR       C
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   940A         SUBB      A,#0xa
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   9400         SUBB      A,#0x0
   \   000024   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000026   65D0         XRL       A,PSW
   \   000028   33           RLC       A
   \   000029   501D         JNC       ??BF_push_rx_2
     98                res = _push(&RX_LIST_HEAD, frame);
   \   00002B                ; Setup parameters for call to function _push
   \   00002B   EE           MOV       A,R6
   \   00002C   FC           MOV       R4,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FD           MOV       R5,A
   \   00002F   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   000031   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   000033   12....       LCALL     `??_push::?relay`; Banked call to: _push
   \   000036   92..         MOV       ?VB.0,C
     99                if (res)
   \   000038   A2..         MOV       C,?VB.0
   \   00003A   500C         JNC       ??BF_push_rx_2
    100                  RX_BUFF_FRAME_COUNT++;
   \   00003C   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   2401         ADD       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   3400         ADDC      A,#0x0
   \   000047   F0           MOVX      @DPTR,A
    101              }
    102            };
   \                     ??BF_push_rx_2:
   \   000048   7800         MOV       R0,#0x0
   \   00004A   E5..         MOV       A,?V0
   \   00004C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004E   92AF         MOV       0xa8.7,C
   \   000050   80C4         SJMP      ??BF_push_rx_0
    103            return res;
   \                     ??BF_push_rx_1:
   \   000052   A2..         MOV       C,?VB.0
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000059                REQUIRE _A_IEN0
    104          };
    105          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void* BF_cursor_rx(void){
   \                     BF_cursor_rx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    107            if (list_empty(&RX_LIST_HEAD)) 
   \   000005                ; Setup parameters for call to function list_empty
   \   000005   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   000007   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   000009   12....       LCALL     `??list_empty::?relay`; Banked call to: list_empty
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   6006         JZ        ??BF_cursor_rx_0
    108              return NULL;
   \   000016   7A00         MOV       R2,#0x0
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   802C         SJMP      ??BF_cursor_rx_1
    109            void *ret_val;
    110            ATOMIC_BLOCK_RESTORE{   
   \                     ??BF_cursor_rx_0:
   \   00001C   A2AF         MOV       C,0xa8.7
   \   00001E   E4           CLR       A
   \   00001F   33           RLC       A
   \   000020   F5..         MOV       ?V0,A
   \   000022                ; Setup parameters for call to function __cli
   \   000022   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000025   E9           MOV       A,R1
   \   000026   F8           MOV       R0,A
   \                     ??BF_cursor_rx_2:
   \   000027   E8           MOV       A,R0
   \   000028   601A         JZ        ??BF_cursor_rx_3
    111              struct node *node = list_first_entry(&RX_LIST_HEAD, struct node, list);
   \   00002A   90....       MOV       DPTR,#RX_LIST_HEAD
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   24FE         ADD       A,#-0x2
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   34FF         ADDC      A,#-0x1
   \   000035   F9           MOV       R1,A
    112              ret_val =  node;
   \   000036   E8           MOV       A,R0
   \   000037   FE           MOV       R6,A
   \   000038   E9           MOV       A,R1
   \   000039   FF           MOV       R7,A
    113            }
   \   00003A   7800         MOV       R0,#0x0
   \   00003C   E5..         MOV       A,?V0
   \   00003E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000040   92AF         MOV       0xa8.7,C
   \   000042   80E3         SJMP      ??BF_cursor_rx_2
    114            return ret_val;
   \                     ??BF_cursor_rx_3:
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \                     ??BF_cursor_rx_1:
   \   000048   7F02         MOV       R7,#0x2
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00004D                REQUIRE _A_IEN0
    115          }
    116          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void* BF_cursor_tx(void){
   \                     BF_cursor_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    118            if (list_empty(&TX_LIST_HEAD)) 
   \   000005                ; Setup parameters for call to function list_empty
   \   000005   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   000007   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   000009   12....       LCALL     `??list_empty::?relay`; Banked call to: list_empty
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   6006         JZ        ??BF_cursor_tx_0
    119              return NULL;
   \   000016   7A00         MOV       R2,#0x0
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   802C         SJMP      ??BF_cursor_tx_1
    120            void *ret_val;
    121            ATOMIC_BLOCK_RESTORE{   
   \                     ??BF_cursor_tx_0:
   \   00001C   A2AF         MOV       C,0xa8.7
   \   00001E   E4           CLR       A
   \   00001F   33           RLC       A
   \   000020   F5..         MOV       ?V0,A
   \   000022                ; Setup parameters for call to function __cli
   \   000022   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000025   E9           MOV       A,R1
   \   000026   F8           MOV       R0,A
   \                     ??BF_cursor_tx_2:
   \   000027   E8           MOV       A,R0
   \   000028   601A         JZ        ??BF_cursor_tx_3
    122              struct node *node = list_first_entry(&TX_LIST_HEAD, struct node, list);
   \   00002A   90....       MOV       DPTR,#TX_LIST_HEAD
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   24FE         ADD       A,#-0x2
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   34FF         ADDC      A,#-0x1
   \   000035   F9           MOV       R1,A
    123              ret_val =  node;
   \   000036   E8           MOV       A,R0
   \   000037   FE           MOV       R6,A
   \   000038   E9           MOV       A,R1
   \   000039   FF           MOV       R7,A
    124            }
   \   00003A   7800         MOV       R0,#0x0
   \   00003C   E5..         MOV       A,?V0
   \   00003E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000040   92AF         MOV       0xa8.7,C
   \   000042   80E3         SJMP      ??BF_cursor_tx_2
    125            return ret_val;
   \                     ??BF_cursor_tx_3:
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \                     ??BF_cursor_tx_1:
   \   000048   7F02         MOV       R7,#0x2
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00004D                REQUIRE _A_IEN0
    126          }  
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          void* BF_cursor_next(void* cursor){
   \                     BF_cursor_next:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    129            if (!cursor)
   \   00000E   E5..         MOV       A,?V6
   \   000010   45..         ORL       A,?V7
   \   000012   7007         JNZ       ??BF_cursor_next_0
    130              return NULL;
   \   000014   7A00         MOV       R2,#0x0
   \   000016   7B00         MOV       R3,#0x0
   \   000018   02....       LJMP      ??BF_cursor_next_1 & 0xFFFF
    131            void *ret_val;
    132            ATOMIC_BLOCK_RESTORE{  
   \                     ??BF_cursor_next_0:
   \   00001B   A2AF         MOV       C,0xa8.7
   \   00001D   E4           CLR       A
   \   00001E   33           RLC       A
   \   00001F   F5..         MOV       ?V2,A
   \   000021                ; Setup parameters for call to function __cli
   \   000021   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000024   E9           MOV       A,R1
   \   000025   F8           MOV       R0,A
   \                     ??BF_cursor_next_2:
   \   000026   E8           MOV       A,R0
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??BF_cursor_next_3 & 0xFFFF
    133              TRY{
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   7408         MOV       A,#0x8
   \   000034                REQUIRE ?V7
   \   000034   12....       LCALL     ?SETJMP_XDATA
   \   000037   8A..         MOV       ?V4,R2
   \   000039   8B..         MOV       ?V5,R3
   \   00003B   78..         MOV       R0,#?V4
   \   00003D   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for BF_cursor_next>_0`:
   \   000040   0000         DW        0
   \   000042   01           DB        1
   \   000043   ....         DW        ??BF_cursor_next_4
   \   000045   ....         DW        ??BF_cursor_next_5
   \   000047   ....         DW        ??BF_cursor_next_6
    134                struct node *node = (struct node*)(cursor);
   \                     ??BF_cursor_next_5:
   \   000049   AE..         MOV       R6,?V6
   \   00004B   AF..         MOV       R7,?V7
    135              
    136                // Убедимся что это не конец списков
    137                if (list_is_last(&node->list, &TX_LIST_HEAD))
   \   00004D                ; Setup parameters for call to function list_is_last
   \   00004D   7C..         MOV       R4,#TX_LIST_HEAD & 0xff
   \   00004F   7D..         MOV       R5,#(TX_LIST_HEAD >> 8) & 0xff
   \   000051   EE           MOV       A,R6
   \   000052   2402         ADD       A,#0x2
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??list_is_last::?relay`; Banked call to: list_is_last
   \   00005B   8A..         MOV       ?V4,R2
   \   00005D   8B..         MOV       ?V5,R3
   \   00005F   E5..         MOV       A,?V4
   \   000061   45..         ORL       A,?V5
   \   000063   600F         JZ        ??BF_cursor_next_7
    138                  THROW(1);
   \   000065   7A01         MOV       R2,#0x1
   \   000067   7B00         MOV       R3,#0x0
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   7408         MOV       A,#0x8
   \   000071                REQUIRE ?V7
   \   000071   02....       LJMP      ?LONGJMP_XDATA
    139             
    140                if (list_is_last(&node->list, &RX_LIST_HEAD))
   \                     ??BF_cursor_next_7:
   \   000074                ; Setup parameters for call to function list_is_last
   \   000074   7C..         MOV       R4,#RX_LIST_HEAD & 0xff
   \   000076   7D..         MOV       R5,#(RX_LIST_HEAD >> 8) & 0xff
   \   000078   EE           MOV       A,R6
   \   000079   2402         ADD       A,#0x2
   \   00007B   FA           MOV       R2,A
   \   00007C   E4           CLR       A
   \   00007D   3F           ADDC      A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   12....       LCALL     `??list_is_last::?relay`; Banked call to: list_is_last
   \   000082   8A..         MOV       ?V4,R2
   \   000084   8B..         MOV       ?V5,R3
   \   000086   E5..         MOV       A,?V4
   \   000088   45..         ORL       A,?V5
   \   00008A   600F         JZ        ??BF_cursor_next_8
    141                  THROW(1); 
   \   00008C   7A01         MOV       R2,#0x1
   \   00008E   7B00         MOV       R3,#0x0
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   7408         MOV       A,#0x8
   \   000098                REQUIRE ?V7
   \   000098   02....       LJMP      ?LONGJMP_XDATA
    142              
    143                struct node *next = list_next_entry(node, struct node, list);
   \                     ??BF_cursor_next_8:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   24FE         ADD       A,#-0x2
   \   0000A4   F8           MOV       R0,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   34FF         ADDC      A,#-0x1
   \   0000A9   F9           MOV       R1,A
    144                ret_val = next;
   \   0000AA   88..         MOV       ?V0,R0
   \   0000AC   89..         MOV       ?V1,R1
    145              }
    146              CATCH(1){
   \   0000AE   8006         SJMP      ??BF_cursor_next_4
    147                ret_val = NULL;
   \                     ??BF_cursor_next_6:
   \   0000B0   75..00       MOV       ?V0,#0x0
   \   0000B3   75..00       MOV       ?V1,#0x0
    148              } 
    149              ETRY;
    150            };
   \                     ??BF_cursor_next_4:
   \   0000B6   7800         MOV       R0,#0x0
   \   0000B8   E5..         MOV       A,?V2
   \   0000BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BC   92AF         MOV       0xa8.7,C
   \   0000BE   02....       LJMP      ??BF_cursor_next_2 & 0xFFFF
    151            return ret_val;
   \                     ??BF_cursor_next_3:
   \   0000C1   AA..         MOV       R2,?V0
   \   0000C3   AB..         MOV       R3,?V1
   \                     ??BF_cursor_next_1:
   \   0000C5   7431         MOV       A,#0x31
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CA   7F08         MOV       R7,#0x8
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000CF                REQUIRE _A_IEN0
    152          }
    153          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          bool BF_remove_tx(void *cursor){
   \                     BF_remove_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    155            if (!cursor)
   \   000009   E5..         MOV       A,?V0
   \   00000B   45..         ORL       A,?V1
   \   00000D   7003         JNZ       ??BF_remove_tx_0
    156              return false;
   \   00000F   C3           CLR       C
   \   000010   803E         SJMP      ??BF_remove_tx_1
    157            ATOMIC_BLOCK_RESTORE{
   \                     ??BF_remove_tx_0:
   \   000012   A2AF         MOV       C,0xa8.7
   \   000014   E4           CLR       A
   \   000015   33           RLC       A
   \   000016   F5..         MOV       ?V2,A
   \   000018                ; Setup parameters for call to function __cli
   \   000018   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   00001B   E9           MOV       A,R1
   \   00001C   F8           MOV       R0,A
   \                     ??BF_remove_tx_2:
   \   00001D   E8           MOV       A,R0
   \   00001E   602F         JZ        ??BF_remove_tx_3
    158              struct node *node = (struct node*)(cursor);    
   \   000020   AE..         MOV       R6,?V0
   \   000022   AF..         MOV       R7,?V1
    159              node->frame = NULL;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   7400         MOV       A,#0x0
   \   00002E   F0           MOVX      @DPTR,A
    160              list_del(&node->list);    
   \   00002F                ; Setup parameters for call to function list_del
   \   00002F   EE           MOV       A,R6
   \   000030   2402         ADD       A,#0x2
   \   000032   FA           MOV       R2,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??list_del::?relay`; Banked call to: list_del
    161              TX_BUFF_FRAME_COUNT--; 
   \   000039   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   24FF         ADD       A,#-0x1
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   34FF         ADDC      A,#-0x1
   \   000044   F0           MOVX      @DPTR,A
    162            };  
   \   000045   7800         MOV       R0,#0x0
   \   000047   E5..         MOV       A,?V2
   \   000049   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004B   92AF         MOV       0xa8.7,C
   \   00004D   80CE         SJMP      ??BF_remove_tx_2
    163            return true;
   \                     ??BF_remove_tx_3:
   \   00004F   D3           SETB      C
   \                     ??BF_remove_tx_1:
   \   000050   7F03         MOV       R7,#0x3
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
    164          }
    165          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          bool BF_remove_rx(void *cursor){
   \                     BF_remove_rx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    167            if (!cursor)
   \   000009   E5..         MOV       A,?V0
   \   00000B   45..         ORL       A,?V1
   \   00000D   7003         JNZ       ??BF_remove_rx_0
    168              return false;
   \   00000F   C3           CLR       C
   \   000010   803E         SJMP      ??BF_remove_rx_1
    169            ATOMIC_BLOCK_RESTORE{
   \                     ??BF_remove_rx_0:
   \   000012   A2AF         MOV       C,0xa8.7
   \   000014   E4           CLR       A
   \   000015   33           RLC       A
   \   000016   F5..         MOV       ?V2,A
   \   000018                ; Setup parameters for call to function __cli
   \   000018   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   00001B   E9           MOV       A,R1
   \   00001C   F8           MOV       R0,A
   \                     ??BF_remove_rx_2:
   \   00001D   E8           MOV       A,R0
   \   00001E   602F         JZ        ??BF_remove_rx_3
    170              struct node *node = (struct node*)(cursor);    
   \   000020   AE..         MOV       R6,?V0
   \   000022   AF..         MOV       R7,?V1
    171              node->frame = NULL;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   7400         MOV       A,#0x0
   \   00002E   F0           MOVX      @DPTR,A
    172              list_del(&node->list);    
   \   00002F                ; Setup parameters for call to function list_del
   \   00002F   EE           MOV       A,R6
   \   000030   2402         ADD       A,#0x2
   \   000032   FA           MOV       R2,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??list_del::?relay`; Banked call to: list_del
    173              RX_BUFF_FRAME_COUNT--; 
   \   000039   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   24FF         ADD       A,#-0x1
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   34FF         ADDC      A,#-0x1
   \   000044   F0           MOVX      @DPTR,A
    174            };  
   \   000045   7800         MOV       R0,#0x0
   \   000047   E5..         MOV       A,?V2
   \   000049   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004B   92AF         MOV       0xa8.7,C
   \   00004D   80CE         SJMP      ??BF_remove_rx_2
    175            return true;
   \                     ??BF_remove_rx_3:
   \   00004F   D3           SETB      C
   \                     ??BF_remove_rx_1:
   \   000050   7F03         MOV       R7,#0x3
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
    176          }
    177          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          struct frame* BF_content(void* cursor){
   \                     BF_content:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
    179            if (!cursor)
   \   000008   E8           MOV       A,R0
   \   000009   49           ORL       A,R1
   \   00000A   7006         JNZ       ??BF_content_0
    180              return NULL;
   \   00000C   7A00         MOV       R2,#0x0
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   8009         SJMP      ??BF_content_1
    181            struct node *node = (struct node*)(cursor);
   \                     ??BF_content_0:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
    182            return node->frame;
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FA           MOV       R2,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \                     ??BF_content_1:
   \   00001B   D083         POP       DPH
   \   00001D   D082         POP       DPL
   \   00001F   02....       LJMP      ?BRET
    183          }
E:\Neocore\Hardware\STACK_CORE_SRC\coder.c
      1          #include "coder.h"
      2          #include "ioCC2530.h"
      3          #include "string.h"
      4          #include "ustimer.h" // Для профилирования, Отладка
      5          #include "dma.h"
      6          #include "action_manager.h"
      7          #include "model.h"
      8          #include "mem_utils.h"
      9          
     10          static void HW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     11          module_s CODER_MODULE = {ALIAS(HW_Init)};
   \                     CODER_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for CODER_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     12          
     13          #define AES_START()  {ENCCS |= 0x01;} //!< Запуск выполнения команды  
     14          #define AES_SET_MODE(mode) {ENCCS &= ~0x70; ENCCS |= mode;} //!< Установка режима
     15          #define AES_SET_OPERATION(op) {ENCCS = (ENCCS & ~0x07) | op;} 
     16          #define AES_RDY() (ENCCS & 8) //!< Состояние модуля
     17          
     18          #define BV(n)                   (1 << (n))
     19          #define MIC_2_MICLEN(m)         (BV((m&3)+1) & ~3)
     20          
     21          // Режимы шифрования
     22          #define AES_MODE_CBC            0x00
     23          #define AES_MODE_CFB            0x10
     24          #define AES_MODE_OFB            0x20
     25          #define AES_MODE_CTR            0x30
     26          #define AES_MODE_ECB            0x40
     27          #define AES_MODE_CBCMAC         0x50
     28          
     29          // Операции 
     30          #define AES_ENCRYPT             0x00
     31          #define AES_DECRYPT             0x02
     32          #define AES_LOAD_KEY            0x04
     33          #define AES_LOAD_IV             0x06
     34          
     35          #define ENC_DW 29 // DMA AES тригер запрос загрузки
     36          #define ENC_UP 30 // DMA AES тригер запрос выгрузки
     37          
     38          #define STREAM_ENC_MODE     AES_MODE_OFB //!< Метод шифрования потока данных
     39          
     40          
     41          // Приватные функции
     42          static inline uint8_t generateAuthData(uint8_t *src, uint8_t *nonce, uint8_t c,
     43                                                 uint8_t f, uint8_t lm);
     44          static void CBCMAC_buf_encrypt(uint8_t len, uint8_t *key, uint8_t *mac);
     45          
     46          /**
     47          @brief Локальный буфер для работы режима CCM
     48          @detail 128 длина сообщения. 18 длинна блока B0 и строки состояния.
     49           16 длина дополнения нулями
     50          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          static uint8_t buf[128+18+16]; 
   \                     ??buf:
   \   000000                DS 162
   \   0000A2                REQUIRE __INIT_XDATA_Z
     52          
     53          
     54          typedef struct //!< Структура блока B0 для режима CCM
     55          {
     56            struct 
     57            {
     58              uint8_t L:3;
     59              uint8_t M:3;
     60              uint8_t A_Data:1;
     61            } flag;
     62            uint16_t nonce[9];
     63            uint8_t L_M[6];
     64          } __attribute__((packed)) B0_s;
     65          
     66          typedef struct //!< Структура блока A0 для режима CCM
     67          {
     68            struct 
     69            {
     70              uint8_t L:3;
     71            } flag;
     72            uint8_t nonce[11];
     73            uint8_t ctr;
     74          } __attribute__((packed)) A0_s;
     75          
     76          
     77          
     78          /**
     79          @brief Иницилизация модуля
     80          @detail Модуль использует DMA каналы 0 и 1
     81          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     82          void HW_Init(void)
   \                     ??HW_Init_1:
     83          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 84
   \   000004   74AC         MOV       A,#-0x54
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     84            char STREAM_KEY[16] = DEFAULT_STREAM_KEY;
   \   000009   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,`
   \   00000C   7444         MOV       A,#0x44
   \   00000E   12....       LCALL     ?XSTACK_DISP102_8
   \   000011   7410         MOV       A,#0x10
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     85            char STREAM_IV[16] = DEFAULT_STREAM_IV;
   \   000016   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_1`
   \   000019   7434         MOV       A,#0x34
   \   00001B   12....       LCALL     ?XSTACK_DISP102_8
   \   00001E   7410         MOV       A,#0x10
   \   000020   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     86            char CCM_KEY[16] = DEFAULT_CCM_KEY;
   \   000023   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_2`
   \   000026   7424         MOV       A,#0x24
   \   000028   12....       LCALL     ?XSTACK_DISP102_8
   \   00002B   7410         MOV       A,#0x10
   \   00002D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     87            char CCM_IV[16] = DEFAULT_CCM_IV;
   \   000030   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_3`
   \   000033   7414         MOV       A,#0x14
   \   000035   12....       LCALL     ?XSTACK_DISP102_8
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     88            MEMCPY(MODEL.AES.STREAM_KEY, STREAM_KEY, 16);
   \   00003D   90....       MOV       DPTR,#`?<Constant {(char *)MODEL.AES.STREAM_KEY, (cha`
   \   000040   740F         MOV       A,#0xf
   \   000042   12....       LCALL     ?XSTACK_DISP102_8
   \   000045   7405         MOV       A,#0x5
   \   000047   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00004A   7444         MOV       A,#0x44
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   7411         MOV       A,#0x11
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E8           MOV       A,R0
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   E9           MOV       A,R1
   \   000058   F0           MOVX      @DPTR,A
   \   000059                ; Setup parameters for call to function MEM_memcpy
   \   000059   740F         MOV       A,#0xf
   \   00005B   12....       LCALL     ?XSTACK_DISP101_8
   \   00005E   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     89            MEMCPY(MODEL.AES.STREAM_IV, STREAM_IV, 16);
   \   000061   90....       MOV       DPTR,#`?<Constant {(char *)MODEL.AES.STREAM_IV, (char`
   \   000064   740A         MOV       A,#0xa
   \   000066   12....       LCALL     ?XSTACK_DISP102_8
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00006E   7434         MOV       A,#0x34
   \   000070   12....       LCALL     ?XSTACK_DISP100_8
   \   000073   740C         MOV       A,#0xc
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E8           MOV       A,R0
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E9           MOV       A,R1
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D                ; Setup parameters for call to function MEM_memcpy
   \   00007D   740A         MOV       A,#0xa
   \   00007F   12....       LCALL     ?XSTACK_DISP101_8
   \   000082   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     90            MEMCPY(MODEL.AES.CCM_KEY, CCM_KEY, 16);
   \   000085   90....       MOV       DPTR,#`?<Constant {(char *)MODEL.AES.CCM_KEY, (char *`
   \   000088   7405         MOV       A,#0x5
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   7405         MOV       A,#0x5
   \   00008F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000092   7424         MOV       A,#0x24
   \   000094   12....       LCALL     ?XSTACK_DISP100_8
   \   000097   7407         MOV       A,#0x7
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   E8           MOV       A,R0
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   E9           MOV       A,R1
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1                ; Setup parameters for call to function MEM_memcpy
   \   0000A1   7405         MOV       A,#0x5
   \   0000A3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     91            MEMCPY(MODEL.AES.CCM_IV, CCM_IV, 16);
   \   0000A9   90....       MOV       DPTR,#`?<Constant {(char *)MODEL.AES.CCM_IV, (char *)`
   \   0000AC   AC..         MOV       R4,?XSP + 0
   \   0000AE   AD..         MOV       R5,?XSP + 1
   \   0000B0   7405         MOV       A,#0x5
   \   0000B2   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000B5   7414         MOV       A,#0x14
   \   0000B7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   E8           MOV       A,R0
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E9           MOV       A,R1
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4                ; Setup parameters for call to function MEM_memcpy
   \   0000C4   AA..         MOV       R2,?XSP + 0
   \   0000C6   AB..         MOV       R3,?XSP + 1
   \   0000C8   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     92            
     93            //DMA_AES_s DMA_CH[0]; //!< DMA на запись будет DMA[0]
     94            //DMA_AES_s DMA_CH[1]; //!< DMA на чтение DMA_CH[1]
     95            
     96            ST_DEF(DMA_CH[0], DSTADDRH, 0x70); // Пишем данные XENCDI = 0xB1 
   \   0000CB   90....       MOV       DPTR,#DMA_CH + 2
   \   0000CE   7470         MOV       A,#0x70
   \   0000D0   F0           MOVX      @DPTR,A
     97            ST_DEF(DMA_CH[0], DSTADDRL, 0xB1); //  
   \   0000D1   90....       MOV       DPTR,#DMA_CH + 3
   \   0000D4   74B1         MOV       A,#-0x4f
   \   0000D6   F0           MOVX      @DPTR,A
     98            ST_DEF(DMA_CH[0], PRIORITY, 0x00); // Низкий приоритет
   \   0000D7   90....       MOV       DPTR,#DMA_CH + 7
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   54FC         ANL       A,#0xfc
   \   0000DD   F0           MOVX      @DPTR,A
     99            ST_DEF(DMA_CH[0], M8, 0x00); // Используем 8 бит для счетика длинны
   \   0000DE   90....       MOV       DPTR,#DMA_CH + 7
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   C2E2         CLR       0xE0 /* A   */.2
   \   0000E4   F0           MOVX      @DPTR,A
    100            ST_DEF(DMA_CH[0], IRQMASK, 0x00); // Запрещаем генерировать перывания
   \   0000E5   90....       MOV       DPTR,#DMA_CH + 7
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C2E3         CLR       0xE0 /* A   */.3
   \   0000EB   F0           MOVX      @DPTR,A
    101            ST_DEF(DMA_CH[0], DESTINC, 0x00); // Не увеличиваем адресс назначения
   \   0000EC   90....       MOV       DPTR,#DMA_CH + 7
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   54CF         ANL       A,#0xcf
   \   0000F2   F0           MOVX      @DPTR,A
    102            ST_DEF(DMA_CH[0], SRCINC, 0x01); // Увеличиваем адресс источника
   \   0000F3   90....       MOV       DPTR,#DMA_CH + 7
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   543F         ANL       A,#0x3f
   \   0000F9   4440         ORL       A,#0x40
   \   0000FB   90....       MOV       DPTR,#DMA_CH + 7
   \   0000FE   F0           MOVX      @DPTR,A
    103            ST_DEF(DMA_CH[0], TRIG, ENC_DW); // Тригер по загрузке
   \   0000FF   90....       MOV       DPTR,#DMA_CH + 6
   \   000102   E0           MOVX      A,@DPTR
   \   000103   54E0         ANL       A,#0xe0
   \   000105   441D         ORL       A,#0x1d
   \   000107   90....       MOV       DPTR,#DMA_CH + 6
   \   00010A   F0           MOVX      @DPTR,A
    104            ST_DEF(DMA_CH[0], WORDSIZE, 0x00); // Копируем по 1 байту
   \   00010B   90....       MOV       DPTR,#DMA_CH + 6
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   C2E7         CLR       0xE0 /* A   */.7
   \   000111   F0           MOVX      @DPTR,A
    105            ST_DEF(DMA_CH[0], TMODE, 0x01); //  Блочное копирование по тригеру
   \   000112   90....       MOV       DPTR,#DMA_CH + 6
   \   000115   E0           MOVX      A,@DPTR
   \   000116   549F         ANL       A,#0x9f
   \   000118   4420         ORL       A,#0x20
   \   00011A   90....       MOV       DPTR,#DMA_CH + 6
   \   00011D   F0           MOVX      @DPTR,A
    106            ST_DEF(DMA_CH[0], VLEN, 0x00); //  Количество байт определяет поле LEN  
   \   00011E   90....       MOV       DPTR,#DMA_CH + 4
   \   000121   E0           MOVX      A,@DPTR
   \   000122   541F         ANL       A,#0x1f
   \   000124   F0           MOVX      @DPTR,A
    107            ST_DEF(DMA_CH[0], LENH, 0x00); 
   \   000125   90....       MOV       DPTR,#DMA_CH + 4
   \   000128   E0           MOVX      A,@DPTR
   \   000129   54E0         ANL       A,#0xe0
   \   00012B   F0           MOVX      @DPTR,A
    108            
    109            ST_DEF(DMA_CH[1], SRCADDRH, 0x70); // Читаем данные из X_ENCDO  
   \   00012C   90....       MOV       DPTR,#DMA_CH + 8
   \   00012F   7470         MOV       A,#0x70
   \   000131   F0           MOVX      @DPTR,A
    110            ST_DEF(DMA_CH[1], SRCADDRL, 0xB2);  
   \   000132   90....       MOV       DPTR,#DMA_CH + 9
   \   000135   74B2         MOV       A,#-0x4e
   \   000137   F0           MOVX      @DPTR,A
    111            ST_DEF(DMA_CH[1], PRIORITY, 0x00); // Низкий приоритет
   \   000138   90....       MOV       DPTR,#DMA_CH + 15
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   54FC         ANL       A,#0xfc
   \   00013E   F0           MOVX      @DPTR,A
    112            ST_DEF(DMA_CH[1], M8, 0x00); // Используем 8 бит для счетика длинны
   \   00013F   90....       MOV       DPTR,#DMA_CH + 15
   \   000142   E0           MOVX      A,@DPTR
   \   000143   C2E2         CLR       0xE0 /* A   */.2
   \   000145   F0           MOVX      @DPTR,A
    113            ST_DEF(DMA_CH[1], IRQMASK, 0x00); // Запрещаем генерировать перывания
   \   000146   90....       MOV       DPTR,#DMA_CH + 15
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   C2E3         CLR       0xE0 /* A   */.3
   \   00014C   F0           MOVX      @DPTR,A
    114            ST_DEF(DMA_CH[1], DESTINC, 0x01); // Увеличиваем адресс назначения
   \   00014D   90....       MOV       DPTR,#DMA_CH + 15
   \   000150   E0           MOVX      A,@DPTR
   \   000151   54CF         ANL       A,#0xcf
   \   000153   4410         ORL       A,#0x10
   \   000155   90....       MOV       DPTR,#DMA_CH + 15
   \   000158   F0           MOVX      @DPTR,A
    115            ST_DEF(DMA_CH[1], SRCINC, 0x00); // Не увеличиваем адресс источника
   \   000159   90....       MOV       DPTR,#DMA_CH + 15
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   543F         ANL       A,#0x3f
   \   00015F   F0           MOVX      @DPTR,A
    116            ST_DEF(DMA_CH[1], TRIG, ENC_UP); // Тригер по выгрузке
   \   000160   90....       MOV       DPTR,#DMA_CH + 14
   \   000163   E0           MOVX      A,@DPTR
   \   000164   54E0         ANL       A,#0xe0
   \   000166   441E         ORL       A,#0x1e
   \   000168   90....       MOV       DPTR,#DMA_CH + 14
   \   00016B   F0           MOVX      @DPTR,A
    117            ST_DEF(DMA_CH[1], WORDSIZE, 0x00); // Копируем по 1 байту
   \   00016C   90....       MOV       DPTR,#DMA_CH + 14
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   C2E7         CLR       0xE0 /* A   */.7
   \   000172   F0           MOVX      @DPTR,A
    118            ST_DEF(DMA_CH[1], TMODE, 0x01); //  Блочное копирование по тригеру
   \   000173   90....       MOV       DPTR,#DMA_CH + 14
   \   000176   E0           MOVX      A,@DPTR
   \   000177   549F         ANL       A,#0x9f
   \   000179   4420         ORL       A,#0x20
   \   00017B   90....       MOV       DPTR,#DMA_CH + 14
   \   00017E   F0           MOVX      @DPTR,A
    119            ST_DEF(DMA_CH[1], VLEN, 0x00); //  Количество байт определяет поле LEN  
   \   00017F   90....       MOV       DPTR,#DMA_CH + 12
   \   000182   E0           MOVX      A,@DPTR
   \   000183   541F         ANL       A,#0x1f
   \   000185   F0           MOVX      @DPTR,A
    120            ST_DEF(DMA_CH[1], LENH, 0x00); 
   \   000186   90....       MOV       DPTR,#DMA_CH + 12
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   54E0         ANL       A,#0xe0
   \   00018C   F0           MOVX      @DPTR,A
    121          }
   \   00018D   7454         MOV       A,#0x54
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   D083         POP       DPH
   \   000194   D082         POP       DPL
   \   000196   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)MODEL.AES.STREAM_KEY, (cha`:
   \   000000   ....         DW MODEL + 13H
   \   000002   0000         DW 0H
   \   000004   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)MODEL.AES.STREAM_IV, (char`:
   \   000000   ....         DW MODEL + 23H
   \   000002   0000         DW 0H
   \   000004   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)MODEL.AES.CCM_KEY, (char *`:
   \   000000   ....         DW MODEL + 33H
   \   000002   0000         DW 0H
   \   000004   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)MODEL.AES.CCM_IV, (char *)`:
   \   000000   ....         DW MODEL + 43H
   \   000002   0000         DW 0H
   \   000004   10           DB 16
    122          
    123          /**
    124          @brief Шифрует/дешифрует поток данных во время радиопередачи. Без проверки MIC
    125          @param[in] enc_mode Режим работы процедуры. true - шифрование.
    126          @param[in] src Указатель на данные подлежащии шифрованию
    127          @param[in] dst Указтель куда будут помещены зашифрованные данные
    128          @param[in] key Указатье на ключ. 16 байт
    129          @param[in] iv  Указатель на вектор иницилизации. 16 байт 
    130          @param[in] len Длинна данных
    131          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          void AES_StreamCoder(bool enc_mode, char *src, char *dst, uint8_t len)
   \                     AES_StreamCoder:
    133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7406         MOV       A,#0x6
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A2F0         MOV       C,B.0
   \   000020   92..         MOV       ?VB.0,C
   \   000022   89..         MOV       ?V6,R1
    134            // Установим метод кодироваения
    135            AES_SET_MODE(STREAM_ENC_MODE);
   \   000024   53B38F       ANL       0xb3,#0x8f
   \   000027   43B320       ORL       0xb3,#0x20
    136            uint8_t *key = (uint8_t*)MODEL.AES.STREAM_KEY;  
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74..         MOV       A,#(MODEL + 19) & 0xff
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#((MODEL + 19) >> 8) & 0xff
   \   000035   F0           MOVX      @DPTR,A
    137            uint8_t *iv = (uint8_t*)MODEL.AES.STREAM_IV; 
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   74..         MOV       A,#(MODEL + 35) & 0xff
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   74..         MOV       A,#((MODEL + 35) >> 8) & 0xff
   \   000041   F0           MOVX      @DPTR,A
    138            // Загружаем ключ
    139            AES_SET_OPERATION(AES_LOAD_KEY);
   \   000042   E5B3         MOV       A,0xb3
   \   000044   54F8         ANL       A,#0xf8
   \   000046   4404         ORL       A,#0x4
   \   000048   F5B3         MOV       0xb3,A
    140            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(key));
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   E8           MOV       A,R0
   \   000055   90....       MOV       DPTR,#DMA_CH + 1
   \   000058   F0           MOVX      @DPTR,A
    141            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(key));
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   E4           CLR       A
   \   000064   C9           XCH       A,R1
   \   000065   F8           MOV       R0,A
   \   000066   E8           MOV       A,R0
   \   000067   90....       MOV       DPTR,#DMA_CH
   \   00006A   F0           MOVX      @DPTR,A
    142            ST_DEF(DMA_CH[0], LENL, 16);
   \   00006B   90....       MOV       DPTR,#DMA_CH + 5
   \   00006E   7410         MOV       A,#0x10
   \   000070   F0           MOVX      @DPTR,A
    143            DMAARM |= 0x01;
   \   000071   43D601       ORL       0xd6,#0x1
    144            while(!AES_RDY());
   \                     ??AES_StreamCoder_0:
   \   000074   E5B3         MOV       A,0xb3
   \   000076   A2E3         MOV       C,0xE0 /* A   */.3
   \   000078   50FA         JNC       ??AES_StreamCoder_0
    145            AES_START();
   \   00007A   43B301       ORL       0xb3,#0x1
    146            while (DMAARM&0x01);
   \                     ??AES_StreamCoder_1:
   \   00007D   E5D6         MOV       A,0xd6
   \   00007F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000081   40FA         JC        ??AES_StreamCoder_1
    147          
    148            // Загружаем IV
    149            AES_SET_OPERATION(AES_LOAD_IV);
   \   000083   E5B3         MOV       A,0xb3
   \   000085   54F8         ANL       A,#0xf8
   \   000087   4406         ORL       A,#0x6
   \   000089   F5B3         MOV       0xb3,A
    150            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(iv));
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F8           MOV       R0,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F9           MOV       R1,A
   \   000095   E8           MOV       A,R0
   \   000096   90....       MOV       DPTR,#DMA_CH + 1
   \   000099   F0           MOVX      @DPTR,A
    151            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(iv));
   \   00009A   7402         MOV       A,#0x2
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F8           MOV       R0,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F9           MOV       R1,A
   \   0000A4   E4           CLR       A
   \   0000A5   C9           XCH       A,R1
   \   0000A6   F8           MOV       R0,A
   \   0000A7   E8           MOV       A,R0
   \   0000A8   90....       MOV       DPTR,#DMA_CH
   \   0000AB   F0           MOVX      @DPTR,A
    152            ST_DEF(DMA_CH[0], LENL, 16);
   \   0000AC   90....       MOV       DPTR,#DMA_CH + 5
   \   0000AF   7410         MOV       A,#0x10
   \   0000B1   F0           MOVX      @DPTR,A
    153            DMAARM |= 0x01;
   \   0000B2   43D601       ORL       0xd6,#0x1
    154            while(!AES_RDY());
   \                     ??AES_StreamCoder_2:
   \   0000B5   E5B3         MOV       A,0xb3
   \   0000B7   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000B9   50FA         JNC       ??AES_StreamCoder_2
    155            AES_START();
   \   0000BB   43B301       ORL       0xb3,#0x1
    156            while (DMAARM&0x01);
   \                     ??AES_StreamCoder_3:
   \   0000BE   E5D6         MOV       A,0xd6
   \   0000C0   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000C2   40FA         JC        ??AES_StreamCoder_3
    157          
    158            // Установим необходимую операцию AES
    159            if (enc_mode) 
   \   0000C4   A2..         MOV       C,?VB.0
   \   0000C6   5005         JNC       ??AES_StreamCoder_4
    160              AES_SET_OPERATION(AES_ENCRYPT)
   \   0000C8   53B3F8       ANL       0xb3,#0xf8
   \   0000CB   8008         SJMP      ??AES_StreamCoder_5
    161            else 
    162              AES_SET_OPERATION(AES_DECRYPT)
   \                     ??AES_StreamCoder_4:
   \   0000CD   E5B3         MOV       A,0xb3
   \   0000CF   54F8         ANL       A,#0xf8
   \   0000D1   4402         ORL       A,#0x2
   \   0000D3   F5B3         MOV       0xb3,A
    163            
    164            switch(STREAM_ENC_MODE) 
    165            {
    166            case AES_MODE_ECB: // ECB, CBC не реализованы
    167            case AES_MODE_CBC:
    168              break;
    169            case AES_MODE_CFB:
    170            case AES_MODE_OFB:
    171            case AES_MODE_CTR:
    172              {
    173                // Загрузка блоками по 128 бит с разделением на под-блоки по 32 бита
    174                uint8_t nbrBlocks = len / 16; // Количество целых блоков по 128 бит
   \                     ??AES_StreamCoder_5:
   \   0000D5   75F010       MOV       B,#0x10
   \   0000D8   E5..         MOV       A,?V6
   \   0000DA   84           DIV       AB
   \   0000DB   F5..         MOV       ?V5,A
    175                uint8_t ptr, sub_ptr; // Смещение
    176                char *download, *upload;
    177                
    178                // Для этих типов шифрования длина блоков по 4 байта
    179                ST_DEF(DMA_CH[0], LENL, 4);
   \   0000DD   90....       MOV       DPTR,#DMA_CH + 5
   \   0000E0   7404         MOV       A,#0x4
   \   0000E2   F0           MOVX      @DPTR,A
    180                ST_DEF(DMA_CH[1], LENL, 4);
   \   0000E3   90....       MOV       DPTR,#DMA_CH + 13
   \   0000E6   7404         MOV       A,#0x4
   \   0000E8   F0           MOVX      @DPTR,A
    181                
    182                // Шифруем все целые блоки
    183                for (uint8_t block = 0; block < nbrBlocks; block ++)
   \   0000E9   7A00         MOV       R2,#0x0
   \                     ??AES_StreamCoder_6:
   \   0000EB   EA           MOV       A,R2
   \   0000EC   C3           CLR       C
   \   0000ED   95..         SUBB      A,?V5
   \   0000EF   4003         JC        $+5
   \   0000F1   02....       LJMP      ??AES_StreamCoder_7 & 0xFFFF
    184                {
    185                  ptr = 16 * block;
   \   0000F4   75F010       MOV       B,#0x10
   \   0000F7   EA           MOV       A,R2
   \   0000F8   A4           MUL       AB
   \   0000F9   FE           MOV       R6,A
    186                  while(!AES_RDY());
   \                     ??AES_StreamCoder_8:
   \   0000FA   E5B3         MOV       A,0xb3
   \   0000FC   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000FE   50FA         JNC       ??AES_StreamCoder_8
    187                  AES_START();
   \   000100   43B301       ORL       0xb3,#0x1
    188                  for (uint8_t j = 0; j < 4; j++)
   \   000103   7B00         MOV       R3,#0x0
   \                     ??AES_StreamCoder_9:
   \   000105   EB           MOV       A,R3
   \   000106   C3           CLR       C
   \   000107   9404         SUBB      A,#0x4
   \   000109   507A         JNC       ??AES_StreamCoder_10
    189                  {
    190                    sub_ptr = ptr + 4*j;
   \   00010B   75F004       MOV       B,#0x4
   \   00010E   EB           MOV       A,R3
   \   00010F   A4           MUL       AB
   \   000110   2E           ADD       A,R6
   \   000111   FF           MOV       R7,A
    191                    download = &src[sub_ptr];
   \   000112   EF           MOV       A,R7
   \   000113   F8           MOV       R0,A
   \   000114   7900         MOV       R1,#0x0
   \   000116   7408         MOV       A,#0x8
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   28           ADD       A,R0
   \   00011D   F8           MOV       R0,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   39           ADDC      A,R1
   \   000121   F9           MOV       R1,A
   \   000122   88..         MOV       ?V0,R0
   \   000124   89..         MOV       ?V1,R1
    192                    upload = &dst[sub_ptr];
   \   000126   EF           MOV       A,R7
   \   000127   F8           MOV       R0,A
   \   000128   7900         MOV       R1,#0x0
   \   00012A   7406         MOV       A,#0x6
   \   00012C   12....       LCALL     ?XSTACK_DISP0_8
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   28           ADD       A,R0
   \   000131   F8           MOV       R0,A
   \   000132   A3           INC       DPTR
   \   000133   E0           MOVX      A,@DPTR
   \   000134   39           ADDC      A,R1
   \   000135   F9           MOV       R1,A
   \   000136   85..82       MOV       DPL,?XSP + 0
   \   000139   85..83       MOV       DPH,?XSP + 1
   \   00013C   E8           MOV       A,R0
   \   00013D   F0           MOVX      @DPTR,A
   \   00013E   A3           INC       DPTR
   \   00013F   E9           MOV       A,R1
   \   000140   F0           MOVX      @DPTR,A
    193                    // Указываем адресс DMA откуда читать данные
    194                    ST_DEF(DMA_CH[0], SRCADDRL, LADDR(download));
   \   000141   E5..         MOV       A,?V0
   \   000143   90....       MOV       DPTR,#DMA_CH + 1
   \   000146   F0           MOVX      @DPTR,A
    195                    ST_DEF(DMA_CH[0], SRCADDRH, HADDR(download));
   \   000147   A8..         MOV       R0,?V0
   \   000149   A9..         MOV       R1,?V1
   \   00014B   E4           CLR       A
   \   00014C   C9           XCH       A,R1
   \   00014D   F8           MOV       R0,A
   \   00014E   E8           MOV       A,R0
   \   00014F   90....       MOV       DPTR,#DMA_CH
   \   000152   F0           MOVX      @DPTR,A
    196                    // Указываем адрес DMA куда записывать данные          
    197                    ST_DEF(DMA_CH[1], DSTADDRL, LADDR(upload));
   \   000153   85..82       MOV       DPL,?XSP + 0
   \   000156   85..83       MOV       DPH,?XSP + 1
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F8           MOV       R0,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F9           MOV       R1,A
   \   00015E   E8           MOV       A,R0
   \   00015F   90....       MOV       DPTR,#DMA_CH + 11
   \   000162   F0           MOVX      @DPTR,A
    198                    ST_DEF(DMA_CH[1], DSTADDRH, HADDR(upload));
   \   000163   85..82       MOV       DPL,?XSP + 0
   \   000166   85..83       MOV       DPH,?XSP + 1
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F8           MOV       R0,A
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F9           MOV       R1,A
   \   00016E   E4           CLR       A
   \   00016F   C9           XCH       A,R1
   \   000170   F8           MOV       R0,A
   \   000171   E8           MOV       A,R0
   \   000172   90....       MOV       DPTR,#DMA_CH + 10
   \   000175   F0           MOVX      @DPTR,A
    199                    // Активируем DMA
    200                    DMAARM |= 0x03;  
   \   000176   43D603       ORL       0xd6,#0x3
    201                    DMAREQ |= 0x01;
   \   000179   43D701       ORL       0xd7,#0x1
    202                    while (DMAARM&0x03);          
   \                     ??AES_StreamCoder_11:
   \   00017C   E5D6         MOV       A,0xd6
   \   00017E   5403         ANL       A,#0x3
   \   000180   70FA         JNZ       ??AES_StreamCoder_11
    203                  }
   \   000182   0B           INC       R3
   \   000183   8080         SJMP      ??AES_StreamCoder_9
    204                }     
   \                     ??AES_StreamCoder_10:
   \   000185   0A           INC       R2
   \   000186   02....       LJMP      ??AES_StreamCoder_6 & 0xFFFF
    205                // Шифруем последний блок
    206                uint8_t block_len = len % 16; // Размер последнего блока
   \                     ??AES_StreamCoder_7:
   \   000189   E5..         MOV       A,?V6
   \   00018B   75F010       MOV       B,#0x10
   \   00018E   84           DIV       AB
   \   00018F   E5F0         MOV       A,B
   \   000191   F5..         MOV       ?V4,A
    207                
    208                // Завершаем работу если блок пустой
    209                if (!block_len)
   \   000193   E5..         MOV       A,?V4
   \   000195   7003         JNZ       $+5
   \   000197   02....       LJMP      ??AES_StreamCoder_12 & 0xFFFF
    210                  return;
    211                
    212                char padding_block[16]; // Блок заполненый нулями
    213                ptr = 16*nbrBlocks; // Смещение на первый байт последнего блока в src
   \   00019A   75F010       MOV       B,#0x10
   \   00019D   E5..         MOV       A,?V5
   \   00019F   A4           MUL       AB
   \   0001A0   FE           MOV       R6,A
    214                memset(padding_block, 0x00, sizeof(padding_block)); // Заполняем нулями
   \   0001A1                ; Setup parameters for call to function memset
   \   0001A1   75..10       MOV       ?V2,#0x10
   \   0001A4   75..00       MOV       ?V3,#0x0
   \   0001A7   78..         MOV       R0,#?V2
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AC   7C00         MOV       R4,#0x0
   \   0001AE   7D00         MOV       R5,#0x0
   \   0001B0   740C         MOV       A,#0xc
   \   0001B2   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B5   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   0001B8   7402         MOV       A,#0x2
   \   0001BA   12....       LCALL     ?DEALLOC_XSTACK8
    215                memcpy(padding_block, &src[ptr], block_len); // Копируем данные
   \   0001BD                ; Setup parameters for call to function memcpy
   \   0001BD   E5..         MOV       A,?V4
   \   0001BF   F5..         MOV       ?V2,A
   \   0001C1   75..00       MOV       ?V3,#0x0
   \   0001C4   78..         MOV       R0,#?V2
   \   0001C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C9   EE           MOV       A,R6
   \   0001CA   F8           MOV       R0,A
   \   0001CB   7900         MOV       R1,#0x0
   \   0001CD   740A         MOV       A,#0xa
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   28           ADD       A,R0
   \   0001D4   FC           MOV       R4,A
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   39           ADDC      A,R1
   \   0001D8   FD           MOV       R5,A
   \   0001D9   740C         MOV       A,#0xc
   \   0001DB   12....       LCALL     ?XSTACK_DISP101_8
   \   0001DE   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0001E1   7402         MOV       A,#0x2
   \   0001E3   12....       LCALL     ?DEALLOC_XSTACK8
    216                
    217                while(!AES_RDY());
   \                     ??AES_StreamCoder_13:
   \   0001E6   E5B3         MOV       A,0xb3
   \   0001E8   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001EA   50FA         JNC       ??AES_StreamCoder_13
    218                AES_START();
   \   0001EC   43B301       ORL       0xb3,#0x1
    219                for (uint8_t j = 0; j < 4; j++)
   \   0001EF   7A00         MOV       R2,#0x0
   \                     ??AES_StreamCoder_14:
   \   0001F1   EA           MOV       A,R2
   \   0001F2   C3           CLR       C
   \   0001F3   9404         SUBB      A,#0x4
   \   0001F5   504E         JNC       ??AES_StreamCoder_15
    220                  {
    221                    sub_ptr = 4*j;
   \   0001F7   75F004       MOV       B,#0x4
   \   0001FA   EA           MOV       A,R2
   \   0001FB   A4           MUL       AB
   \   0001FC   FF           MOV       R7,A
    222                    download = &padding_block[sub_ptr];
   \   0001FD   EF           MOV       A,R7
   \   0001FE   F8           MOV       R0,A
   \   0001FF   7900         MOV       R1,#0x0
   \   000201   740A         MOV       A,#0xa
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   E582         MOV       A,DPL
   \   000208   28           ADD       A,R0
   \   000209   F8           MOV       R0,A
   \   00020A   E583         MOV       A,DPH
   \   00020C   39           ADDC      A,R1
   \   00020D   F9           MOV       R1,A
   \   00020E   88..         MOV       ?V0,R0
   \   000210   89..         MOV       ?V1,R1
    223                    // Указываем адресс DMA откуда читать данные
    224                    ST_DEF(DMA_CH[0], SRCADDRL, LADDR(download));
   \   000212   E5..         MOV       A,?V0
   \   000214   90....       MOV       DPTR,#DMA_CH + 1
   \   000217   F0           MOVX      @DPTR,A
    225                    ST_DEF(DMA_CH[0], SRCADDRH, HADDR(download));
   \   000218   A8..         MOV       R0,?V0
   \   00021A   A9..         MOV       R1,?V1
   \   00021C   E4           CLR       A
   \   00021D   C9           XCH       A,R1
   \   00021E   F8           MOV       R0,A
   \   00021F   E8           MOV       A,R0
   \   000220   90....       MOV       DPTR,#DMA_CH
   \   000223   F0           MOVX      @DPTR,A
    226                    // Указываем аддрес DMA куда записывать данные          
    227                    ST_DEF(DMA_CH[1], DSTADDRL, LADDR(download));
   \   000224   E5..         MOV       A,?V0
   \   000226   90....       MOV       DPTR,#DMA_CH + 11
   \   000229   F0           MOVX      @DPTR,A
    228                    ST_DEF(DMA_CH[1], DSTADDRH, HADDR(download));
   \   00022A   A8..         MOV       R0,?V0
   \   00022C   A9..         MOV       R1,?V1
   \   00022E   E4           CLR       A
   \   00022F   C9           XCH       A,R1
   \   000230   F8           MOV       R0,A
   \   000231   E8           MOV       A,R0
   \   000232   90....       MOV       DPTR,#DMA_CH + 10
   \   000235   F0           MOVX      @DPTR,A
    229                    // Активируем DMA
    230                    DMAARM |= 0x03;  
   \   000236   43D603       ORL       0xd6,#0x3
    231                    DMAREQ |= 0x01;
   \   000239   43D701       ORL       0xd7,#0x1
    232                    while (DMAARM&0x03);
   \                     ??AES_StreamCoder_16:
   \   00023C   E5D6         MOV       A,0xd6
   \   00023E   5403         ANL       A,#0x3
   \   000240   70FA         JNZ       ??AES_StreamCoder_16
    233                  }
   \   000242   0A           INC       R2
   \   000243   80AC         SJMP      ??AES_StreamCoder_14
    234                memcpy(&dst[ptr], padding_block, block_len); // Копируем в src
   \                     ??AES_StreamCoder_15:
   \   000245                ; Setup parameters for call to function memcpy
   \   000245   E5..         MOV       A,?V4
   \   000247   F5..         MOV       ?V2,A
   \   000249   75..00       MOV       ?V3,#0x0
   \   00024C   78..         MOV       R0,#?V2
   \   00024E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000251   740C         MOV       A,#0xc
   \   000253   12....       LCALL     ?XSTACK_DISP102_8
   \   000256   EE           MOV       A,R6
   \   000257   F8           MOV       R0,A
   \   000258   7900         MOV       R1,#0x0
   \   00025A   7408         MOV       A,#0x8
   \   00025C   12....       LCALL     ?XSTACK_DISP0_8
   \   00025F   E0           MOVX      A,@DPTR
   \   000260   28           ADD       A,R0
   \   000261   FA           MOV       R2,A
   \   000262   A3           INC       DPTR
   \   000263   E0           MOVX      A,@DPTR
   \   000264   39           ADDC      A,R1
   \   000265   FB           MOV       R3,A
   \   000266   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000269   7402         MOV       A,#0x2
   \   00026B   12....       LCALL     ?DEALLOC_XSTACK8
    235                
    236              } //CASE
    237              
    238              break;
    239            } 
    240          }
   \                     ??AES_StreamCoder_12:
   \   00026E   741A         MOV       A,#0x1a
   \   000270   12....       LCALL     ?DEALLOC_XSTACK8
   \   000273   7F07         MOV       R7,#0x7
   \   000275   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000278                REQUIRE ENCCS
   \   000278                REQUIRE DMAARM
   \   000278                REQUIRE DMAREQ
    241          
    242          /**
    243          @brief Шифрует/дешифрует поток данных во время радиопередачи. Без проверки MIC
    244          @param[in] enc_mode Режим работы процедуры. true - шифрование.
    245          @param[in] src Указатель на данные подлежащии шифрованию
    246          @param[in] dst Указтель куда будут помещены зашифрованные данные
    247          @param[in] key Указатье на ключ. 16 байт
    248          @param[in] iv  Указатель на вектор иницилизации. 16 байт 
    249          @param[in] len Длинна данных
    250          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          static void CTR_enc_decrypt(bool enc_mode, uint8_t *src, uint8_t *dst, uint8_t *key,
   \                     ??CTR_enc_decrypt:
    252                                   uint8_t *iv, uint8_t len)
    253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7402         MOV       A,#0x2
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A2F0         MOV       C,B.0
   \   000020   92..         MOV       ?VB.0,C
   \   000022   89..         MOV       ?V6,R1
    254            // Установим метод кодироваения
    255            AES_SET_MODE(AES_MODE_CTR);
   \   000024   53B38F       ANL       0xb3,#0x8f
   \   000027   43B330       ORL       0xb3,#0x30
    256            
    257            // Загружаем ключ
    258            AES_SET_OPERATION(AES_LOAD_KEY);
   \   00002A   E5B3         MOV       A,0xb3
   \   00002C   54F8         ANL       A,#0xf8
   \   00002E   4404         ORL       A,#0x4
   \   000030   F5B3         MOV       0xb3,A
    259            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(key));
   \   000032   7425         MOV       A,#0x25
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   E8           MOV       A,R0
   \   00003D   90....       MOV       DPTR,#DMA_CH + 1
   \   000040   F0           MOVX      @DPTR,A
    260            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(key));
   \   000041   7425         MOV       A,#0x25
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F8           MOV       R0,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   E4           CLR       A
   \   00004C   C9           XCH       A,R1
   \   00004D   F8           MOV       R0,A
   \   00004E   E8           MOV       A,R0
   \   00004F   90....       MOV       DPTR,#DMA_CH
   \   000052   F0           MOVX      @DPTR,A
    261            ST_DEF(DMA_CH[0], LENL, 16);
   \   000053   90....       MOV       DPTR,#DMA_CH + 5
   \   000056   7410         MOV       A,#0x10
   \   000058   F0           MOVX      @DPTR,A
    262            DMAARM |= 0x01;
   \   000059   43D601       ORL       0xd6,#0x1
    263            while(!AES_RDY());
   \                     ??CTR_enc_decrypt_1:
   \   00005C   E5B3         MOV       A,0xb3
   \   00005E   A2E3         MOV       C,0xE0 /* A   */.3
   \   000060   50FA         JNC       ??CTR_enc_decrypt_1
    264            AES_START();
   \   000062   43B301       ORL       0xb3,#0x1
    265            while (DMAARM&0x01);
   \                     ??CTR_enc_decrypt_2:
   \   000065   E5D6         MOV       A,0xd6
   \   000067   A2E0         MOV       C,0xE0 /* A   */.0
   \   000069   40FA         JC        ??CTR_enc_decrypt_2
    266          
    267            // Загружаем IV
    268            AES_SET_OPERATION(AES_LOAD_IV);
   \   00006B   E5B3         MOV       A,0xb3
   \   00006D   54F8         ANL       A,#0xf8
   \   00006F   4406         ORL       A,#0x6
   \   000071   F5B3         MOV       0xb3,A
    269            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(iv));
   \   000073   7427         MOV       A,#0x27
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F8           MOV       R0,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F9           MOV       R1,A
   \   00007D   E8           MOV       A,R0
   \   00007E   90....       MOV       DPTR,#DMA_CH + 1
   \   000081   F0           MOVX      @DPTR,A
    270            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(iv));
   \   000082   7427         MOV       A,#0x27
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F9           MOV       R1,A
   \   00008C   E4           CLR       A
   \   00008D   C9           XCH       A,R1
   \   00008E   F8           MOV       R0,A
   \   00008F   E8           MOV       A,R0
   \   000090   90....       MOV       DPTR,#DMA_CH
   \   000093   F0           MOVX      @DPTR,A
    271            ST_DEF(DMA_CH[0], LENL, 16);
   \   000094   90....       MOV       DPTR,#DMA_CH + 5
   \   000097   7410         MOV       A,#0x10
   \   000099   F0           MOVX      @DPTR,A
    272            DMAARM |= 0x01;
   \   00009A   43D601       ORL       0xd6,#0x1
    273            while(!AES_RDY());
   \                     ??CTR_enc_decrypt_3:
   \   00009D   E5B3         MOV       A,0xb3
   \   00009F   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000A1   50FA         JNC       ??CTR_enc_decrypt_3
    274            AES_START();
   \   0000A3   43B301       ORL       0xb3,#0x1
    275            while (DMAARM&0x01);
   \                     ??CTR_enc_decrypt_4:
   \   0000A6   E5D6         MOV       A,0xd6
   \   0000A8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AA   40FA         JC        ??CTR_enc_decrypt_4
    276          
    277            // Установим необходимую операцию AES
    278            if (enc_mode) 
   \   0000AC   A2..         MOV       C,?VB.0
   \   0000AE   5005         JNC       ??CTR_enc_decrypt_5
    279              AES_SET_OPERATION(AES_ENCRYPT)
   \   0000B0   53B3F8       ANL       0xb3,#0xf8
   \   0000B3   8008         SJMP      ??CTR_enc_decrypt_6
    280            else 
    281              AES_SET_OPERATION(AES_DECRYPT)
   \                     ??CTR_enc_decrypt_5:
   \   0000B5   E5B3         MOV       A,0xb3
   \   0000B7   54F8         ANL       A,#0xf8
   \   0000B9   4402         ORL       A,#0x2
   \   0000BB   F5B3         MOV       0xb3,A
    282            
    283            // Загрузка блоками по 128 бит с разделением на под-блоки по 32 бита
    284            uint8_t nbrBlocks = len / 16; // Количество целых блоков по 128 бит
   \                     ??CTR_enc_decrypt_6:
   \   0000BD   75F010       MOV       B,#0x10
   \   0000C0   E5..         MOV       A,?V6
   \   0000C2   84           DIV       AB
   \   0000C3   F5..         MOV       ?V5,A
    285            uint8_t ptr, sub_ptr; // Смещение
    286            uint8_t *download, *upload;
    287                
    288            // Для этих типов шифрования длина блоков по 4 байта
    289            ST_DEF(DMA_CH[0], LENL, 4);
   \   0000C5   90....       MOV       DPTR,#DMA_CH + 5
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   F0           MOVX      @DPTR,A
    290            ST_DEF(DMA_CH[1], LENL, 4);
   \   0000CB   90....       MOV       DPTR,#DMA_CH + 13
   \   0000CE   7404         MOV       A,#0x4
   \   0000D0   F0           MOVX      @DPTR,A
    291                
    292            // Шифруем все целые блоки
    293            for (uint8_t block = 0; block < nbrBlocks; block ++)
   \   0000D1   7A00         MOV       R2,#0x0
   \                     ??CTR_enc_decrypt_7:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   C3           CLR       C
   \   0000D5   95..         SUBB      A,?V5
   \   0000D7   4003         JC        $+5
   \   0000D9   02....       LJMP      ??CTR_enc_decrypt_8 & 0xFFFF
    294              {
    295                ptr = 16 * block;
   \   0000DC   75F010       MOV       B,#0x10
   \   0000DF   EA           MOV       A,R2
   \   0000E0   A4           MUL       AB
   \   0000E1   FE           MOV       R6,A
    296                while(!AES_RDY());
   \                     ??CTR_enc_decrypt_9:
   \   0000E2   E5B3         MOV       A,0xb3
   \   0000E4   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000E6   50FA         JNC       ??CTR_enc_decrypt_9
    297                AES_START();
   \   0000E8   43B301       ORL       0xb3,#0x1
    298                for (uint8_t j = 0; j < 4; j++)
   \   0000EB   7B00         MOV       R3,#0x0
   \                     ??CTR_enc_decrypt_10:
   \   0000ED   EB           MOV       A,R3
   \   0000EE   C3           CLR       C
   \   0000EF   9404         SUBB      A,#0x4
   \   0000F1   507A         JNC       ??CTR_enc_decrypt_11
    299                  {
    300                    sub_ptr = ptr + 4*j;
   \   0000F3   75F004       MOV       B,#0x4
   \   0000F6   EB           MOV       A,R3
   \   0000F7   A4           MUL       AB
   \   0000F8   2E           ADD       A,R6
   \   0000F9   FF           MOV       R7,A
    301                    download = &src[sub_ptr];
   \   0000FA   EF           MOV       A,R7
   \   0000FB   F8           MOV       R0,A
   \   0000FC   7900         MOV       R1,#0x0
   \   0000FE   7404         MOV       A,#0x4
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   28           ADD       A,R0
   \   000105   F8           MOV       R0,A
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   39           ADDC      A,R1
   \   000109   F9           MOV       R1,A
   \   00010A   88..         MOV       ?V0,R0
   \   00010C   89..         MOV       ?V1,R1
    302                    upload = &dst[sub_ptr];
   \   00010E   EF           MOV       A,R7
   \   00010F   F8           MOV       R0,A
   \   000110   7900         MOV       R1,#0x0
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   E0           MOVX      A,@DPTR
   \   000118   28           ADD       A,R0
   \   000119   F8           MOV       R0,A
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   39           ADDC      A,R1
   \   00011D   F9           MOV       R1,A
   \   00011E   85..82       MOV       DPL,?XSP + 0
   \   000121   85..83       MOV       DPH,?XSP + 1
   \   000124   E8           MOV       A,R0
   \   000125   F0           MOVX      @DPTR,A
   \   000126   A3           INC       DPTR
   \   000127   E9           MOV       A,R1
   \   000128   F0           MOVX      @DPTR,A
    303                    // Указываем адресс DMA откуда читать данные
    304                    ST_DEF(DMA_CH[0], SRCADDRL, LADDR(download));
   \   000129   E5..         MOV       A,?V0
   \   00012B   90....       MOV       DPTR,#DMA_CH + 1
   \   00012E   F0           MOVX      @DPTR,A
    305                    ST_DEF(DMA_CH[0], SRCADDRH, HADDR(download));
   \   00012F   A8..         MOV       R0,?V0
   \   000131   A9..         MOV       R1,?V1
   \   000133   E4           CLR       A
   \   000134   C9           XCH       A,R1
   \   000135   F8           MOV       R0,A
   \   000136   E8           MOV       A,R0
   \   000137   90....       MOV       DPTR,#DMA_CH
   \   00013A   F0           MOVX      @DPTR,A
    306                    // Указываем адрес DMA куда записывать данные          
    307                    ST_DEF(DMA_CH[1], DSTADDRL, LADDR(upload));
   \   00013B   85..82       MOV       DPL,?XSP + 0
   \   00013E   85..83       MOV       DPH,?XSP + 1
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F8           MOV       R0,A
   \   000143   A3           INC       DPTR
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F9           MOV       R1,A
   \   000146   E8           MOV       A,R0
   \   000147   90....       MOV       DPTR,#DMA_CH + 11
   \   00014A   F0           MOVX      @DPTR,A
    308                    ST_DEF(DMA_CH[1], DSTADDRH, HADDR(upload));
   \   00014B   85..82       MOV       DPL,?XSP + 0
   \   00014E   85..83       MOV       DPH,?XSP + 1
   \   000151   E0           MOVX      A,@DPTR
   \   000152   F8           MOV       R0,A
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F9           MOV       R1,A
   \   000156   E4           CLR       A
   \   000157   C9           XCH       A,R1
   \   000158   F8           MOV       R0,A
   \   000159   E8           MOV       A,R0
   \   00015A   90....       MOV       DPTR,#DMA_CH + 10
   \   00015D   F0           MOVX      @DPTR,A
    309                    // Активируем DMA
    310                    DMAARM |= 0x03;  
   \   00015E   43D603       ORL       0xd6,#0x3
    311                    DMAREQ |= 0x01;
   \   000161   43D701       ORL       0xd7,#0x1
    312                    while (DMAARM&0x03);          
   \                     ??CTR_enc_decrypt_12:
   \   000164   E5D6         MOV       A,0xd6
   \   000166   5403         ANL       A,#0x3
   \   000168   70FA         JNZ       ??CTR_enc_decrypt_12
    313                  }
   \   00016A   0B           INC       R3
   \   00016B   8080         SJMP      ??CTR_enc_decrypt_10
    314              }     
   \                     ??CTR_enc_decrypt_11:
   \   00016D   0A           INC       R2
   \   00016E   02....       LJMP      ??CTR_enc_decrypt_7 & 0xFFFF
    315              // Шифруем последний блок
    316              uint8_t block_len = len % 16; // Размер последнего блока
   \                     ??CTR_enc_decrypt_8:
   \   000171   E5..         MOV       A,?V6
   \   000173   75F010       MOV       B,#0x10
   \   000176   84           DIV       AB
   \   000177   E5F0         MOV       A,B
   \   000179   F5..         MOV       ?V4,A
    317                
    318              // Завершаем работу если блок пустой
    319              if (!block_len)
   \   00017B   E5..         MOV       A,?V4
   \   00017D   7003         JNZ       $+5
   \   00017F   02....       LJMP      ??CTR_enc_decrypt_13 & 0xFFFF
    320                return;
    321                
    322              uint8_t padding_block[16]; // Блок заполненый нулями
    323              ptr = 16*nbrBlocks; // Смещение на первый байт последнего блока в src
   \   000182   75F010       MOV       B,#0x10
   \   000185   E5..         MOV       A,?V5
   \   000187   A4           MUL       AB
   \   000188   FE           MOV       R6,A
    324              memset(padding_block, 0x00, sizeof(padding_block)); // Заполняем нулями
   \   000189                ; Setup parameters for call to function memset
   \   000189   75..10       MOV       ?V2,#0x10
   \   00018C   75..00       MOV       ?V3,#0x0
   \   00018F   78..         MOV       R0,#?V2
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000194   7C00         MOV       R4,#0x0
   \   000196   7D00         MOV       R5,#0x0
   \   000198   7408         MOV       A,#0x8
   \   00019A   12....       LCALL     ?XSTACK_DISP101_8
   \   00019D   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   0001A0   7402         MOV       A,#0x2
   \   0001A2   12....       LCALL     ?DEALLOC_XSTACK8
    325              memcpy(padding_block, &src[ptr], block_len); // Копируем данные
   \   0001A5                ; Setup parameters for call to function memcpy
   \   0001A5   E5..         MOV       A,?V4
   \   0001A7   F5..         MOV       ?V2,A
   \   0001A9   75..00       MOV       ?V3,#0x0
   \   0001AC   78..         MOV       R0,#?V2
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   EE           MOV       A,R6
   \   0001B2   F8           MOV       R0,A
   \   0001B3   7900         MOV       R1,#0x0
   \   0001B5   7406         MOV       A,#0x6
   \   0001B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   28           ADD       A,R0
   \   0001BC   FC           MOV       R4,A
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   39           ADDC      A,R1
   \   0001C0   FD           MOV       R5,A
   \   0001C1   7408         MOV       A,#0x8
   \   0001C3   12....       LCALL     ?XSTACK_DISP101_8
   \   0001C6   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0001C9   7402         MOV       A,#0x2
   \   0001CB   12....       LCALL     ?DEALLOC_XSTACK8
    326              
    327              while(!AES_RDY());
   \                     ??CTR_enc_decrypt_14:
   \   0001CE   E5B3         MOV       A,0xb3
   \   0001D0   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001D2   50FA         JNC       ??CTR_enc_decrypt_14
    328              AES_START();
   \   0001D4   43B301       ORL       0xb3,#0x1
    329              for (uint8_t j = 0; j < 4; j++)
   \   0001D7   7A00         MOV       R2,#0x0
   \                     ??CTR_enc_decrypt_15:
   \   0001D9   EA           MOV       A,R2
   \   0001DA   C3           CLR       C
   \   0001DB   9404         SUBB      A,#0x4
   \   0001DD   504E         JNC       ??CTR_enc_decrypt_16
    330                {
    331                  sub_ptr = 4*j;
   \   0001DF   75F004       MOV       B,#0x4
   \   0001E2   EA           MOV       A,R2
   \   0001E3   A4           MUL       AB
   \   0001E4   FF           MOV       R7,A
    332                  download = &padding_block[sub_ptr];
   \   0001E5   EF           MOV       A,R7
   \   0001E6   F8           MOV       R0,A
   \   0001E7   7900         MOV       R1,#0x0
   \   0001E9   7406         MOV       A,#0x6
   \   0001EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EE   E582         MOV       A,DPL
   \   0001F0   28           ADD       A,R0
   \   0001F1   F8           MOV       R0,A
   \   0001F2   E583         MOV       A,DPH
   \   0001F4   39           ADDC      A,R1
   \   0001F5   F9           MOV       R1,A
   \   0001F6   88..         MOV       ?V0,R0
   \   0001F8   89..         MOV       ?V1,R1
    333                  // Указываем адресс DMA откуда читать данные
    334                  ST_DEF(DMA_CH[0], SRCADDRL, LADDR(download));
   \   0001FA   E5..         MOV       A,?V0
   \   0001FC   90....       MOV       DPTR,#DMA_CH + 1
   \   0001FF   F0           MOVX      @DPTR,A
    335                  ST_DEF(DMA_CH[0], SRCADDRH, HADDR(download));
   \   000200   A8..         MOV       R0,?V0
   \   000202   A9..         MOV       R1,?V1
   \   000204   E4           CLR       A
   \   000205   C9           XCH       A,R1
   \   000206   F8           MOV       R0,A
   \   000207   E8           MOV       A,R0
   \   000208   90....       MOV       DPTR,#DMA_CH
   \   00020B   F0           MOVX      @DPTR,A
    336                  // Указываем аддрес DMA куда записывать данные          
    337                  ST_DEF(DMA_CH[1], DSTADDRL, LADDR(download));
   \   00020C   E5..         MOV       A,?V0
   \   00020E   90....       MOV       DPTR,#DMA_CH + 11
   \   000211   F0           MOVX      @DPTR,A
    338                  ST_DEF(DMA_CH[1], DSTADDRH, HADDR(download));
   \   000212   A8..         MOV       R0,?V0
   \   000214   A9..         MOV       R1,?V1
   \   000216   E4           CLR       A
   \   000217   C9           XCH       A,R1
   \   000218   F8           MOV       R0,A
   \   000219   E8           MOV       A,R0
   \   00021A   90....       MOV       DPTR,#DMA_CH + 10
   \   00021D   F0           MOVX      @DPTR,A
    339                  // Активируем DMA
    340                  DMAARM |= 0x03;  
   \   00021E   43D603       ORL       0xd6,#0x3
    341                  DMAREQ |= 0x01;
   \   000221   43D701       ORL       0xd7,#0x1
    342                  while (DMAARM&0x03);
   \                     ??CTR_enc_decrypt_17:
   \   000224   E5D6         MOV       A,0xd6
   \   000226   5403         ANL       A,#0x3
   \   000228   70FA         JNZ       ??CTR_enc_decrypt_17
    343                }
   \   00022A   0A           INC       R2
   \   00022B   80AC         SJMP      ??CTR_enc_decrypt_15
    344              memcpy(&dst[ptr], padding_block, block_len); // Копируем в src
   \                     ??CTR_enc_decrypt_16:
   \   00022D                ; Setup parameters for call to function memcpy
   \   00022D   E5..         MOV       A,?V4
   \   00022F   F5..         MOV       ?V2,A
   \   000231   75..00       MOV       ?V3,#0x0
   \   000234   78..         MOV       R0,#?V2
   \   000236   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000239   7408         MOV       A,#0x8
   \   00023B   12....       LCALL     ?XSTACK_DISP102_8
   \   00023E   EE           MOV       A,R6
   \   00023F   F8           MOV       R0,A
   \   000240   7900         MOV       R1,#0x0
   \   000242   7404         MOV       A,#0x4
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   E0           MOVX      A,@DPTR
   \   000248   28           ADD       A,R0
   \   000249   FA           MOV       R2,A
   \   00024A   A3           INC       DPTR
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   39           ADDC      A,R1
   \   00024D   FB           MOV       R3,A
   \   00024E   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000251   7402         MOV       A,#0x2
   \   000253   12....       LCALL     ?DEALLOC_XSTACK8
    345          }
   \                     ??CTR_enc_decrypt_13:
   \   000256   7416         MOV       A,#0x16
   \   000258   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025B   7F07         MOV       R7,#0x7
   \   00025D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000260                REQUIRE ENCCS
   \   000260                REQUIRE DMAARM
   \   000260                REQUIRE DMAREQ
    346          
    347          /**
    348          @brief Зашифровывает buf в режиме CBC-MAC с IV = 0
    349          @param[in] len улинна последовательности для вычисления MAC
    350          @param[out] mac указатель на память куда будет записан mac (до 16 байт)
    351          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          static void CBCMAC_buf_encrypt(uint8_t len, uint8_t *key, uint8_t *mac)
   \                     ??CBCMAC_buf_encrypt:
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
    354            uint8_t IV[16];
    355            
    356            // Заполняем вектор нулями
    357            memset(IV, 0x00, sizeof(IV));
   \   000014                ; Setup parameters for call to function memset
   \   000014   75..10       MOV       ?V2,#0x10
   \   000017   75..00       MOV       ?V3,#0x0
   \   00001A   78..         MOV       R0,#?V2
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV       R4,#0x0
   \   000021   7D00         MOV       R5,#0x0
   \   000023   7412         MOV       A,#0x12
   \   000025   12....       LCALL     ?XSTACK_DISP101_8
   \   000028   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
    358            
    359            // Установим метод кодироваения
    360            AES_SET_MODE(AES_MODE_CBCMAC);  
   \   000030   53B38F       ANL       0xb3,#0x8f
   \   000033   43B350       ORL       0xb3,#0x50
    361            
    362            { // Сворачиваем код для улучшения чтения
    363            // Загружаем ключ
    364            AES_SET_OPERATION(AES_LOAD_KEY);
   \   000036   E5B3         MOV       A,0xb3
   \   000038   54F8         ANL       A,#0xf8
   \   00003A   4404         ORL       A,#0x4
   \   00003C   F5B3         MOV       0xb3,A
    365            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(key));
   \   00003E   E5..         MOV       A,?V6
   \   000040   90....       MOV       DPTR,#DMA_CH + 1
   \   000043   F0           MOVX      @DPTR,A
    366            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(key));
   \   000044   A8..         MOV       R0,?V6
   \   000046   A9..         MOV       R1,?V7
   \   000048   E4           CLR       A
   \   000049   C9           XCH       A,R1
   \   00004A   F8           MOV       R0,A
   \   00004B   E8           MOV       A,R0
   \   00004C   90....       MOV       DPTR,#DMA_CH
   \   00004F   F0           MOVX      @DPTR,A
    367            ST_DEF(DMA_CH[0], LENL, 16);
   \   000050   90....       MOV       DPTR,#DMA_CH + 5
   \   000053   7410         MOV       A,#0x10
   \   000055   F0           MOVX      @DPTR,A
    368            DMAARM |= 0x01;
   \   000056   43D601       ORL       0xd6,#0x1
    369            while(!AES_RDY());
   \                     ??CBCMAC_buf_encrypt_1:
   \   000059   E5B3         MOV       A,0xb3
   \   00005B   A2E3         MOV       C,0xE0 /* A   */.3
   \   00005D   50FA         JNC       ??CBCMAC_buf_encrypt_1
    370            AES_START();
   \   00005F   43B301       ORL       0xb3,#0x1
    371            while (DMAARM&0x01);
   \                     ??CBCMAC_buf_encrypt_2:
   \   000062   E5D6         MOV       A,0xd6
   \   000064   A2E0         MOV       C,0xE0 /* A   */.0
   \   000066   40FA         JC        ??CBCMAC_buf_encrypt_2
    372          
    373            // Загружаем IV
    374            AES_SET_OPERATION(AES_LOAD_IV);
   \   000068   E5B3         MOV       A,0xb3
   \   00006A   54F8         ANL       A,#0xf8
   \   00006C   4406         ORL       A,#0x6
   \   00006E   F5B3         MOV       0xb3,A
    375            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(IV));
   \   000070   7410         MOV       A,#0x10
   \   000072   12....       LCALL     ?XSTACK_DISP100_8
   \   000075   E8           MOV       A,R0
   \   000076   90....       MOV       DPTR,#DMA_CH + 1
   \   000079   F0           MOVX      @DPTR,A
    376            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(IV));
   \   00007A   7410         MOV       A,#0x10
   \   00007C   12....       LCALL     ?XSTACK_DISP100_8
   \   00007F   E4           CLR       A
   \   000080   C9           XCH       A,R1
   \   000081   F8           MOV       R0,A
   \   000082   E8           MOV       A,R0
   \   000083   90....       MOV       DPTR,#DMA_CH
   \   000086   F0           MOVX      @DPTR,A
    377            ST_DEF(DMA_CH[0], LENL, 16);
   \   000087   90....       MOV       DPTR,#DMA_CH + 5
   \   00008A   7410         MOV       A,#0x10
   \   00008C   F0           MOVX      @DPTR,A
    378            DMAARM |= 0x01;
   \   00008D   43D601       ORL       0xd6,#0x1
    379            while(!AES_RDY());
   \                     ??CBCMAC_buf_encrypt_3:
   \   000090   E5B3         MOV       A,0xb3
   \   000092   A2E3         MOV       C,0xE0 /* A   */.3
   \   000094   50FA         JNC       ??CBCMAC_buf_encrypt_3
    380            AES_START();
   \   000096   43B301       ORL       0xb3,#0x1
    381            while (DMAARM&0x01);
   \                     ??CBCMAC_buf_encrypt_4:
   \   000099   E5D6         MOV       A,0xd6
   \   00009B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00009D   40FA         JC        ??CBCMAC_buf_encrypt_4
    382            };
    383            
    384            // Устанавливаем операцию шифрования
    385            AES_SET_OPERATION(AES_ENCRYPT);
   \   00009F   53B3F8       ANL       0xb3,#0xf8
    386            
    387            // Загрузка блоками по 128 бит
    388            uint8_t nbrBlocks = len / 16; // Количество целых блоков по 128 бит
   \   0000A2   75F010       MOV       B,#0x10
   \   0000A5   E5..         MOV       A,?V1
   \   0000A7   84           DIV       AB
   \   0000A8   F5..         MOV       ?V0,A
    389            uint8_t block_len = len % 16; // Размер последнего блока
   \   0000AA   E5..         MOV       A,?V1
   \   0000AC   75F010       MOV       B,#0x10
   \   0000AF   84           DIV       AB
   \   0000B0   E5F0         MOV       A,B
   \   0000B2   FF           MOV       R7,A
    390            uint8_t ptr; // Смещение
    391                
    392            // Для этого типа шифрования длина блоков по 16 байт
    393            ST_DEF(DMA_CH[0], LENL, 16);
   \   0000B3   90....       MOV       DPTR,#DMA_CH + 5
   \   0000B6   7410         MOV       A,#0x10
   \   0000B8   F0           MOVX      @DPTR,A
    394            // Устанавливаем куда будем выгружать вычисленный MAC
    395            ST_DEF(DMA_CH[1], DSTADDRL, LADDR(mac));
   \   0000B9   E5..         MOV       A,?V4
   \   0000BB   90....       MOV       DPTR,#DMA_CH + 11
   \   0000BE   F0           MOVX      @DPTR,A
    396            ST_DEF(DMA_CH[1], DSTADDRH, HADDR(mac));
   \   0000BF   A8..         MOV       R0,?V4
   \   0000C1   A9..         MOV       R1,?V5
   \   0000C3   E4           CLR       A
   \   0000C4   C9           XCH       A,R1
   \   0000C5   F8           MOV       R0,A
   \   0000C6   E8           MOV       A,R0
   \   0000C7   90....       MOV       DPTR,#DMA_CH + 10
   \   0000CA   F0           MOVX      @DPTR,A
    397            ST_DEF(DMA_CH[1], LENL, 16);
   \   0000CB   90....       MOV       DPTR,#DMA_CH + 13
   \   0000CE   7410         MOV       A,#0x10
   \   0000D0   F0           MOVX      @DPTR,A
    398            
    399            // Шифруем все целые блоки
    400            for (uint8_t block = 0; block < nbrBlocks; block ++)
   \   0000D1   7A00         MOV       R2,#0x0
   \                     ??CBCMAC_buf_encrypt_5:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   C3           CLR       C
   \   0000D5   95..         SUBB      A,?V0
   \   0000D7   5078         JNC       ??CBCMAC_buf_encrypt_6
    401              {
    402                // Последний блок шифруем в режиме CBC при условии что нет блок не 
    403                // кратного 16 байтам.
    404                if (!block_len && (block == nbrBlocks - 1))
   \   0000D9   EF           MOV       A,R7
   \   0000DA   701F         JNZ       ??CBCMAC_buf_encrypt_7
   \   0000DC   EA           MOV       A,R2
   \   0000DD   FC           MOV       R4,A
   \   0000DE   7D00         MOV       R5,#0x0
   \   0000E0   E5..         MOV       A,?V0
   \   0000E2   F8           MOV       R0,A
   \   0000E3   7900         MOV       R1,#0x0
   \   0000E5   E8           MOV       A,R0
   \   0000E6   24FF         ADD       A,#-0x1
   \   0000E8   F8           MOV       R0,A
   \   0000E9   E9           MOV       A,R1
   \   0000EA   34FF         ADDC      A,#-0x1
   \   0000EC   F9           MOV       R1,A
   \   0000ED   E8           MOV       A,R0
   \   0000EE   6C           XRL       A,R4
   \   0000EF   7002         JNZ       ??CBCMAC_buf_encrypt_8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   6D           XRL       A,R5
   \                     ??CBCMAC_buf_encrypt_8:
   \   0000F3   7006         JNZ       ??CBCMAC_buf_encrypt_7
    405                  AES_SET_MODE(AES_MODE_CBC);
   \   0000F5   53B38F       ANL       0xb3,#0x8f
   \   0000F8   85B3B3       MOV       0xb3,0xb3
    406                    
    407                ptr = 16 * block;
   \                     ??CBCMAC_buf_encrypt_7:
   \   0000FB   75F010       MOV       B,#0x10
   \   0000FE   EA           MOV       A,R2
   \   0000FF   A4           MUL       AB
   \   000100   FE           MOV       R6,A
    408                while(!AES_RDY());
   \                     ??CBCMAC_buf_encrypt_9:
   \   000101   E5B3         MOV       A,0xb3
   \   000103   A2E3         MOV       C,0xE0 /* A   */.3
   \   000105   50FA         JNC       ??CBCMAC_buf_encrypt_9
    409                AES_START();
   \   000107   43B301       ORL       0xb3,#0x1
    410                // Указываем адресс DMA откуда читать данные
    411                ST_DEF(DMA_CH[0], SRCADDRL, LADDR(buf[ptr]));
   \   00010A   EE           MOV       A,R6
   \   00010B   F8           MOV       R0,A
   \   00010C   7900         MOV       R1,#0x0
   \   00010E   74..         MOV       A,#??buf & 0xff
   \   000110   28           ADD       A,R0
   \   000111   F582         MOV       DPL,A
   \   000113   74..         MOV       A,#(??buf >> 8) & 0xff
   \   000115   39           ADDC      A,R1
   \   000116   F583         MOV       DPH,A
   \   000118   E0           MOVX      A,@DPTR
   \   000119   90....       MOV       DPTR,#DMA_CH + 1
   \   00011C   F0           MOVX      @DPTR,A
    412                ST_DEF(DMA_CH[0], SRCADDRH, HADDR(buf[ptr]));
   \   00011D   90....       MOV       DPTR,#DMA_CH
   \   000120   7400         MOV       A,#0x0
   \   000122   F0           MOVX      @DPTR,A
    413                // Активируем DMA
    414                DMAARM |= 0x01;  
   \   000123   43D601       ORL       0xd6,#0x1
    415                // Активируем выгрузку только последнего блока
    416                if (!block_len && (block == nbrBlocks - 1))
   \   000126   EF           MOV       A,R7
   \   000127   701C         JNZ       ??CBCMAC_buf_encrypt_10
   \   000129   EA           MOV       A,R2
   \   00012A   FC           MOV       R4,A
   \   00012B   7D00         MOV       R5,#0x0
   \   00012D   E5..         MOV       A,?V0
   \   00012F   F8           MOV       R0,A
   \   000130   7900         MOV       R1,#0x0
   \   000132   E8           MOV       A,R0
   \   000133   24FF         ADD       A,#-0x1
   \   000135   F8           MOV       R0,A
   \   000136   E9           MOV       A,R1
   \   000137   34FF         ADDC      A,#-0x1
   \   000139   F9           MOV       R1,A
   \   00013A   E8           MOV       A,R0
   \   00013B   6C           XRL       A,R4
   \   00013C   7002         JNZ       ??CBCMAC_buf_encrypt_11
   \   00013E   E9           MOV       A,R1
   \   00013F   6D           XRL       A,R5
   \                     ??CBCMAC_buf_encrypt_11:
   \   000140   7003         JNZ       ??CBCMAC_buf_encrypt_10
    417                  DMAARM |= 0x03;
   \   000142   43D603       ORL       0xd6,#0x3
    418                
    419                DMAREQ |= 0x01;
   \                     ??CBCMAC_buf_encrypt_10:
   \   000145   43D701       ORL       0xd7,#0x1
    420                while (DMAARM&0x03);          
   \                     ??CBCMAC_buf_encrypt_12:
   \   000148   E5D6         MOV       A,0xd6
   \   00014A   5403         ANL       A,#0x3
   \   00014C   70FA         JNZ       ??CBCMAC_buf_encrypt_12
    421               }
   \   00014E   0A           INC       R2
   \   00014F   8082         SJMP      ??CBCMAC_buf_encrypt_5
    422                 
    423            // Шифруем последний блок в режиме CBC
    424            AES_SET_MODE(AES_MODE_CBC);
   \                     ??CBCMAC_buf_encrypt_6:
   \   000151   53B38F       ANL       0xb3,#0x8f
   \   000154   85B3B3       MOV       0xb3,0xb3
    425                    
    426            // Завершаем работу если блок пустой
    427            if (!block_len)
   \   000157   EF           MOV       A,R7
   \   000158   6071         JZ        ??CBCMAC_buf_encrypt_13
    428              return;
    429                
    430            uint8_t padding_block[16]; // Блок заполненый нулями
    431            ptr = 16*nbrBlocks; // Смещение на первый байт последнего блока в src
   \   00015A   75F010       MOV       B,#0x10
   \   00015D   E5..         MOV       A,?V0
   \   00015F   A4           MUL       AB
   \   000160   FE           MOV       R6,A
    432            memset(padding_block, 0x00, sizeof(padding_block)); // Заполняем нулями
   \   000161                ; Setup parameters for call to function memset
   \   000161   75..10       MOV       ?V2,#0x10
   \   000164   75..00       MOV       ?V3,#0x0
   \   000167   78..         MOV       R0,#?V2
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016C   7C00         MOV       R4,#0x0
   \   00016E   7D00         MOV       R5,#0x0
   \   000170   7402         MOV       A,#0x2
   \   000172   12....       LCALL     ?XSTACK_DISP101_8
   \   000175   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000178   7402         MOV       A,#0x2
   \   00017A   12....       LCALL     ?DEALLOC_XSTACK8
    433            memcpy(padding_block, &buf[ptr], block_len); // Копируем данные
   \   00017D                ; Setup parameters for call to function memcpy
   \   00017D   EF           MOV       A,R7
   \   00017E   F5..         MOV       ?V2,A
   \   000180   75..00       MOV       ?V3,#0x0
   \   000183   78..         MOV       R0,#?V2
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000188   EE           MOV       A,R6
   \   000189   F8           MOV       R0,A
   \   00018A   7900         MOV       R1,#0x0
   \   00018C   74..         MOV       A,#??buf & 0xff
   \   00018E   28           ADD       A,R0
   \   00018F   FC           MOV       R4,A
   \   000190   74..         MOV       A,#(??buf >> 8) & 0xff
   \   000192   39           ADDC      A,R1
   \   000193   FD           MOV       R5,A
   \   000194   7402         MOV       A,#0x2
   \   000196   12....       LCALL     ?XSTACK_DISP101_8
   \   000199   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   00019C   7402         MOV       A,#0x2
   \   00019E   12....       LCALL     ?DEALLOC_XSTACK8
    434                
    435            while(!AES_RDY());
   \                     ??CBCMAC_buf_encrypt_14:
   \   0001A1   E5B3         MOV       A,0xb3
   \   0001A3   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001A5   50FA         JNC       ??CBCMAC_buf_encrypt_14
    436            AES_START();
   \   0001A7   43B301       ORL       0xb3,#0x1
    437            // Указываем адресс DMA откуда читать данные
    438            ST_DEF(DMA_CH[0], SRCADDRL, LADDR(padding_block));
   \   0001AA   A8..         MOV       R0,?XSP + 0
   \   0001AC   A9..         MOV       R1,?XSP + 1
   \   0001AE   E8           MOV       A,R0
   \   0001AF   90....       MOV       DPTR,#DMA_CH + 1
   \   0001B2   F0           MOVX      @DPTR,A
    439            ST_DEF(DMA_CH[0], SRCADDRH, HADDR(padding_block));
   \   0001B3   A8..         MOV       R0,?XSP + 0
   \   0001B5   A9..         MOV       R1,?XSP + 1
   \   0001B7   E4           CLR       A
   \   0001B8   C9           XCH       A,R1
   \   0001B9   F8           MOV       R0,A
   \   0001BA   E8           MOV       A,R0
   \   0001BB   90....       MOV       DPTR,#DMA_CH
   \   0001BE   F0           MOVX      @DPTR,A
    440            // Активируем DMA и выгрузку MAC
    441            DMAARM |= 0x03;  
   \   0001BF   43D603       ORL       0xd6,#0x3
    442            DMAREQ |= 0x01;
   \   0001C2   43D701       ORL       0xd7,#0x1
    443            while (DMAARM&0x03);
   \                     ??CBCMAC_buf_encrypt_15:
   \   0001C5   E5D6         MOV       A,0xd6
   \   0001C7   5403         ANL       A,#0x3
   \   0001C9   70FA         JNZ       ??CBCMAC_buf_encrypt_15
    444          }
   \                     ??CBCMAC_buf_encrypt_13:
   \   0001CB   7420         MOV       A,#0x20
   \   0001CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D0   7F08         MOV       R7,#0x8
   \   0001D2   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0001D5                REQUIRE ENCCS
   \   0001D5                REQUIRE DMAARM
   \   0001D5                REQUIRE DMAREQ
    445          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    446          static inline uint8_t generateAuthData(uint8_t *src, uint8_t *nonce, uint8_t c,
   \                     ??generateAuthData:
    447                                                 uint8_t f, uint8_t lm)
    448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V6,R4
   \   00000B   8D..         MOV       ?V7,R5
   \   00000D   E9           MOV       A,R1
   \   00000E   FF           MOV       R7,A
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   7411         MOV       A,#0x11
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
    449            memcpy(buf, nonce,16);
   \   00001E                ; Setup parameters for call to function memcpy
   \   00001E   75..10       MOV       ?V2,#0x10
   \   000021   75..00       MOV       ?V3,#0x0
   \   000024   78..         MOV       R0,#?V2
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   AC..         MOV       R4,?V6
   \   00002B   AD..         MOV       R5,?V7
   \   00002D   7A..         MOV       R2,#??buf & 0xff
   \   00002F   7B..         MOV       R3,#(??buf >> 8) & 0xff
   \   000031   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
    450            
    451            // Буфер от 0 до 15 байта специальный блок B0
    452            // Настраиваем флаг. У нас длинна 2 байта. nonce 13 байт => L_M = L-1=0x01
    453            buf[0]=  0x01;  
   \   000039   90....       MOV       DPTR,#??buf
   \   00003C   7401         MOV       A,#0x1
   \   00003E   F0           MOVX      @DPTR,A
    454            // Если есть данные для авторизации установим A_Data 
    455            if (f > 0)
   \   00003F   EE           MOV       A,R6
   \   000040   6007         JZ        ??generateAuthData_1
    456              buf[0] |= 0x40;
   \   000042   90....       MOV       DPTR,#??buf
   \   000045   E0           MOVX      A,@DPTR
   \   000046   D2E6         SETB      0xE0 /* A   */.6
   \   000048   F0           MOVX      @DPTR,A
    457            
    458            buf[0] |= ((lm - 2) / 2 ) << 3;   // см. документацию M'= (lm-2) / 2;
   \                     ??generateAuthData_1:
   \   000049   E5..         MOV       A,?V1
   \   00004B   F8           MOV       R0,A
   \   00004C   7900         MOV       R1,#0x0
   \   00004E   E8           MOV       A,R0
   \   00004F   24FE         ADD       A,#-0x2
   \   000051   F8           MOV       R0,A
   \   000052   E9           MOV       A,R1
   \   000053   34FF         ADDC      A,#-0x1
   \   000055   F9           MOV       R1,A
   \   000056   7A02         MOV       R2,#0x2
   \   000058   7B00         MOV       R3,#0x0
   \   00005A   12....       LCALL     ?S_DIV_MOD
   \   00005D   E8           MOV       A,R0
   \   00005E   33           RLC       A
   \   00005F   33           RLC       A
   \   000060   33           RLC       A
   \   000061   54F8         ANL       A,#0xf8
   \   000063   F8           MOV       R0,A
   \   000064   90....       MOV       DPTR,#??buf
   \   000067   E0           MOVX      A,@DPTR
   \   000068   48           ORL       A,R0
   \   000069   F0           MOVX      @DPTR,A
    459            
    460            // Устанавливаем длинну сообщения
    461            buf[14] = 0x00;
   \   00006A   90....       MOV       DPTR,#??buf + 14
   \   00006D   7400         MOV       A,#0x0
   \   00006F   F0           MOVX      @DPTR,A
    462            buf[15] = c;
   \   000070   EF           MOV       A,R7
   \   000071   90....       MOV       DPTR,#??buf + 15
   \   000074   F0           MOVX      @DPTR,A
    463            
    464            // Добавляем строку авторизации L(a). если данных нет, то она пустая. f=0
    465            buf[16]= 0;
   \   000075   90....       MOV       DPTR,#??buf + 16
   \   000078   7400         MOV       A,#0x0
   \   00007A   F0           MOVX      @DPTR,A
    466            buf[17]= f;
   \   00007B   EE           MOV       A,R6
   \   00007C   90....       MOV       DPTR,#??buf + 17
   \   00007F   F0           MOVX      @DPTR,A
    467            
    468            // Копируем данные авторизации в буфер
    469            memcpy(&buf[18], src, f);
   \   000080                ; Setup parameters for call to function memcpy
   \   000080   EE           MOV       A,R6
   \   000081   F5..         MOV       ?V2,A
   \   000083   75..00       MOV       ?V3,#0x0
   \   000086   78..         MOV       R0,#?V2
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   AC..         MOV       R4,?V4
   \   00008D   AD..         MOV       R5,?V5
   \   00008F   7A..         MOV       R2,#(??buf + 18) & 0xff
   \   000091   7B..         MOV       R3,#((??buf + 18) >> 8) & 0xff
   \   000093   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000096   7402         MOV       A,#0x2
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
    470            
    471            // Смещение на следующий байт после данных авторизации.
    472            // Данные авторизации занимают положение в буфере [18, 18+f]
    473            uint8_t ptr_end= 18 + f;
   \   00009B   7412         MOV       A,#0x12
   \   00009D   2E           ADD       A,R6
   \   00009E   F5..         MOV       ?V0,A
    474            // Заполняем нулями до границы 16 байт  
    475            while (ptr_end & 0x0f)
   \                     ??generateAuthData_2:
   \   0000A0   740F         MOV       A,#0xf
   \   0000A2   55..         ANL       A,?V0
   \   0000A4   6016         JZ        ??generateAuthData_3
    476              buf[ptr_end++] = 0x00;
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   F8           MOV       R0,A
   \   0000A9   7900         MOV       R1,#0x0
   \   0000AB   74..         MOV       A,#??buf & 0xff
   \   0000AD   28           ADD       A,R0
   \   0000AE   F582         MOV       DPL,A
   \   0000B0   74..         MOV       A,#(??buf >> 8) & 0xff
   \   0000B2   39           ADDC      A,R1
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   7400         MOV       A,#0x0
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   05..         INC       ?V0
   \   0000BA   80E4         SJMP      ??generateAuthData_2
    477            
    478            // Копируем данные для шифрования в буфер после нулей
    479            memcpy(&buf[ptr_end], &src[f], c);
   \                     ??generateAuthData_3:
   \   0000BC                ; Setup parameters for call to function memcpy
   \   0000BC   EF           MOV       A,R7
   \   0000BD   F5..         MOV       ?V2,A
   \   0000BF   75..00       MOV       ?V3,#0x0
   \   0000C2   78..         MOV       R0,#?V2
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   EE           MOV       A,R6
   \   0000C8   F8           MOV       R0,A
   \   0000C9   7900         MOV       R1,#0x0
   \   0000CB   E5..         MOV       A,?V4
   \   0000CD   28           ADD       A,R0
   \   0000CE   FC           MOV       R4,A
   \   0000CF   E5..         MOV       A,?V5
   \   0000D1   39           ADDC      A,R1
   \   0000D2   FD           MOV       R5,A
   \   0000D3   E5..         MOV       A,?V0
   \   0000D5   F8           MOV       R0,A
   \   0000D6   7900         MOV       R1,#0x0
   \   0000D8   74..         MOV       A,#??buf & 0xff
   \   0000DA   28           ADD       A,R0
   \   0000DB   FA           MOV       R2,A
   \   0000DC   74..         MOV       A,#(??buf >> 8) & 0xff
   \   0000DE   39           ADDC      A,R1
   \   0000DF   FB           MOV       R3,A
   \   0000E0   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
    480            
    481            // Возвращаем размер данных в буфере
    482            return ptr_end+c;
   \   0000E8   E5..         MOV       A,?V0
   \   0000EA   2F           ADD       A,R7
   \   0000EB   F9           MOV       R1,A
   \   0000EC   7F08         MOV       R7,#0x8
   \   0000EE   02....       LJMP      ?BANKED_LEAVE_XDATA
    483          };
    484          
    485          /**
    486          @brief Шифрует/дешифрует данные с проверкой MIC
    487          @param[in] src Указатель на данные подлежащии шифрованию
    488          @param[in] len Размер данных
    489          @param[in] с Количество байт для шифрования
    490          @param[in] f Количество байт для авторизации
    491          @param[in] m Размер MIC (m=1,2,3 l(m) = 4,8,16 байт)
    492          @param[in] iv  Указатель на вектор иницилизации. 16 байт 
    493          @param[in] len Длинна данных
    494          @param[in,out] MIC Указатель на массив соответсвующий длинне (4,8,16 байт)
    495          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          void AES_CCMEncrypt( uint8_t *src, uint8_t c, uint8_t f, uint8_t m, uint8_t *MIC)
   \                     AES_CCMEncrypt:
    497          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV       A,#-0x24
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   89..         MOV       ?V0,R1
   \   000016   8C..         MOV       ?V4,R4
   \   000018   8D..         MOV       ?V5,R5
    498            uint8_t *key = (uint8_t*)MODEL.AES.CCM_KEY;  
   \   00001A   75....       MOV       ?V6,#(MODEL + 51) & 0xff
   \   00001D   75....       MOV       ?V7,#((MODEL + 51) >> 8) & 0xff
    499            uint8_t *nonce = (uint8_t*)MODEL.AES.CCM_IV; 
   \   000020   85..82       MOV       DPL,?XSP + 0
   \   000023   85..83       MOV       DPH,?XSP + 1
   \   000026   74..         MOV       A,#(MODEL + 67) & 0xff
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   74..         MOV       A,#((MODEL + 67) >> 8) & 0xff
   \   00002C   F0           MOVX      @DPTR,A
    500            uint8_t lm = MIC_2_MICLEN(m);
   \   00002D   7401         MOV       A,#0x1
   \   00002F   C0E0         PUSH      A
   \   000031   7403         MOV       A,#0x3
   \   000033   55..         ANL       A,?V5
   \   000035   2401         ADD       A,#0x1
   \   000037   F8           MOV       R0,A
   \   000038   D0E0         POP       A
   \   00003A   B80002       CJNE      R0,#0x0,??AES_CCMEncrypt_0
   \   00003D   8004         SJMP      ??AES_CCMEncrypt_1
   \                     ??AES_CCMEncrypt_0:
   \   00003F   C3           CLR       C
   \   000040   33           RLC       A
   \   000041   D8FC         DJNZ      R0,??AES_CCMEncrypt_0
   \                     ??AES_CCMEncrypt_1:
   \   000043   54FC         ANL       A,#0xfc
   \   000045   F5..         MOV       ?V1,A
    501            
    502            // Генерируем данные для авторизации
    503            uint8_t dlen = generateAuthData(src, nonce, c, f, lm);
   \   000047                ; Setup parameters for call to function generateAuthData
   \   000047   E5..         MOV       A,?V1
   \   000049   F5..         MOV       ?V2,A
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   E5..         MOV       A,?V4
   \   000052   F5..         MOV       ?V2,A
   \   000054   78..         MOV       R0,#?V2
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   A9..         MOV       R1,?V0
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FC           MOV       R4,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   FD           MOV       R5,A
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   FA           MOV       R2,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FB           MOV       R3,A
   \   00006F   12....       LCALL     `??generateAuthData::?relay`; Banked call to: generateAuthData
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
    504            
    505            uint8_t mac[16]; // Сюда пишем мак
    506            CBCMAC_buf_encrypt(dlen, key, mac);
   \   000079                ; Setup parameters for call to function CBCMAC_buf_encrypt
   \   000079   7414         MOV       A,#0x14
   \   00007B   12....       LCALL     ?XSTACK_DISP102_8
   \   00007E   AA..         MOV       R2,?V6
   \   000080   AB..         MOV       R3,?V7
   \   000082   EE           MOV       A,R6
   \   000083   F9           MOV       R1,A
   \   000084   12....       LCALL     `??CBCMAC_buf_encrypt::?relay`; Banked call to: CBCMAC_buf_encrypt
    507            
    508            // Шифруем MAC
    509            uint8_t CTR_IV[16];
    510            memcpy(CTR_IV, nonce, 16);
   \   000087                ; Setup parameters for call to function memcpy
   \   000087   75..10       MOV       ?V2,#0x10
   \   00008A   75..00       MOV       ?V3,#0x0
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   FC           MOV       R4,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FD           MOV       R5,A
   \   00009C   7406         MOV       A,#0x6
   \   00009E   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A1   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
    511            CTR_IV[0] = 0x01; // Флаг режима CTR
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   F0           MOVX      @DPTR,A
    512            CTR_IV[15] = 0;   // Значение счетчика
   \   0000B1   7413         MOV       A,#0x13
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   7400         MOV       A,#0x0
   \   0000B8   F0           MOVX      @DPTR,A
    513            CTR_enc_decrypt(true, mac, mac, key, CTR_IV, 16);
   \   0000B9                ; Setup parameters for call to function CTR_enc_decrypt
   \   0000B9   7404         MOV       A,#0x4
   \   0000BB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BE   88..         MOV       ?V2,R0
   \   0000C0   89..         MOV       ?V3,R1
   \   0000C2   78..         MOV       R0,#?V2
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   85....       MOV       ?V2,?V6
   \   0000CA   85....       MOV       ?V3,?V7
   \   0000CD   78..         MOV       R0,#?V2
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D2   7910         MOV       R1,#0x10
   \   0000D4   7418         MOV       A,#0x18
   \   0000D6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D9   7418         MOV       A,#0x18
   \   0000DB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DE   D2F0         SETB      B.0
   \   0000E0   12....       LCALL     `??CTR_enc_decrypt::?relay`; Banked call to: CTR_enc_decrypt
   \   0000E3   7404         MOV       A,#0x4
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
    514            
    515            // Шифруем текст. он имеет размер 'c' и находится в буфере начиная с
    516            // dlen-c, dlen
    517            uint8_t ds = dlen - c; // Начало данных для шифрования
   \   0000E8   EE           MOV       A,R6
   \   0000E9   C3           CLR       C
   \   0000EA   95..         SUBB      A,?V0
   \   0000EC   FF           MOV       R7,A
    518            
    519            // 0x0F & (16 - (dlen & 0x0f)) оставляет числа от 0 до 15  
    520            memset(buf+dlen, 0x00, 0x0F & (16 - (dlen & 0x0f)) ); // Дополняем нулями
   \   0000ED                ; Setup parameters for call to function memset
   \   0000ED   EE           MOV       A,R6
   \   0000EE   F8           MOV       R0,A
   \   0000EF   7900         MOV       R1,#0x0
   \   0000F1   7410         MOV       A,#0x10
   \   0000F3   C3           CLR       C
   \   0000F4   98           SUBB      A,R0
   \   0000F5   F8           MOV       R0,A
   \   0000F6   7400         MOV       A,#0x0
   \   0000F8   99           SUBB      A,R1
   \   0000F9   F9           MOV       R1,A
   \   0000FA   E8           MOV       A,R0
   \   0000FB   540F         ANL       A,#0xf
   \   0000FD   F5..         MOV       ?V2,A
   \   0000FF   E9           MOV       A,R1
   \   000100   5400         ANL       A,#0x0
   \   000102   F5..         MOV       ?V3,A
   \   000104   78..         MOV       R0,#?V2
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   7C00         MOV       R4,#0x0
   \   00010B   7D00         MOV       R5,#0x0
   \   00010D   EE           MOV       A,R6
   \   00010E   F8           MOV       R0,A
   \   00010F   7900         MOV       R1,#0x0
   \   000111   74..         MOV       A,#??buf & 0xff
   \   000113   28           ADD       A,R0
   \   000114   FA           MOV       R2,A
   \   000115   74..         MOV       A,#(??buf >> 8) & 0xff
   \   000117   39           ADDC      A,R1
   \   000118   FB           MOV       R3,A
   \   000119   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   00011C   7402         MOV       A,#0x2
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
    521            CTR_IV[15] = 1; // Счетчик CTR
   \   000121   7413         MOV       A,#0x13
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   7401         MOV       A,#0x1
   \   000128   F0           MOVX      @DPTR,A
    522            CTR_enc_decrypt(true, &buf[ds], &buf[ds], key, CTR_IV, c); // Шифруем
   \   000129                ; Setup parameters for call to function CTR_enc_decrypt
   \   000129   7404         MOV       A,#0x4
   \   00012B   12....       LCALL     ?XSTACK_DISP100_8
   \   00012E   88..         MOV       ?V2,R0
   \   000130   89..         MOV       ?V3,R1
   \   000132   78..         MOV       R0,#?V2
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000137   85....       MOV       ?V2,?V6
   \   00013A   85....       MOV       ?V3,?V7
   \   00013D   78..         MOV       R0,#?V2
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   A9..         MOV       R1,?V0
   \   000144   EF           MOV       A,R7
   \   000145   FA           MOV       R2,A
   \   000146   7B00         MOV       R3,#0x0
   \   000148   74..         MOV       A,#??buf & 0xff
   \   00014A   2A           ADD       A,R2
   \   00014B   FC           MOV       R4,A
   \   00014C   74..         MOV       A,#(??buf >> 8) & 0xff
   \   00014E   3B           ADDC      A,R3
   \   00014F   FD           MOV       R5,A
   \   000150   EF           MOV       A,R7
   \   000151   FA           MOV       R2,A
   \   000152   7B00         MOV       R3,#0x0
   \   000154   74..         MOV       A,#??buf & 0xff
   \   000156   2A           ADD       A,R2
   \   000157   FA           MOV       R2,A
   \   000158   74..         MOV       A,#(??buf >> 8) & 0xff
   \   00015A   3B           ADDC      A,R3
   \   00015B   FB           MOV       R3,A
   \   00015C   D2F0         SETB      B.0
   \   00015E   12....       LCALL     `??CTR_enc_decrypt::?relay`; Banked call to: CTR_enc_decrypt
   \   000161   7404         MOV       A,#0x4
   \   000163   12....       LCALL     ?DEALLOC_XSTACK8
    523            
    524            // Заполняем буфер буфер src. src[0,f] это данные авторизации. 
    525            // src[f, f+c] это шифрованные данные.
    526            memcpy(&src[f], &buf[ds], c); 
   \   000166                ; Setup parameters for call to function memcpy
   \   000166   E5..         MOV       A,?V0
   \   000168   F5..         MOV       ?V2,A
   \   00016A   75..00       MOV       ?V3,#0x0
   \   00016D   78..         MOV       R0,#?V2
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000172   EF           MOV       A,R7
   \   000173   F8           MOV       R0,A
   \   000174   7900         MOV       R1,#0x0
   \   000176   74..         MOV       A,#??buf & 0xff
   \   000178   28           ADD       A,R0
   \   000179   FC           MOV       R4,A
   \   00017A   74..         MOV       A,#(??buf >> 8) & 0xff
   \   00017C   39           ADDC      A,R1
   \   00017D   FD           MOV       R5,A
   \   00017E   E5..         MOV       A,?V4
   \   000180   F8           MOV       R0,A
   \   000181   7900         MOV       R1,#0x0
   \   000183   7404         MOV       A,#0x4
   \   000185   12....       LCALL     ?XSTACK_DISP0_8
   \   000188   E0           MOVX      A,@DPTR
   \   000189   28           ADD       A,R0
   \   00018A   FA           MOV       R2,A
   \   00018B   A3           INC       DPTR
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   39           ADDC      A,R1
   \   00018E   FB           MOV       R3,A
   \   00018F   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000192   7402         MOV       A,#0x2
   \   000194   12....       LCALL     ?DEALLOC_XSTACK8
    527            memcpy(MIC, mac, lm);
   \   000197                ; Setup parameters for call to function memcpy
   \   000197   E5..         MOV       A,?V1
   \   000199   F5..         MOV       ?V2,A
   \   00019B   75..00       MOV       ?V3,#0x0
   \   00019E   78..         MOV       R0,#?V2
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   7416         MOV       A,#0x16
   \   0001A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001A8   7436         MOV       A,#0x36
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   FA           MOV       R2,A
   \   0001AF   A3           INC       DPTR
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   FB           MOV       R3,A
   \   0001B2   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0001B5   7402         MOV       A,#0x2
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
    528            
    529            //https://github.com/zhaohengyi/CC2530Example/blob/
    530            //master/source/components/radios/cc2530/hal_rf_security.c
    531          }
   \   0001BA   7424         MOV       A,#0x24
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   7F08         MOV       R7,#0x8
   \   0001C1   02....       LJMP      ?BANKED_LEAVE_XDATA
    532          
    533          /**
    534          @brief Дешифрует данные с проверкой MIC
    535          @param[in] src Указатель на данные подлежащии шифрованию
    536          @param[in] len Размер данных
    537          @param[in] с Количество байт для шифрования
    538          @param[in] f Количество байт для авторизации
    539          @param[in] m Размер MIC (m=1,2,3 l(m) = 4,8,16 байт)
    540          @param[in] iv  Указатель на вектор иницилизации. 16 байт 
    541          @param[in] len Длинна данных
    542          @param[in,out] MIC Указатель на массив соответсвующий длинне (4,8,16 байт)
    543          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          bool AES_CCMDecrypt( uint8_t *src, uint8_t c, uint8_t f, uint8_t m, uint8_t *MIC)
   \                     AES_CCMDecrypt:
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV       A,#-0x34
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   FF           MOV       R7,A
   \   000016   8C..         MOV       ?V4,R4
   \   000018   8D..         MOV       ?V5,R5
    546            uint8_t *key = (uint8_t*)MODEL.AES.CCM_KEY;  
   \   00001A   75....       MOV       ?V6,#(MODEL + 51) & 0xff
   \   00001D   75....       MOV       ?V7,#((MODEL + 51) >> 8) & 0xff
    547            uint8_t *nonce = (uint8_t*)MODEL.AES.CCM_IV;  
   \   000020   85..82       MOV       DPL,?XSP + 0
   \   000023   85..83       MOV       DPH,?XSP + 1
   \   000026   74..         MOV       A,#(MODEL + 67) & 0xff
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   74..         MOV       A,#((MODEL + 67) >> 8) & 0xff
   \   00002C   F0           MOVX      @DPTR,A
    548            uint8_t lm = MIC_2_MICLEN(m);
   \   00002D   7401         MOV       A,#0x1
   \   00002F   C0E0         PUSH      A
   \   000031   7403         MOV       A,#0x3
   \   000033   55..         ANL       A,?V5
   \   000035   2401         ADD       A,#0x1
   \   000037   F8           MOV       R0,A
   \   000038   D0E0         POP       A
   \   00003A   B80002       CJNE      R0,#0x0,??AES_CCMDecrypt_0
   \   00003D   8004         SJMP      ??AES_CCMDecrypt_1
   \                     ??AES_CCMDecrypt_0:
   \   00003F   C3           CLR       C
   \   000040   33           RLC       A
   \   000041   D8FC         DJNZ      R0,??AES_CCMDecrypt_0
   \                     ??AES_CCMDecrypt_1:
   \   000043   54FC         ANL       A,#0xfc
   \   000045   F5..         MOV       ?V1,A
    549            
    550            // Расшифровываем MAC
    551            uint8_t mac[16]; // Расшифрованый мак
    552            uint8_t CTR_IV[16];
    553            memcpy(CTR_IV, nonce, 16);
   \   000047                ; Setup parameters for call to function memcpy
   \   000047   75..10       MOV       ?V2,#0x10
   \   00004A   75..00       MOV       ?V3,#0x0
   \   00004D   78..         MOV       R0,#?V2
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   7402         MOV       A,#0x2
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FC           MOV       R4,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FD           MOV       R5,A
   \   00005C   7406         MOV       A,#0x6
   \   00005E   12....       LCALL     ?XSTACK_DISP101_8
   \   000061   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    554            CTR_IV[0] = 0x01; // Флаг режима CTR
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   7401         MOV       A,#0x1
   \   000070   F0           MOVX      @DPTR,A
    555            CTR_IV[15] = 0;   // Значение счетчика
   \   000071   7413         MOV       A,#0x13
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   7400         MOV       A,#0x0
   \   000078   F0           MOVX      @DPTR,A
    556            CTR_enc_decrypt(false, MIC, mac, key, CTR_IV, lm);  
   \   000079                ; Setup parameters for call to function CTR_enc_decrypt
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?XSTACK_DISP100_8
   \   00007E   88..         MOV       ?V2,R0
   \   000080   89..         MOV       ?V3,R1
   \   000082   78..         MOV       R0,#?V2
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   78..         MOV       R0,#?V6
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   A9..         MOV       R1,?V1
   \   00008E   7428         MOV       A,#0x28
   \   000090   12....       LCALL     ?XSTACK_DISP102_8
   \   000093   7448         MOV       A,#0x48
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E0           MOVX      A,@DPTR
   \   000099   FA           MOV       R2,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FB           MOV       R3,A
   \   00009D   C2F0         CLR       B.0
   \   00009F   12....       LCALL     `??CTR_enc_decrypt::?relay`; Banked call to: CTR_enc_decrypt
   \   0000A2   7404         MOV       A,#0x4
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
    557            
    558            // Генерируем данные для авторизации
    559            uint8_t dlen = generateAuthData(src, nonce, c, f, lm);
   \   0000A7                ; Setup parameters for call to function generateAuthData
   \   0000A7   E5..         MOV       A,?V1
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E5..         MOV       A,?V4
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   EF           MOV       A,R7
   \   0000BA   F9           MOV       R1,A
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   FC           MOV       R4,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   FD           MOV       R5,A
   \   0000C5   7404         MOV       A,#0x4
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   FA           MOV       R2,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   FB           MOV       R3,A
   \   0000CF   12....       LCALL     `??generateAuthData::?relay`; Banked call to: generateAuthData
   \   0000D2   7402         MOV       A,#0x2
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV       A,R1
   \   0000D8   FE           MOV       R6,A
    560            
    561            // Дешифруем текст. он имеет размер 'c' и находится в буфере начиная с
    562            // dlen-c, dlen
    563            uint8_t ds = dlen - c; // Начало данных для дешифрования
   \   0000D9   EE           MOV       A,R6
   \   0000DA   C3           CLR       C
   \   0000DB   9F           SUBB      A,R7
   \   0000DC   F5..         MOV       ?V0,A
    564            
    565            // 0x0F & (16 - (dlen & 0x0f)) оставляет числа от 0 до 15  
    566            memset(buf+dlen, 0x00, 0x0F & (16 - (dlen & 0x0f)) ); // Дополняем нулями
   \   0000DE                ; Setup parameters for call to function memset
   \   0000DE   EE           MOV       A,R6
   \   0000DF   F8           MOV       R0,A
   \   0000E0   7900         MOV       R1,#0x0
   \   0000E2   7410         MOV       A,#0x10
   \   0000E4   C3           CLR       C
   \   0000E5   98           SUBB      A,R0
   \   0000E6   F8           MOV       R0,A
   \   0000E7   7400         MOV       A,#0x0
   \   0000E9   99           SUBB      A,R1
   \   0000EA   F9           MOV       R1,A
   \   0000EB   E8           MOV       A,R0
   \   0000EC   540F         ANL       A,#0xf
   \   0000EE   F5..         MOV       ?V2,A
   \   0000F0   E9           MOV       A,R1
   \   0000F1   5400         ANL       A,#0x0
   \   0000F3   F5..         MOV       ?V3,A
   \   0000F5   78..         MOV       R0,#?V2
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   7C00         MOV       R4,#0x0
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   EE           MOV       A,R6
   \   0000FF   F8           MOV       R0,A
   \   000100   7900         MOV       R1,#0x0
   \   000102   74..         MOV       A,#??buf & 0xff
   \   000104   28           ADD       A,R0
   \   000105   FA           MOV       R2,A
   \   000106   74..         MOV       A,#(??buf >> 8) & 0xff
   \   000108   39           ADDC      A,R1
   \   000109   FB           MOV       R3,A
   \   00010A   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
    567            CTR_IV[15] = 1; // Счетчик CTR
   \   000112   7413         MOV       A,#0x13
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   7401         MOV       A,#0x1
   \   000119   F0           MOVX      @DPTR,A
    568            CTR_enc_decrypt(false, &buf[ds], &buf[ds], key, CTR_IV, c); // Дешифруем
   \   00011A                ; Setup parameters for call to function CTR_enc_decrypt
   \   00011A   7404         MOV       A,#0x4
   \   00011C   12....       LCALL     ?XSTACK_DISP100_8
   \   00011F   88..         MOV       ?V2,R0
   \   000121   89..         MOV       ?V3,R1
   \   000123   78..         MOV       R0,#?V2
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   85....       MOV       ?V2,?V6
   \   00012B   85....       MOV       ?V3,?V7
   \   00012E   78..         MOV       R0,#?V2
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   EF           MOV       A,R7
   \   000134   F9           MOV       R1,A
   \   000135   E5..         MOV       A,?V0
   \   000137   FA           MOV       R2,A
   \   000138   7B00         MOV       R3,#0x0
   \   00013A   74..         MOV       A,#??buf & 0xff
   \   00013C   2A           ADD       A,R2
   \   00013D   FC           MOV       R4,A
   \   00013E   74..         MOV       A,#(??buf >> 8) & 0xff
   \   000140   3B           ADDC      A,R3
   \   000141   FD           MOV       R5,A
   \   000142   E5..         MOV       A,?V0
   \   000144   FA           MOV       R2,A
   \   000145   7B00         MOV       R3,#0x0
   \   000147   74..         MOV       A,#??buf & 0xff
   \   000149   2A           ADD       A,R2
   \   00014A   FA           MOV       R2,A
   \   00014B   74..         MOV       A,#(??buf >> 8) & 0xff
   \   00014D   3B           ADDC      A,R3
   \   00014E   FB           MOV       R3,A
   \   00014F   C2F0         CLR       B.0
   \   000151   12....       LCALL     `??CTR_enc_decrypt::?relay`; Banked call to: CTR_enc_decrypt
   \   000154   7404         MOV       A,#0x4
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
    569            
    570            uint8_t new_mac[16]; // мак полученный в ходе рашифровки сообщения
    571            CBCMAC_buf_encrypt(dlen, key, new_mac);
   \   000159                ; Setup parameters for call to function CBCMAC_buf_encrypt
   \   000159   7414         MOV       A,#0x14
   \   00015B   12....       LCALL     ?XSTACK_DISP102_8
   \   00015E   AA..         MOV       R2,?V6
   \   000160   AB..         MOV       R3,?V7
   \   000162   EE           MOV       A,R6
   \   000163   F9           MOV       R1,A
   \   000164   12....       LCALL     `??CBCMAC_buf_encrypt::?relay`; Banked call to: CBCMAC_buf_encrypt
    572            
    573            // Проверяем что маки совпадают, значит дешифровано верно
    574            bool mac_equal = true;
   \   000167   D2..         SETB      ?VB.0
    575            for (uint8_t i = 0 ; i < lm ; i++)
   \   000169   7A00         MOV       R2,#0x0
   \   00016B   EA           MOV       A,R2
   \   00016C   C3           CLR       C
   \   00016D   95..         SUBB      A,?V1
   \   00016F   502E         JNC       ??AES_CCMDecrypt_2
    576            {
    577              if (mac[i] != new_mac[i])
   \   000171   EA           MOV       A,R2
   \   000172   F8           MOV       R0,A
   \   000173   7900         MOV       R1,#0x0
   \   000175   7424         MOV       A,#0x24
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   E582         MOV       A,DPL
   \   00017C   28           ADD       A,R0
   \   00017D   F582         MOV       DPL,A
   \   00017F   E583         MOV       A,DPH
   \   000181   39           ADDC      A,R1
   \   000182   F583         MOV       DPH,A
   \   000184   E0           MOVX      A,@DPTR
   \   000185   FB           MOV       R3,A
   \   000186   EA           MOV       A,R2
   \   000187   F8           MOV       R0,A
   \   000188   7900         MOV       R1,#0x0
   \   00018A   7414         MOV       A,#0x14
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   E582         MOV       A,DPL
   \   000191   28           ADD       A,R0
   \   000192   F582         MOV       DPL,A
   \   000194   E583         MOV       A,DPH
   \   000196   39           ADDC      A,R1
   \   000197   F583         MOV       DPH,A
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   6B           XRL       A,R3
   \   00019B   6002         JZ        ??AES_CCMDecrypt_2
    578              mac_equal = false;
   \   00019D   C2..         CLR       ?VB.0
    579              break;
    580            }
    581            
    582            // Выходим если MACи не совпали  
    583            if (!mac_equal)
   \                     ??AES_CCMDecrypt_2:
   \   00019F   A2..         MOV       C,?VB.0
   \   0001A1   4003         JC        ??AES_CCMDecrypt_3
    584              return false;
   \   0001A3   C3           CLR       C
   \   0001A4   8032         SJMP      ??AES_CCMDecrypt_4
    585            
    586            // Копируем  расшифрованные данные
    587            memcpy(&src[f], &buf[ds], c); 
   \                     ??AES_CCMDecrypt_3:
   \   0001A6                ; Setup parameters for call to function memcpy
   \   0001A6   EF           MOV       A,R7
   \   0001A7   F5..         MOV       ?V2,A
   \   0001A9   75..00       MOV       ?V3,#0x0
   \   0001AC   78..         MOV       R0,#?V2
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   E5..         MOV       A,?V0
   \   0001B3   F8           MOV       R0,A
   \   0001B4   7900         MOV       R1,#0x0
   \   0001B6   74..         MOV       A,#??buf & 0xff
   \   0001B8   28           ADD       A,R0
   \   0001B9   FC           MOV       R4,A
   \   0001BA   74..         MOV       A,#(??buf >> 8) & 0xff
   \   0001BC   39           ADDC      A,R1
   \   0001BD   FD           MOV       R5,A
   \   0001BE   E5..         MOV       A,?V4
   \   0001C0   F8           MOV       R0,A
   \   0001C1   7900         MOV       R1,#0x0
   \   0001C3   7404         MOV       A,#0x4
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   28           ADD       A,R0
   \   0001CA   FA           MOV       R2,A
   \   0001CB   A3           INC       DPTR
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   39           ADDC      A,R1
   \   0001CE   FB           MOV       R3,A
   \   0001CF   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   0001D2   7402         MOV       A,#0x2
   \   0001D4   12....       LCALL     ?DEALLOC_XSTACK8
    588            return true;
   \   0001D7   D3           SETB      C
   \                     ??AES_CCMDecrypt_4:
   \   0001D8   7434         MOV       A,#0x34
   \   0001DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DD   7F08         MOV       R7,#0x8
   \   0001DF   02....       LJMP      ?BANKED_LEAVE_XDATA
    589          }
E:\Neocore\Hardware\STACK_CORE_SRC\cpu.c
      1          #include "action_manager.h"
      2          #include "ioCC2530.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);   
      9           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          module_s CPU_MODULE = {ALIAS(HW_Init)};
   \                     CPU_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for CPU_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static void HW_Init(void){
   \                     ??HW_Init_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     13            /* Сбрасываем бит OSC32K, будет выбран 32.768 кварц */
     14            CLKCONCMD &= ~(1<<7); 
   \   000000   53C67F       ANL       0xc6,#0x7f
     15            /* Ждем пока бит не станет 0 */
     16            while (CLKCONSTA & (1<<7)); 
   \                     ??HW_Init_8:
   \   000003   E59E         MOV       A,0x9e
   \   000005   A2E7         MOV       C,0xE0 /* A   */.7
   \   000007   40FA         JC        ??HW_Init_8
     17            /* Переходим на 32 Мгц */
     18            CLKCONCMD = 0;// (1<<3);
   \   000009   75C600       MOV       0xc6,#0x0
     19            while (CLKCONSTA&(1<<6));
   \                     ??HW_Init_9:
   \   00000C   E59E         MOV       A,0x9e
   \   00000E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000010   40FA         JC        ??HW_Init_9
     20            EA = 1;
   \   000012   D2AF         SETB      0xa8.7
     21          };  
   \   000014   02....       LJMP      ?BRET
   \   000017                REQUIRE CLKCONCMD
   \   000017                REQUIRE CLKCONSTA
   \   000017                REQUIRE _A_IEN0
E:\Neocore\Hardware\STACK_CORE_SRC\debug.c
      1          #include "debug.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);  
      9          static void uart_init(void);
     10           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     11          module_s DBG_MODULE = {ALIAS(HW_Init)};
   \                     DBG_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for DBG_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     12          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     13          static void HW_Init(void){
   \                     ??HW_Init_3:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     14          #ifndef DEBUG
     15            return;
     16          #endif
     17          #ifdef PRINT_TO_TERMINAL  
     18            uart_init();
   \   000004                ; Setup parameters for call to function uart_init
   \   000004   12....       LCALL     `??uart_init::?relay`; Banked call to: uart_init
     19          #endif
     20          #ifdef SIG_DEBUG
     21            P1DIR |=0x01;
   \   000007   43FE01       ORL       0xfe,#0x1
     22            P1_0 |= 0x01;  
   \   00000A   D290         SETB      0x90.0
     23          #endif
     24          };  
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   \   000013                REQUIRE P1DIR
   \   000013                REQUIRE _A_P1
     25          
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          void DBG_CORE_HALT(void){
   \                     DBG_CORE_HALT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     28            while(1);
   \                     ??DBG_CORE_HALT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_HALT_0
     29          }
     30          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     31          void DBG_CORE_FAULT(void){
   \                     DBG_CORE_FAULT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     32            while(1);
   \                     ??DBG_CORE_FAULT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_FAULT_0
     33          }
     34          
     35          // Настройка порта uart для отладки

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          static void uart_init(void){
   \                     ??uart_init:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     37            // Выбор расположения UART на выводах
     38            char U0CFG = 0; // 0={TX=P0_3, RX=P0_2
   \   000000   7800         MOV       R0,#0x0
     39            PERCFG |= (U0CFG<<0); 
   \   000002   E8           MOV       A,R0
   \   000003   42F1         ORL       0xf1,A
     40            // U0UCR регистр настройки режима uart. меня устраивает по умолчанию
     41            U0CSR = (1<<7); // Выбираем режим uart  
   \   000005   758680       MOV       0x86,#-0x80
     42            // Настройка скорости передачи данных на 2М  
     43            U0BAUD = 0;  // табличные значения из pdf
   \   000008   75C200       MOV       0xc2,#0x0
     44            U0GCR =  16;
   \   00000B   75C510       MOV       0xc5,#0x10
     45            // Включаем альтернативные функции выводов
     46            P0SEL = (1<<2)|(1<<3);
   \   00000E   75F30C       MOV       0xf3,#0xc
     47            U0CSR |= (1<<6);
   \   000011   438640       ORL       0x86,#0x40
     48          }
   \   000014   02....       LJMP      ?BRET
   \   000017                REQUIRE PERCFG
   \   000017                REQUIRE U0CSR
   \   000017                REQUIRE U0BAUD
   \   000017                REQUIRE U0GCR
   \   000017                REQUIRE P0SEL
     49          
     50          #ifdef PRINT_TO_TERMINAL 
     51          #include <yfuns.h>
     52          _STD_BEGIN
     53          #pragma module_name = "?__write"
     54          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          int MyLowLevelPutchar(int x){
   \                     MyLowLevelPutchar:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     56            while( U0CSR&(1<<0));
   \                     ??MyLowLevelPutchar_0:
   \   000000   E586         MOV       A,0x86
   \   000002   A2E0         MOV       C,0xE0 /* A   */.0
   \   000004   40FA         JC        ??MyLowLevelPutchar_0
     57            U0DBUF = x;
   \   000006   EA           MOV       A,R2
   \   000007   F5C1         MOV       0xc1,A
     58            return x;
   \   000009   02....       LJMP      ?BRET
   \   00000C                REQUIRE U0CSR
   \   00000C                REQUIRE U0DBUF
     59          }
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          size_t __write(int handle, const unsigned char * buffer, size_t size){
   \                     __write:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   7410         MOV       A,#0x10
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
     62            /* Remove the #if #endif pair to enable the implementation */
     63            size_t nChars = 0;
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   75..00       MOV       ?V1,#0x0
     64            if (buffer == 0)  {
   \   00001F   EE           MOV       A,R6
   \   000020   4F           ORL       A,R7
   \   000021   7006         JNZ       ??__write_0
     65              return 0;
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7B00         MOV       R3,#0x0
   \   000027   806E         SJMP      ??__write_1
     66            }
     67            /* This template only writes to "standard out" and "standard err",
     68             * for all other file handles it returns failure. */
     69            if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR)  {
   \                     ??__write_0:
   \   000029   7401         MOV       A,#0x1
   \   00002B   65..         XRL       A,?V6
   \   00002D   7004         JNZ       ??__write_2
   \   00002F   7400         MOV       A,#0x0
   \   000031   65..         XRL       A,?V7
   \                     ??__write_2:
   \   000033   6012         JZ        ??__write_3
   \   000035   7402         MOV       A,#0x2
   \   000037   65..         XRL       A,?V6
   \   000039   7004         JNZ       ??__write_4
   \   00003B   7400         MOV       A,#0x0
   \   00003D   65..         XRL       A,?V7
   \                     ??__write_4:
   \   00003F   6006         JZ        ??__write_3
     70              return _LLIO_ERROR;
   \   000041   7AFF         MOV       R2,#-0x1
   \   000043   7BFF         MOV       R3,#-0x1
   \   000045   8050         SJMP      ??__write_1
     71            }
     72          
     73            for (/* Empty */; size != 0; --size){
   \                     ??__write_3:
   \   000047   E5..         MOV       A,?V2
   \   000049   45..         ORL       A,?V3
   \   00004B   6046         JZ        ??__write_5
     74              if (MyLowLevelPutchar(*buffer++) < 0){
   \   00004D                ; Setup parameters for call to function MyLowLevelPutchar
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FA           MOV       R2,A
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??MyLowLevelPutchar::?relay`; Banked call to: MyLowLevelPutchar
   \   000058   8A..         MOV       ?V4,R2
   \   00005A   8B..         MOV       ?V5,R3
   \   00005C   A8..         MOV       R0,?V4
   \   00005E   A9..         MOV       R1,?V5
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   A3           INC       DPTR
   \   000065   AE82         MOV       R6,DPL
   \   000067   AF83         MOV       R7,DPH
   \   000069   C3           CLR       C
   \   00006A   E8           MOV       A,R0
   \   00006B   9400         SUBB      A,#0x0
   \   00006D   E9           MOV       A,R1
   \   00006E   9400         SUBB      A,#0x0
   \   000070   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000072   65D0         XRL       A,PSW
   \   000074   33           RLC       A
   \   000075   5006         JNC       ??__write_6
     75                return _LLIO_ERROR;
   \   000077   7AFF         MOV       R2,#-0x1
   \   000079   7BFF         MOV       R3,#-0x1
   \   00007B   801A         SJMP      ??__write_1
     76              }
     77              ++nChars;
   \                     ??__write_6:
   \   00007D   05..         INC       ?V0
   \   00007F   E5..         MOV       A,?V0
   \   000081   7002         JNZ       ??__write_7
   \   000083   05..         INC       ?V1
     78            }
   \                     ??__write_7:
   \   000085   E5..         MOV       A,?V2
   \   000087   24FF         ADD       A,#-0x1
   \   000089   F5..         MOV       ?V2,A
   \   00008B   E5..         MOV       A,?V3
   \   00008D   34FF         ADDC      A,#-0x1
   \   00008F   F5..         MOV       ?V3,A
   \   000091   80B4         SJMP      ??__write_3
     79            return nChars;
   \                     ??__write_5:
   \   000093   AA..         MOV       R2,?V0
   \   000095   AB..         MOV       R3,?V1
   \                     ??__write_1:
   \   000097   7F08         MOV       R7,#0x8
   \   000099   02....       LJMP      ?BANKED_LEAVE_XDATA
     80          }
     81          _STD_END
     82          
     83          #endif
     84          
E:\Neocore\Hardware\STACK_CORE_SRC\dma.c
      1          #include "dma.h"
      2          #include "ioCC2530.h"
      3          #include "action_manager.h"
      4          
      5          static void HW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      6          module_s DMA_MODULE = {ALIAS(HW_Init)};
   \                     DMA_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for DMA_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
      7          
      8            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          DMA_s DMA_CH[5];
   \                     DMA_CH:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z
     10          
     11          /**
     12          @brief Настройка DMA каналов.
     13          @detail Согласно документации каналы 1-4 идут последовательно
     14          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     15          static void HW_Init(void){
   \                     ??HW_Init_4:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     16              // Настроим канал 0 DMA для загрузки данных в AES
     17            uint16_t CONF_ADDR = (uint16_t)&DMA_CH[0];
   \   000000   78..         MOV       R0,#DMA_CH & 0xff
   \   000002   79..         MOV       R1,#(DMA_CH >> 8) & 0xff
     18            DMA0CFGH = CONF_ADDR >> 8;
   \   000004   E8           MOV       A,R0
   \   000005   FA           MOV       R2,A
   \   000006   E9           MOV       A,R1
   \   000007   FB           MOV       R3,A
   \   000008   E4           CLR       A
   \   000009   CB           XCH       A,R3
   \   00000A   FA           MOV       R2,A
   \   00000B   EA           MOV       A,R2
   \   00000C   F5D5         MOV       0xd5,A
     19            DMA0CFGL = CONF_ADDR & 0xFF;
   \   00000E   E8           MOV       A,R0
   \   00000F   F5D4         MOV       0xd4,A
     20            
     21            // Настроим канал 1 DMA для выгрузки данных из AES
     22            CONF_ADDR = (uint16_t)&DMA_CH[1];
   \   000011   78..         MOV       R0,#(DMA_CH + 8) & 0xff
   \   000013   79..         MOV       R1,#((DMA_CH + 8) >> 8) & 0xff
     23            DMA1CFGH = CONF_ADDR >> 8;
   \   000015   E8           MOV       A,R0
   \   000016   FA           MOV       R2,A
   \   000017   E9           MOV       A,R1
   \   000018   FB           MOV       R3,A
   \   000019   E4           CLR       A
   \   00001A   CB           XCH       A,R3
   \   00001B   FA           MOV       R2,A
   \   00001C   EA           MOV       A,R2
   \   00001D   F5D3         MOV       0xd3,A
     24            DMA1CFGL = CONF_ADDR & 0xFF;
   \   00001F   E8           MOV       A,R0
   \   000020   F5D2         MOV       0xd2,A
     25          }
   \   000022   02....       LJMP      ?BRET
   \   000025                REQUIRE DMA0CFGH
   \   000025                REQUIRE DMA0CFGL
   \   000025                REQUIRE DMA1CFGH
   \   000025                REQUIRE DMA1CFGL
E:\Neocore\Hardware\STACK_CORE_SRC\frame.c
      1          #include "action_manager.h"
      2          #include "frame.h"
      3          #include "debug.h"
      4          #include "global.h"
      5          #include "mem_utils.h"
      6          #include "mem_slots.h"
      7          
      8          /**
      9          @file Статическое хранение принятых пакетов
     10          */
     11          
     12          static void SW_Init(void); 
     13          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     14          module_s FR_MODULE = {ALIAS(SW_Init)};
   \                     FR_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for FR_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          static void SW_Init(void){ 
   \                     ??SW_Init_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     17          }; 
   \   000000   02....       LJMP      ?BRET
     18          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          struct frame* FR_create(){
   \                     FR_create:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     20            return (struct frame*)SL_alloc();
   \   000004                ; Setup parameters for call to function SL_alloc
   \   000004   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     21          };
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          bool FR_delete(struct frame *frame){
   \                     FR_delete:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     24            return SL_free((char*)frame);
   \   000009                ; Setup parameters for call to function SL_free
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   000010   7F01         MOV       R7,#0x1
   \   000012   02....       LJMP      ?BANKED_LEAVE_XDATA
     25          }
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          bool FR_add_header(struct frame* frame ,void *head, char len){
   \                     FR_add_header:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   89..         MOV       ?V4,R1
     28            int new_len = frame->len + len;
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FA           MOV       R2,A
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   E5..         MOV       A,?V4
   \   000020   F8           MOV       R0,A
   \   000021   7900         MOV       R1,#0x0
   \   000023   EA           MOV       A,R2
   \   000024   28           ADD       A,R0
   \   000025   FE           MOV       R6,A
   \   000026   EB           MOV       A,R3
   \   000027   39           ADDC      A,R1
   \   000028   FF           MOV       R7,A
     29            if (!(new_len < MAX_PAYLOAD_SIZE))
   \   000029   C3           CLR       C
   \   00002A   EE           MOV       A,R6
   \   00002B   947F         SUBB      A,#0x7f
   \   00002D   EF           MOV       A,R7
   \   00002E   9400         SUBB      A,#0x0
   \   000030   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000032   65D0         XRL       A,PSW
   \   000034   33           RLC       A
   \   000035   4004         JC        ??FR_add_header_0
     30              return false;
   \   000037   C3           CLR       C
   \   000038   02....       LJMP      ??FR_add_header_1 & 0xFFFF
     31            
     32            // Сдвинем данные на размер вставки при необходимости
     33            if (frame->len != 0)
   \                     ??FR_add_header_0:
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6045         JZ        ??FR_add_header_2
     34              MEMCPY(&frame->payload[len], frame->payload, len);
   \   000044   E5..         MOV       A,?V4
   \   000046   F8           MOV       R0,A
   \   000047   7900         MOV       R1,#0x0
   \   000049   E5..         MOV       A,?V0
   \   00004B   28           ADD       A,R0
   \   00004C   F8           MOV       R0,A
   \   00004D   E5..         MOV       A,?V1
   \   00004F   39           ADDC      A,R1
   \   000050   F9           MOV       R1,A
   \   000051   E8           MOV       A,R0
   \   000052   2415         ADD       A,#0x15
   \   000054   F8           MOV       R0,A
   \   000055   5001         JNC       ??FR_add_header_3
   \   000057   09           INC       R1
   \                     ??FR_add_header_3:
   \   000058   7405         MOV       A,#0x5
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E8           MOV       A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \   000061   F0           MOVX      @DPTR,A
   \   000062   E5..         MOV       A,?V0
   \   000064   2415         ADD       A,#0x15
   \   000066   F8           MOV       R0,A
   \   000067   E4           CLR       A
   \   000068   35..         ADDC      A,?V1
   \   00006A   F9           MOV       R1,A
   \   00006B   7407         MOV       A,#0x7
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E8           MOV       A,R0
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E9           MOV       A,R1
   \   000074   F0           MOVX      @DPTR,A
   \   000075   E5..         MOV       A,?V4
   \   000077   C0E0         PUSH      A
   \   000079   7409         MOV       A,#0x9
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081                ; Setup parameters for call to function MEM_memcpy
   \   000081   7405         MOV       A,#0x5
   \   000083   12....       LCALL     ?XSTACK_DISP101_8
   \   000086   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     35            
     36            // Скопируем новые данные
     37            MEMCPY(frame->payload, head, len);
   \                     ??FR_add_header_2:
   \   000089   E5..         MOV       A,?V0
   \   00008B   2415         ADD       A,#0x15
   \   00008D   F8           MOV       R0,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V1
   \   000091   F9           MOV       R1,A
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E8           MOV       A,R0
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   E9           MOV       A,R1
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E5..         MOV       A,?V2
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E5..         MOV       A,?V3
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   E5..         MOV       A,?V4
   \   0000AB   C0E0         PUSH      A
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   D0E0         POP       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5                ; Setup parameters for call to function MEM_memcpy
   \   0000B5   AA..         MOV       R2,?XSP + 0
   \   0000B7   AB..         MOV       R3,?XSP + 1
   \   0000B9   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     38            frame->len = new_len;
   \   0000BC   EE           MOV       A,R6
   \   0000BD   C0E0         PUSH      A
   \   0000BF   85..82       MOV       DPL,?V0
   \   0000C2   85..83       MOV       DPH,?V1
   \   0000C5   D0E0         POP       A
   \   0000C7   F0           MOVX      @DPTR,A
     39            return true;
   \   0000C8   D3           SETB      C
   \                     ??FR_add_header_1:
   \   0000C9   740A         MOV       A,#0xa
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   7F05         MOV       R7,#0x5
   \   0000D0   02....       LJMP      ?BANKED_LEAVE_XDATA
     40          };
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          bool FR_del_header(struct frame* frame, char len){
   \                     FR_del_header:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
     43            if (len == 0 || len > frame->len )
   \   000010   E5..         MOV       A,?V0
   \   000012   600A         JZ        ??FR_del_header_0
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   C3           CLR       C
   \   00001A   95..         SUBB      A,?V0
   \   00001C   5004         JNC       ??FR_del_header_1
     44              return false;
   \                     ??FR_del_header_0:
   \   00001E   C3           CLR       C
   \   00001F   02....       LJMP      ??FR_del_header_2 & 0xFFFF
     45            MEMCPY(frame->payload, &frame->payload[len], len);
   \                     ??FR_del_header_1:
   \   000022   EE           MOV       A,R6
   \   000023   2415         ADD       A,#0x15
   \   000025   F8           MOV       R0,A
   \   000026   E4           CLR       A
   \   000027   3F           ADDC      A,R7
   \   000028   F9           MOV       R1,A
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E8           MOV       A,R0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
   \   000033   E5..         MOV       A,?V0
   \   000035   F8           MOV       R0,A
   \   000036   7900         MOV       R1,#0x0
   \   000038   EE           MOV       A,R6
   \   000039   28           ADD       A,R0
   \   00003A   F8           MOV       R0,A
   \   00003B   EF           MOV       A,R7
   \   00003C   39           ADDC      A,R1
   \   00003D   F9           MOV       R1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   2415         ADD       A,#0x15
   \   000041   F8           MOV       R0,A
   \   000042   5001         JNC       ??FR_del_header_3
   \   000044   09           INC       R1
   \                     ??FR_del_header_3:
   \   000045   7406         MOV       A,#0x6
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E8           MOV       A,R0
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   E9           MOV       A,R1
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   E5..         MOV       A,?V0
   \   000051   C0E0         PUSH      A
   \   000053   7408         MOV       A,#0x8
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   D0E0         POP       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B                ; Setup parameters for call to function MEM_memcpy
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     46            
     47            #ifdef FRAME_FOOTER_DEL
     48            MEMSET(&frame->payload[len], 0, len);
   \   000063   90....       MOV       DPTR,#`?<Constant {(char *)0, 0, 0}>`
   \   000066   AC..         MOV       R4,?XSP + 0
   \   000068   AD..         MOV       R5,?XSP + 1
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00006F   E5..         MOV       A,?V0
   \   000071   F8           MOV       R0,A
   \   000072   7900         MOV       R1,#0x0
   \   000074   EE           MOV       A,R6
   \   000075   28           ADD       A,R0
   \   000076   F8           MOV       R0,A
   \   000077   EF           MOV       A,R7
   \   000078   39           ADDC      A,R1
   \   000079   F9           MOV       R1,A
   \   00007A   E8           MOV       A,R0
   \   00007B   2415         ADD       A,#0x15
   \   00007D   F8           MOV       R0,A
   \   00007E   5001         JNC       ??FR_del_header_4
   \   000080   09           INC       R1
   \                     ??FR_del_header_4:
   \   000081   85..82       MOV       DPL,?XSP + 0
   \   000084   85..83       MOV       DPH,?XSP + 1
   \   000087   E8           MOV       A,R0
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   E9           MOV       A,R1
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   E5..         MOV       A,?V0
   \   00008E   C0E0         PUSH      A
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098                ; Setup parameters for call to function MEM_memset
   \   000098   AA..         MOV       R2,?XSP + 0
   \   00009A   AB..         MOV       R3,?XSP + 1
   \   00009C   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     49            #endif
     50            
     51            frame->len = frame->len - len;;
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   C3           CLR       C
   \   0000A5   95..         SUBB      A,?V0
   \   0000A7   F0           MOVX      @DPTR,A
     52            return true;
   \   0000A8   D3           SETB      C
   \                     ??FR_del_header_2:
   \   0000A9   7409         MOV       A,#0x9
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   7F01         MOV       R7,#0x1
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
     53          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 0, 0}>`:
   \   000000   0000         DW 0H
   \   000002   00           DB 0
   \   000003   00           DB 0
     54          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          int FR_busy(){
   \                     FR_busy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     56            return SL_busy();
   \   000004                ; Setup parameters for call to function SL_busy
   \   000004   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     57          }
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          int FR_available(){
   \                     FR_available:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     60            return SL_available();
   \   000004                ; Setup parameters for call to function SL_available
   \   000004   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     61          };
E:\Neocore\Hardware\STACK_CORE_SRC\led.c
      1          #include "action_manager.h"
      2          
      3          static void HW_Init(void);
      4          static void SW_Init(void);
      5          static void Cold_Start(void);
      6          static void Hot_Start(void);
      7          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          module_s LED_MODULE = {ALIAS(SW_Init), ALIAS(Cold_Start), 
   \                     LED_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for LED_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
      9            ALIAS(Hot_Start), ALIAS(HW_Init)};
     10          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static void HW_Init(void){};
   \                     ??HW_Init_5:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static void SW_Init(void){};
   \                     ??SW_Init_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     13          static void Cold_Start(void){};
   \                     ??Cold_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     14          static void Hot_Start(void){};
   \                     ??Hot_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
E:\Neocore\Hardware\STACK_CORE_SRC\llc.c
      1          #include "action_manager.h"
      2          #include "buffer.h"
      3          #include "stddef.h"
      4          #include "macros.h"
      5          #include "model.h"
      6          #include "debug.h"
      7          #include "radio.h"
      8          #include "mac.h"
      9          
     10          
     11          #define MAX_SLOTS 50
     12          
     13          #define RX_ALARM (1<<0)
     14          #define TX_ALARM (1<<1)
     15          
     16          static void SW_Init(void);
     17          static void Cold_Start(void);
     18          static void Hot_Start(void);
     19          static void IRQ_Init(void);
     20          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          module_s LLC_MODULE = {ALIAS(SW_Init), ALIAS(Cold_Start), 
   \                     LLC_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for LLC_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     22            ALIAS(Hot_Start), ALIAS(IRQ_Init)};
     23          
     24          struct action{
     25            channel_t rx;
     26            struct frame *frame_tx;
     27          };
     28          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     29          static struct action ACTIONSLOTS[MAX_SLOTS];
   \                     ??ACTIONSLOTS:
   \   000000                DS 150
   \   000096                REQUIRE __INIT_XDATA_Z
     30          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     31          static void IRQ_Init(void){
   \                     ??IRQ_Init_1:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     32            for_each_type(struct action, ACTIONSLOTS, slot){
   \   000004   78..         MOV       R0,#??ACTIONSLOTS & 0xff
   \   000006   79..         MOV       R1,#(??ACTIONSLOTS >> 8) & 0xff
   \                     ??IRQ_Init_3:
   \   000008   C3           CLR       C
   \   000009   E8           MOV       A,R0
   \   00000A   94..         SUBB      A,#(??ACTIONSLOTS + 150) & 0xff
   \   00000C   E9           MOV       A,R1
   \   00000D   94..         SUBB      A,#((??ACTIONSLOTS + 150) >> 8) & 0xff
   \   00000F   501C         JNC       ??IRQ_Init_4
     33              slot->rx = 0;
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
     34              slot->frame_tx = NULL;
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7400         MOV       A,#0x0
   \   000023   F0           MOVX      @DPTR,A
     35            }
   \   000024   E8           MOV       A,R0
   \   000025   2403         ADD       A,#0x3
   \   000027   F8           MOV       R0,A
   \   000028   50DE         JNC       ??IRQ_Init_3
   \   00002A   09           INC       R1
   \   00002B   80DB         SJMP      ??IRQ_Init_3
     36          };
   \                     ??IRQ_Init_4:
   \   00002D   D083         POP       DPH
   \   00002F   D082         POP       DPL
   \   000031   02....       LJMP      ?BRET
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void SW_Init(void){
   \                     ??SW_Init_3:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     39            for_each_type(struct action, ACTIONSLOTS, slot){
   \   000004   78..         MOV       R0,#??ACTIONSLOTS & 0xff
   \   000006   79..         MOV       R1,#(??ACTIONSLOTS >> 8) & 0xff
   \                     ??SW_Init_12:
   \   000008   C3           CLR       C
   \   000009   E8           MOV       A,R0
   \   00000A   94..         SUBB      A,#(??ACTIONSLOTS + 150) & 0xff
   \   00000C   E9           MOV       A,R1
   \   00000D   94..         SUBB      A,#((??ACTIONSLOTS + 150) >> 8) & 0xff
   \   00000F   501C         JNC       ??SW_Init_13
     40              slot->rx = 0;
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
     41              slot->frame_tx = NULL;
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7400         MOV       A,#0x0
   \   000023   F0           MOVX      @DPTR,A
     42            }
   \   000024   E8           MOV       A,R0
   \   000025   2403         ADD       A,#0x3
   \   000027   F8           MOV       R0,A
   \   000028   50DE         JNC       ??SW_Init_12
   \   00002A   09           INC       R1
   \   00002B   80DB         SJMP      ??SW_Init_12
     43          };
   \                     ??SW_Init_13:
   \   00002D   D083         POP       DPH
   \   00002F   D082         POP       DPL
   \   000031   02....       LJMP      ?BRET
     44          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     45          void LLC_open_slot(timeslot_t ts, channel_t ch){
   \                     LLC_open_slot:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     46            ASSERT(ts >= 1 && ts < MAX_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   6006         JZ        ??LLC_open_slot_0
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   9432         SUBB      A,#0x32
   \   000010   4025         JC        ??LLC_open_slot_1
   \                     ??LLC_open_slot_0:
   \   000012                ; Setup parameters for call to function printf
   \   000012   75..2E       MOV       ?V0,#0x2e
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75....       MOV       ?V0,#`?<Constant "llc.c">` & 0xff
   \   000020   75....       MOV       ?V1,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034                ; Setup parameters for call to function DBG_CORE_HALT
   \   000034   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     47            ASSERT(ch >= MIN_CH && ch <= MAX_CH);
   \                     ??LLC_open_slot_1:
   \   000037   EF           MOV       A,R7
   \   000038   C3           CLR       C
   \   000039   940B         SUBB      A,#0xb
   \   00003B   4006         JC        ??LLC_open_slot_2
   \   00003D   EF           MOV       A,R7
   \   00003E   C3           CLR       C
   \   00003F   941D         SUBB      A,#0x1d
   \   000041   4025         JC        ??LLC_open_slot_3
   \                     ??LLC_open_slot_2:
   \   000043                ; Setup parameters for call to function printf
   \   000043   75..2F       MOV       ?V0,#0x2f
   \   000046   75..00       MOV       ?V1,#0x0
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   75....       MOV       ?V0,#`?<Constant "llc.c">` & 0xff
   \   000051   75....       MOV       ?V1,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   00005B   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   00005D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065                ; Setup parameters for call to function DBG_CORE_HALT
   \   000065   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     48            ACTIONSLOTS[ts].rx = ch;
   \                     ??LLC_open_slot_3:
   \   000068   EF           MOV       A,R7
   \   000069   C0E0         PUSH      A
   \   00006B   EE           MOV       A,R6
   \   00006C   F8           MOV       R0,A
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   E8           MOV       A,R0
   \   000070   75F003       MOV       B,#0x3
   \   000073   A4           MUL       AB
   \   000074   C8           XCH       A,R0
   \   000075   AAF0         MOV       R2,B
   \   000077   75F000       MOV       B,#0x0
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   FA           MOV       R2,A
   \   00007D   75F003       MOV       B,#0x3
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   F9           MOV       R1,A
   \   000084   74..         MOV       A,#??ACTIONSLOTS & 0xff
   \   000086   28           ADD       A,R0
   \   000087   F582         MOV       DPL,A
   \   000089   74..         MOV       A,#(??ACTIONSLOTS >> 8) & 0xff
   \   00008B   39           ADDC      A,R1
   \   00008C   F583         MOV       DPH,A
   \   00008E   D0E0         POP       A
   \   000090   F0           MOVX      @DPTR,A
     49          }
   \   000091   7F02         MOV       R7,#0x2
   \   000093   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     51          void LLC_close_slot(timeslot_t ts){
   \                     LLC_close_slot:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
     52            ASSERT(ts >= 1 && ts < MAX_SLOTS);
   \   000007   EE           MOV       A,R6
   \   000008   6006         JZ        ??LLC_close_slot_0
   \   00000A   EE           MOV       A,R6
   \   00000B   C3           CLR       C
   \   00000C   9432         SUBB      A,#0x32
   \   00000E   4025         JC        ??LLC_close_slot_1
   \                     ??LLC_close_slot_0:
   \   000010                ; Setup parameters for call to function printf
   \   000010   75..34       MOV       ?V0,#0x34
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75....       MOV       ?V0,#`?<Constant "llc.c">` & 0xff
   \   00001E   75....       MOV       ?V1,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   000028   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   00002A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002D   7404         MOV       A,#0x4
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032                ; Setup parameters for call to function DBG_CORE_HALT
   \   000032   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     53            ACTIONSLOTS[ts].rx = 0;
   \                     ??LLC_close_slot_1:
   \   000035   EE           MOV       A,R6
   \   000036   F8           MOV       R0,A
   \   000037   7900         MOV       R1,#0x0
   \   000039   E8           MOV       A,R0
   \   00003A   75F003       MOV       B,#0x3
   \   00003D   A4           MUL       AB
   \   00003E   C8           XCH       A,R0
   \   00003F   AAF0         MOV       R2,B
   \   000041   75F000       MOV       B,#0x0
   \   000044   A4           MUL       AB
   \   000045   2A           ADD       A,R2
   \   000046   FA           MOV       R2,A
   \   000047   75F003       MOV       B,#0x3
   \   00004A   E9           MOV       A,R1
   \   00004B   A4           MUL       AB
   \   00004C   2A           ADD       A,R2
   \   00004D   F9           MOV       R1,A
   \   00004E   74..         MOV       A,#??ACTIONSLOTS & 0xff
   \   000050   28           ADD       A,R0
   \   000051   F582         MOV       DPL,A
   \   000053   74..         MOV       A,#(??ACTIONSLOTS >> 8) & 0xff
   \   000055   39           ADDC      A,R1
   \   000056   F583         MOV       DPH,A
   \   000058   7400         MOV       A,#0x0
   \   00005A   F0           MOVX      @DPTR,A
     54          }
   \   00005B   7F02         MOV       R7,#0x2
   \   00005D   02....       LJMP      ?BANKED_LEAVE_XDATA
     55          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     56          bool LLC_add_tx_frame(struct frame *frame){
   \                     LLC_add_tx_frame:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     57            ASSERT(frame);
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   7025         JNZ       ??LLC_add_tx_frame_0
   \   00000D                ; Setup parameters for call to function printf
   \   00000D   75..39       MOV       ?V0,#0x39
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#`?<Constant "llc.c">` & 0xff
   \   00001B   75....       MOV       ?V1,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   000025   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   000027   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F                ; Setup parameters for call to function DBG_CORE_HALT
   \   00002F   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     58            AES_StreamCoder(true, frame->payload, frame->payload, frame->len);    
   \                     ??LLC_add_tx_frame_0:
   \   000032                ; Setup parameters for call to function AES_StreamCoder
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   EE           MOV       A,R6
   \   000039   2415         ADD       A,#0x15
   \   00003B   FC           MOV       R4,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   EE           MOV       A,R6
   \   000040   2415         ADD       A,#0x15
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FB           MOV       R3,A
   \   000046   D2F0         SETB      B.0
   \   000048   12....       LCALL     `??AES_StreamCoder::?relay`; Banked call to: AES_StreamCoder
     59            if (BF_push_tx(frame))
   \   00004B                ; Setup parameters for call to function BF_push_tx
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   000052   5003         JNC       ??LLC_add_tx_frame_1
     60              return true;
   \   000054   D3           SETB      C
   \   000055   8001         SJMP      ??LLC_add_tx_frame_2
     61            return false;
   \                     ??LLC_add_tx_frame_1:
   \   000057   C3           CLR       C
   \                     ??LLC_add_tx_frame_2:
   \   000058   7F02         MOV       R7,#0x2
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
     62          }
     63          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          static void scheduler_tx(void){
   \                     ??scheduler_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
     65            void *cursor = BF_cursor_tx();
   \   000005                ; Setup parameters for call to function BF_cursor_tx
   \   000005   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   AE..         MOV       R6,?V0
   \   00000E   AF..         MOV       R7,?V1
     66            if (!cursor)
   \   000010   EE           MOV       A,R6
   \   000011   4F           ORL       A,R7
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??scheduler_tx_1 & 0xFFFF
     67              return;
     68            
     69            struct frame *frame = NULL;
   \   000017   75..00       MOV       ?V0,#0x0
   \   00001A   75..00       MOV       ?V1,#0x0
     70            while(cursor){
   \                     ??scheduler_tx_2:
   \   00001D   EE           MOV       A,R6
   \   00001E   4F           ORL       A,R7
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??scheduler_tx_1 & 0xFFFF
     71              frame = BF_content(cursor);
   \   000024                ; Setup parameters for call to function BF_content
   \   000024   EE           MOV       A,R6
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??BF_content::?relay`; Banked call to: BF_content
   \   00002B   8A..         MOV       ?V2,R2
   \   00002D   8B..         MOV       ?V3,R3
   \   00002F   85....       MOV       ?V0,?V2
   \   000032   85....       MOV       ?V1,?V3
     72              ASSERT(frame->meta.TS != 0);
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   7025         JNZ       ??scheduler_tx_3
   \   000043                ; Setup parameters for call to function printf
   \   000043   75..48       MOV       ?V2,#0x48
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   75....       MOV       ?V2,#`?<Constant "llc.c">` & 0xff
   \   000051   75....       MOV       ?V3,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000054   78..         MOV       R0,#?V2
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   00005B   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   00005D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065                ; Setup parameters for call to function DBG_CORE_HALT
   \   000065   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     73              // Если у нас есть что передавать, берем следующий кадр из буфера
     74              if (ACTIONSLOTS[frame->meta.TS].frame_tx){
   \                     ??scheduler_tx_3:
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   7900         MOV       R1,#0x0
   \   000077   E8           MOV       A,R0
   \   000078   75F003       MOV       B,#0x3
   \   00007B   A4           MUL       AB
   \   00007C   C8           XCH       A,R0
   \   00007D   AAF0         MOV       R2,B
   \   00007F   75F000       MOV       B,#0x0
   \   000082   A4           MUL       AB
   \   000083   2A           ADD       A,R2
   \   000084   FA           MOV       R2,A
   \   000085   75F003       MOV       B,#0x3
   \   000088   E9           MOV       A,R1
   \   000089   A4           MUL       AB
   \   00008A   2A           ADD       A,R2
   \   00008B   F9           MOV       R1,A
   \   00008C   74..         MOV       A,#(??ACTIONSLOTS + 1) & 0xff
   \   00008E   28           ADD       A,R0
   \   00008F   F582         MOV       DPL,A
   \   000091   74..         MOV       A,#((??ACTIONSLOTS + 1) >> 8) & 0xff
   \   000093   39           ADDC      A,R1
   \   000094   F583         MOV       DPH,A
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F9           MOV       R1,A
   \   00009B   E8           MOV       A,R0
   \   00009C   49           ORL       A,R1
   \   00009D   6012         JZ        ??scheduler_tx_4
     75                cursor = BF_cursor_next(cursor);
   \   00009F                ; Setup parameters for call to function BF_cursor_next
   \   00009F   EE           MOV       A,R6
   \   0000A0   FA           MOV       R2,A
   \   0000A1   EF           MOV       A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   0000A6   8A..         MOV       ?V2,R2
   \   0000A8   8B..         MOV       ?V3,R3
   \   0000AA   AE..         MOV       R6,?V2
   \   0000AC   AF..         MOV       R7,?V3
     76                continue;
   \   0000AE   02....       LJMP      ??scheduler_tx_2 & 0xFFFF
     77              }
     78              ACTIONSLOTS[frame->meta.TS].frame_tx = frame;
   \                     ??scheduler_tx_4:
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F8           MOV       R0,A
   \   0000BE   7900         MOV       R1,#0x0
   \   0000C0   E8           MOV       A,R0
   \   0000C1   75F003       MOV       B,#0x3
   \   0000C4   A4           MUL       AB
   \   0000C5   C8           XCH       A,R0
   \   0000C6   AAF0         MOV       R2,B
   \   0000C8   75F000       MOV       B,#0x0
   \   0000CB   A4           MUL       AB
   \   0000CC   2A           ADD       A,R2
   \   0000CD   FA           MOV       R2,A
   \   0000CE   75F003       MOV       B,#0x3
   \   0000D1   E9           MOV       A,R1
   \   0000D2   A4           MUL       AB
   \   0000D3   2A           ADD       A,R2
   \   0000D4   F9           MOV       R1,A
   \   0000D5   74..         MOV       A,#(??ACTIONSLOTS + 1) & 0xff
   \   0000D7   28           ADD       A,R0
   \   0000D8   F582         MOV       DPL,A
   \   0000DA   74..         MOV       A,#((??ACTIONSLOTS + 1) >> 8) & 0xff
   \   0000DC   39           ADDC      A,R1
   \   0000DD   F583         MOV       DPH,A
   \   0000DF   E5..         MOV       A,?V0
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E5..         MOV       A,?V1
   \   0000E5   F0           MOVX      @DPTR,A
     79              TM_SetAlarm(frame->meta.TS, TX_ALARM); 
   \   0000E6                ; Setup parameters for call to function TM_SetAlarm
   \   0000E6   7A02         MOV       R2,#0x2
   \   0000E8   85..82       MOV       DPL,?V0
   \   0000EB   85..83       MOV       DPH,?V1
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   F9           MOV       R1,A
   \   0000F5   12....       LCALL     `??TM_SetAlarm::?relay`; Banked call to: TM_SetAlarm
     80              void* cursor_for_delete = cursor;
   \   0000F8   8E..         MOV       ?V2,R6
   \   0000FA   8F..         MOV       ?V3,R7
     81              cursor = BF_cursor_next(cursor);
   \   0000FC                ; Setup parameters for call to function BF_cursor_next
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   EF           MOV       A,R7
   \   0000FF   FB           MOV       R3,A
   \   000100   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   000103   8A..         MOV       ?V4,R2
   \   000105   8B..         MOV       ?V5,R3
   \   000107   AE..         MOV       R6,?V4
   \   000109   AF..         MOV       R7,?V5
     82              if (!BF_remove_tx(cursor_for_delete))
   \   00010B                ; Setup parameters for call to function BF_remove_tx
   \   00010B   AA..         MOV       R2,?V2
   \   00010D   AB..         MOV       R3,?V3
   \   00010F   12....       LCALL     `??BF_remove_tx::?relay`; Banked call to: BF_remove_tx
   \   000112   5003         JNC       $+5
   \   000114   02....       LJMP      ??scheduler_tx_2 & 0xFFFF
     83                HALT("Error");
   \   000117                ; Setup parameters for call to function printf
   \   000117   75....       MOV       ?V4,#??__FUNCTION__ & 0xff
   \   00011A   75....       MOV       ?V5,#(??__FUNCTION__ >> 8) & 0xff
   \   00011D   78..         MOV       R0,#?V4
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000122   75..53       MOV       ?V4,#0x53
   \   000125   75..00       MOV       ?V5,#0x0
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012D   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   000130   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000133   78..         MOV       R0,#?V4
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000138   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00013A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00013C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00013F   7406         MOV       A,#0x6
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
   \   000144                ; Setup parameters for call to function printf
   \   000144   7A..         MOV       R2,#`?<Constant "Error">` & 0xff
   \   000146   7B..         MOV       R3,#(`?<Constant "Error">` >> 8) & 0xff
   \   000148   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00014B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00014B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \   00014E   02....       LJMP      ??scheduler_tx_2 & 0xFFFF
     84            }
     85          }
   \                     ??scheduler_tx_1:
   \   000151   7F06         MOV       R7,#0x6
   \   000153   02....       LJMP      ?BANKED_LEAVE_XDATA
     86          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          static void scheduler_rx(void){
   \                     ??scheduler_rx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     88            ASSERT(ACTIONSLOTS[0].rx == 0);
   \   000005   90....       MOV       DPTR,#??ACTIONSLOTS
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6025         JZ        ??scheduler_rx_1
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   75..58       MOV       ?V0,#0x58
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   75....       MOV       ?V0,#`?<Constant "llc.c">` & 0xff
   \   000019   75....       MOV       ?V1,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_3` & 0xff
   \   000023   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_3` >> 8) & 0xff
   \   000025   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000028   7404         MOV       A,#0x4
   \   00002A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002D                ; Setup parameters for call to function DBG_CORE_HALT
   \   00002D   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     89            for (char i = 1; i < MAX_SLOTS; i++)
   \                     ??scheduler_rx_1:
   \   000030   7E01         MOV       R6,#0x1
   \                     ??scheduler_rx_2:
   \   000032   EE           MOV       A,R6
   \   000033   C3           CLR       C
   \   000034   9432         SUBB      A,#0x32
   \   000036   5039         JNC       ??scheduler_rx_3
     90              if (ACTIONSLOTS[i].rx)
   \   000038   EE           MOV       A,R6
   \   000039   F8           MOV       R0,A
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   E8           MOV       A,R0
   \   00003D   75F003       MOV       B,#0x3
   \   000040   A4           MUL       AB
   \   000041   C8           XCH       A,R0
   \   000042   AAF0         MOV       R2,B
   \   000044   75F000       MOV       B,#0x0
   \   000047   A4           MUL       AB
   \   000048   2A           ADD       A,R2
   \   000049   FA           MOV       R2,A
   \   00004A   75F003       MOV       B,#0x3
   \   00004D   E9           MOV       A,R1
   \   00004E   A4           MUL       AB
   \   00004F   2A           ADD       A,R2
   \   000050   F9           MOV       R1,A
   \   000051   74..         MOV       A,#??ACTIONSLOTS & 0xff
   \   000053   28           ADD       A,R0
   \   000054   F582         MOV       DPL,A
   \   000056   74..         MOV       A,#(??ACTIONSLOTS >> 8) & 0xff
   \   000058   39           ADDC      A,R1
   \   000059   F583         MOV       DPH,A
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   6009         JZ        ??scheduler_rx_4
     91                TM_SetAlarm(i, RX_ALARM);
   \   00005E                ; Setup parameters for call to function TM_SetAlarm
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   EE           MOV       A,R6
   \   000061   F9           MOV       R1,A
   \   000062   12....       LCALL     `??TM_SetAlarm::?relay`; Banked call to: TM_SetAlarm
   \   000065   8007         SJMP      ??scheduler_rx_5
     92              else
     93                TM_ClrAlarm(i, RX_ALARM);
   \                     ??scheduler_rx_4:
   \   000067                ; Setup parameters for call to function TM_ClrAlarm
   \   000067   7A01         MOV       R2,#0x1
   \   000069   EE           MOV       A,R6
   \   00006A   F9           MOV       R1,A
   \   00006B   12....       LCALL     `??TM_ClrAlarm::?relay`; Banked call to: TM_ClrAlarm
   \                     ??scheduler_rx_5:
   \   00006E   0E           INC       R6
   \   00006F   80C1         SJMP      ??scheduler_rx_2
     94          }
   \                     ??scheduler_rx_3:
   \   000071   7F02         MOV       R7,#0x2
   \   000073   02....       LJMP      ?BANKED_LEAVE_XDATA
     95          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          static void Cold_Start(void){
   \                     ??Cold_Start_1:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     97          // Планировщик планирует на один суперфрейм в начале ts0
     98            if (MODEL.TM.timeslot != 0)
   \   000004   90....       MOV       DPTR,#MODEL + 13
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7006         JNZ       ??Cold_Start_4
     99              return;
    100            
    101            scheduler_tx();
   \   00000A                ; Setup parameters for call to function scheduler_tx
   \   00000A   12....       LCALL     `??scheduler_tx::?relay`; Banked call to: scheduler_tx
    102            scheduler_rx();
   \   00000D                ; Setup parameters for call to function scheduler_rx
   \   00000D   12....       LCALL     `??scheduler_rx::?relay`; Banked call to: scheduler_rx
    103          };
   \                     ??Cold_Start_4:
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          static inline void receive(){
   \                     ??receive:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    106            timeslot_t ts = MODEL.TM.timeslot;
   \   000005   90....       MOV       DPTR,#MODEL + 13
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
    107            MAC_Receive(ACTIONSLOTS[ts].rx);
   \   00000A                ; Setup parameters for call to function MAC_Receive
   \   00000A   EE           MOV       A,R6
   \   00000B   F8           MOV       R0,A
   \   00000C   7900         MOV       R1,#0x0
   \   00000E   E8           MOV       A,R0
   \   00000F   75F003       MOV       B,#0x3
   \   000012   A4           MUL       AB
   \   000013   C8           XCH       A,R0
   \   000014   AAF0         MOV       R2,B
   \   000016   75F000       MOV       B,#0x0
   \   000019   A4           MUL       AB
   \   00001A   2A           ADD       A,R2
   \   00001B   FA           MOV       R2,A
   \   00001C   75F003       MOV       B,#0x3
   \   00001F   E9           MOV       A,R1
   \   000020   A4           MUL       AB
   \   000021   2A           ADD       A,R2
   \   000022   F9           MOV       R1,A
   \   000023   74..         MOV       A,#??ACTIONSLOTS & 0xff
   \   000025   28           ADD       A,R0
   \   000026   F582         MOV       DPL,A
   \   000028   74..         MOV       A,#(??ACTIONSLOTS >> 8) & 0xff
   \   00002A   39           ADDC      A,R1
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F9           MOV       R1,A
   \   00002F   12....       LCALL     `??MAC_Receive::?relay`; Banked call to: MAC_Receive
    108          }
   \   000032   7F01         MOV       R7,#0x1
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
    109          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          static void transmite(void){
   \                     ??transmite:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    111            timeslot_t ts = MODEL.TM.timeslot;
   \   000005   90....       MOV       DPTR,#MODEL + 13
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V2,A
    112            struct frame *frame = ACTIONSLOTS[ts].frame_tx;
   \   00000B   E5..         MOV       A,?V2
   \   00000D   F8           MOV       R0,A
   \   00000E   7900         MOV       R1,#0x0
   \   000010   E8           MOV       A,R0
   \   000011   75F003       MOV       B,#0x3
   \   000014   A4           MUL       AB
   \   000015   C8           XCH       A,R0
   \   000016   AAF0         MOV       R2,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   2A           ADD       A,R2
   \   00001D   FA           MOV       R2,A
   \   00001E   75F003       MOV       B,#0x3
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2A           ADD       A,R2
   \   000024   F9           MOV       R1,A
   \   000025   74..         MOV       A,#(??ACTIONSLOTS + 1) & 0xff
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#((??ACTIONSLOTS + 1) >> 8) & 0xff
   \   00002C   39           ADDC      A,R1
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V1,A
    113            
    114            if (!frame)
   \   000036   E5..         MOV       A,?V0
   \   000038   45..         ORL       A,?V1
   \   00003A   7037         JNZ       ??transmite_1
    115              HALT("Error")
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   75....       MOV       ?V4,#??__FUNCTION___1 & 0xff
   \   00003F   75....       MOV       ?V5,#(??__FUNCTION___1 >> 8) & 0xff
   \   000042   78..         MOV       R0,#?V4
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   75..73       MOV       ?V4,#0x73
   \   00004A   75..00       MOV       ?V5,#0x0
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   000055   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00005F   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   000061   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000064   7406         MOV       A,#0x6
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069                ; Setup parameters for call to function printf
   \   000069   7A..         MOV       R2,#`?<Constant "Error">` & 0xff
   \   00006B   7B..         MOV       R3,#(`?<Constant "Error">` >> 8) & 0xff
   \   00006D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000070                ; Setup parameters for call to function DBG_CORE_HALT
   \   000070   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    116            
    117            // Неудачные передачи учитывает MAC_Send()
    118            int send_res = MAC_Send(frame);
   \                     ??transmite_1:
   \   000073                ; Setup parameters for call to function MAC_Send
   \   000073   AA..         MOV       R2,?V0
   \   000075   AB..         MOV       R3,?V1
   \   000077   12....       LCALL     `??MAC_Send::?relay`; Banked call to: MAC_Send
   \   00007A   8A..         MOV       ?V4,R2
   \   00007C   8B..         MOV       ?V5,R3
   \   00007E   AE..         MOV       R6,?V4
   \   000080   AF..         MOV       R7,?V5
    119            switch (send_res) {
   \   000082   8E..         MOV       ?V4,R6
   \   000084   8F..         MOV       ?V5,R7
   \   000086   78..         MOV       R0,#?V4
   \   000088   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for transmite>_0`:
   \   00008B   FFFF         DW        65535
   \   00008D   02           DB        2
   \   00008E   ....         DW        ??transmite_2
   \   000090   ....         DW        ??transmite_3
   \   000092   ....         DW        ??transmite_4
   \   000094   ....         DW        ??transmite_5
    120              case 1: { // удачная передача
    121                TM_ClrAlarm(ts, TX_ALARM);
   \                     ??transmite_5:
   \   000096                ; Setup parameters for call to function TM_ClrAlarm
   \   000096   7A02         MOV       R2,#0x2
   \   000098   A9..         MOV       R1,?V2
   \   00009A   12....       LCALL     `??TM_ClrAlarm::?relay`; Banked call to: TM_ClrAlarm
    122                ACTIONSLOTS[ts].frame_tx = NULL;
   \   00009D   E5..         MOV       A,?V2
   \   00009F   F8           MOV       R0,A
   \   0000A0   7900         MOV       R1,#0x0
   \   0000A2   E8           MOV       A,R0
   \   0000A3   75F003       MOV       B,#0x3
   \   0000A6   A4           MUL       AB
   \   0000A7   C8           XCH       A,R0
   \   0000A8   AAF0         MOV       R2,B
   \   0000AA   75F000       MOV       B,#0x0
   \   0000AD   A4           MUL       AB
   \   0000AE   2A           ADD       A,R2
   \   0000AF   FA           MOV       R2,A
   \   0000B0   75F003       MOV       B,#0x3
   \   0000B3   E9           MOV       A,R1
   \   0000B4   A4           MUL       AB
   \   0000B5   2A           ADD       A,R2
   \   0000B6   F9           MOV       R1,A
   \   0000B7   74..         MOV       A,#(??ACTIONSLOTS + 1) & 0xff
   \   0000B9   28           ADD       A,R0
   \   0000BA   F582         MOV       DPL,A
   \   0000BC   74..         MOV       A,#((??ACTIONSLOTS + 1) >> 8) & 0xff
   \   0000BE   39           ADDC      A,R1
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   7400         MOV       A,#0x0
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   7400         MOV       A,#0x0
   \   0000C7   F0           MOVX      @DPTR,A
    123                LOG_ON("Send success");
   \   0000C8                ; Setup parameters for call to function printf
   \   0000C8   75....       MOV       ?V4,#??__FUNCTION___1 & 0xff
   \   0000CB   75....       MOV       ?V5,#(??__FUNCTION___1 >> 8) & 0xff
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   75..7B       MOV       ?V4,#0x7b
   \   0000D6   75..00       MOV       ?V5,#0x0
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   0000E1   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   0000E4   78..         MOV       R0,#?V4
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   0000EB   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   0000ED   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000F0   7406         MOV       A,#0x6
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F5                ; Setup parameters for call to function printf
   \   0000F5   7A..         MOV       R2,#`?<Constant "Send success">` & 0xff
   \   0000F7   7B..         MOV       R3,#(`?<Constant "Send success">` >> 8) & 0xff
   \   0000F9   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000FC                ; Setup parameters for call to function printf
   \   0000FC   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000FE   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000100   12....       LCALL     `??printf::?relay`; Banked call to: printf
    124                break;
   \   000103   02....       LJMP      ??transmite_6 & 0xFFFF
    125              }
    126              case 0: { // неудачная передача. ACK не получен или CCA
    127                LOG_ON("CCA/ACK err")
   \                     ??transmite_4:
   \   000106                ; Setup parameters for call to function printf
   \   000106   75....       MOV       ?V4,#??__FUNCTION___1 & 0xff
   \   000109   75....       MOV       ?V5,#(??__FUNCTION___1 >> 8) & 0xff
   \   00010C   78..         MOV       R0,#?V4
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   75..7F       MOV       ?V4,#0x7f
   \   000114   75..00       MOV       ?V5,#0x0
   \   000117   78..         MOV       R0,#?V4
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   00011F   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000122   78..         MOV       R0,#?V4
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000127   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000129   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00012B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00012E   7406         MOV       A,#0x6
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133                ; Setup parameters for call to function printf
   \   000133   7A..         MOV       R2,#`?<Constant "CCA/ACK err">` & 0xff
   \   000135   7B..         MOV       R3,#(`?<Constant "CCA/ACK err">` >> 8) & 0xff
   \   000137   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00013A                ; Setup parameters for call to function printf
   \   00013A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00013C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00013E   12....       LCALL     `??printf::?relay`; Banked call to: printf
    128                break;
   \   000141   02....       LJMP      ??transmite_6 & 0xFFFF
    129              }
    130              case -1: { // Исчерпаны попытки отправки
    131                TM_ClrAlarm(ts, TX_ALARM);
   \                     ??transmite_3:
   \   000144                ; Setup parameters for call to function TM_ClrAlarm
   \   000144   7A02         MOV       R2,#0x2
   \   000146   A9..         MOV       R1,?V2
   \   000148   12....       LCALL     `??TM_ClrAlarm::?relay`; Banked call to: TM_ClrAlarm
    132                ACTIONSLOTS[ts].frame_tx = NULL;
   \   00014B   E5..         MOV       A,?V2
   \   00014D   F8           MOV       R0,A
   \   00014E   7900         MOV       R1,#0x0
   \   000150   E8           MOV       A,R0
   \   000151   75F003       MOV       B,#0x3
   \   000154   A4           MUL       AB
   \   000155   C8           XCH       A,R0
   \   000156   AAF0         MOV       R2,B
   \   000158   75F000       MOV       B,#0x0
   \   00015B   A4           MUL       AB
   \   00015C   2A           ADD       A,R2
   \   00015D   FA           MOV       R2,A
   \   00015E   75F003       MOV       B,#0x3
   \   000161   E9           MOV       A,R1
   \   000162   A4           MUL       AB
   \   000163   2A           ADD       A,R2
   \   000164   F9           MOV       R1,A
   \   000165   74..         MOV       A,#(??ACTIONSLOTS + 1) & 0xff
   \   000167   28           ADD       A,R0
   \   000168   F582         MOV       DPL,A
   \   00016A   74..         MOV       A,#((??ACTIONSLOTS + 1) >> 8) & 0xff
   \   00016C   39           ADDC      A,R1
   \   00016D   F583         MOV       DPH,A
   \   00016F   7400         MOV       A,#0x0
   \   000171   F0           MOVX      @DPTR,A
   \   000172   A3           INC       DPTR
   \   000173   7400         MOV       A,#0x0
   \   000175   F0           MOVX      @DPTR,A
    133                LOG_ON("Attempts exired");
   \   000176                ; Setup parameters for call to function printf
   \   000176   75....       MOV       ?V4,#??__FUNCTION___1 & 0xff
   \   000179   75....       MOV       ?V5,#(??__FUNCTION___1 >> 8) & 0xff
   \   00017C   78..         MOV       R0,#?V4
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000181   75..85       MOV       ?V4,#-0x7b
   \   000184   75..00       MOV       ?V5,#0x0
   \   000187   78..         MOV       R0,#?V4
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018C   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   00018F   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   000192   78..         MOV       R0,#?V4
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000197   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000199   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00019B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00019E   7406         MOV       A,#0x6
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A3                ; Setup parameters for call to function printf
   \   0001A3   7A..         MOV       R2,#`?<Constant "Attempts exired">` & 0xff
   \   0001A5   7B..         MOV       R3,#(`?<Constant "Attempts exired">` >> 8) & 0xff
   \   0001A7   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001AA                ; Setup parameters for call to function printf
   \   0001AA   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0001AC   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0001AE   12....       LCALL     `??printf::?relay`; Banked call to: printf
    134                break;
   \   0001B1   8037         SJMP      ??transmite_6
    135              }
    136              default:
    137                HALT("Error");
   \                     ??transmite_2:
   \   0001B3                ; Setup parameters for call to function printf
   \   0001B3   75....       MOV       ?V4,#??__FUNCTION___1 & 0xff
   \   0001B6   75....       MOV       ?V5,#(??__FUNCTION___1 >> 8) & 0xff
   \   0001B9   78..         MOV       R0,#?V4
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BE   75..89       MOV       ?V4,#-0x77
   \   0001C1   75..00       MOV       ?V5,#0x0
   \   0001C4   78..         MOV       R0,#?V4
   \   0001C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C9   75....       MOV       ?V4,#`?<Constant "llc.c">` & 0xff
   \   0001CC   75....       MOV       ?V5,#(`?<Constant "llc.c">` >> 8) & 0xff
   \   0001CF   78..         MOV       R0,#?V4
   \   0001D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D4   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   0001D6   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   0001D8   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001DB   7406         MOV       A,#0x6
   \   0001DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E0                ; Setup parameters for call to function printf
   \   0001E0   7A..         MOV       R2,#`?<Constant "Error">` & 0xff
   \   0001E2   7B..         MOV       R3,#(`?<Constant "Error">` >> 8) & 0xff
   \   0001E4   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001E7                ; Setup parameters for call to function DBG_CORE_HALT
   \   0001E7   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    138            };
    139          }
   \                     ??transmite_6:
   \   0001EA   7F06         MOV       R7,#0x6
   \   0001EC   02....       LJMP      ?BANKED_LEAVE_XDATA
    140          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          static void Hot_Start(void){
   \                     ??Hot_Start_1:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    142            timeslot_t ts = MODEL.TM.timeslot;
   \   000005   90....       MOV       DPTR,#MODEL + 13
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FF           MOV       R7,A
    143            if (ts == 0)
   \   00000A   EF           MOV       A,R7
   \   00000B   6017         JZ        ??Hot_Start_4
    144              return;
    145            char alarm = MODEL.TM.alarm;
   \   00000D   90....       MOV       DPTR,#MODEL + 14
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
    146            
    147            if (alarm & TX_ALARM)
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5005         JNC       ??Hot_Start_5
    148              transmite();
   \   000017                ; Setup parameters for call to function transmite
   \   000017   12....       LCALL     `??transmite::?relay`; Banked call to: transmite
   \   00001A   8008         SJMP      ??Hot_Start_4
    149            else if (alarm & RX_ALARM)
   \                     ??Hot_Start_5:
   \   00001C   EE           MOV       A,R6
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5003         JNC       ??Hot_Start_4
    150              receive();
   \   000021                ; Setup parameters for call to function receive
   \   000021   12....       LCALL     `??receive::?relay`; Banked call to: receive
    151          };
   \                     ??Hot_Start_4:
   \   000024   7F01         MOV       R7,#0x1
   \   000026   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\Neocore\Hardware\STACK_CORE_SRC\mac.c
      1          #include "action_manager.h"
      2          #include "frame.h"
      3          #include "coder.h"
      4          #include "radio.h"
      5          #include "ustimer.h"
      6          #include "debug.h"
      7          #include "model.h"
      8          #include "buffer.h"
      9          
     10          #define RECV_TIMEOUT 2500
     11          
     12          static void SW_Init(void);
     13          static void IRQ_Init(void);
     14          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     15          module_s MAC_MODULE = {ALIAS(SW_Init), ALIAS(IRQ_Init)};
   \                     MAC_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for MAC_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     16          
     17          struct ack{ // Формат структуры пакета ACK
     18            char CRC8;
     19          } __attribute__((packed));
     20          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     21          static void SW_Init(void){};
   \                     ??SW_Init_4:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     22          static void IRQ_Init(void){};
   \                     ??IRQ_Init_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     23          
     24          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          static inline struct frame* _recv_frame(channel_t ch){
   \                     ??_recv_frame:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
     26            if(!RI_SetChannel(ch))
   \   000007                ; Setup parameters for call to function RI_SetChannel
   \   000007   A9..         MOV       R1,?V0
   \   000009   12....       LCALL     `??RI_SetChannel::?relay`; Banked call to: RI_SetChannel
   \   00000C   4037         JC        ??_recv_frame_1
     27              HALT("Wrong channel");
   \   00000E                ; Setup parameters for call to function printf
   \   00000E   75....       MOV       ?V2,#??__FUNCTION___2 & 0xff
   \   000011   75....       MOV       ?V3,#(??__FUNCTION___2 >> 8) & 0xff
   \   000014   78..         MOV       R0,#?V2
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..1B       MOV       ?V2,#0x1b
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75....       MOV       ?V2,#`?<Constant "mac.c">` & 0xff
   \   000027   75....       MOV       ?V3,#(`?<Constant "mac.c">` >> 8) & 0xff
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000031   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000033   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000036   7406         MOV       A,#0x6
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003B                ; Setup parameters for call to function printf
   \   00003B   7A..         MOV       R2,#`?<Constant "Wrong channel">` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "Wrong channel">` >> 8) & 0xff
   \   00003F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000042                ; Setup parameters for call to function DBG_CORE_HALT
   \   000042   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     28            
     29            //UST_delay(400);
     30            nwtime_t NOW1 = AT_time();
   \                     ??_recv_frame_1:
   \   000045                ; Setup parameters for call to function AT_time
   \   000045   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   85....       MOV       ?V2,?V4
   \   00004F   85....       MOV       ?V3,?V5
     31            struct frame *frame = RI_Receive(RECV_TIMEOUT); //
   \   000052                ; Setup parameters for call to function RI_Receive
   \   000052   90....       MOV       DPTR,#__Constant_9c4
   \   000055   12....       LCALL     ?XLOAD_R2345
   \   000058   12....       LCALL     `??RI_Receive::?relay`; Banked call to: RI_Receive
   \   00005B   8A..         MOV       ?V4,R2
   \   00005D   8B..         MOV       ?V5,R3
   \   00005F   AE..         MOV       R6,?V4
   \   000061   AF..         MOV       R7,?V5
     32            nwtime_t NOW2 = AT_time();
   \   000063                ; Setup parameters for call to function AT_time
   \   000063   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   000066   8A..         MOV       ?V4,R2
   \   000068   8B..         MOV       ?V5,R3
   \   00006A   A8..         MOV       R0,?V4
   \   00006C   A9..         MOV       R1,?V5
     33            return frame;
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   7F06         MOV       R7,#0x6
   \   000074   02....       LJMP      ?BANKED_LEAVE_XDATA
     34          }
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          static uint8_t xor_calc(struct frame *frame){
   \                     ??xor_calc:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     37            uint8_t crc = 0x34; // Начальное значение
   \   000005   7934         MOV       R1,#0x34
     38            uint8_t *val = (uint8_t*)frame->payload;
   \   000007   EA           MOV       A,R2
   \   000008   2415         ADD       A,#0x15
   \   00000A   FC           MOV       R4,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   FD           MOV       R5,A
     39            for (uint8_t i = 0; i < frame->len; i++)
   \   00000E   7800         MOV       R0,#0x0
   \                     ??xor_calc_1:
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   E8           MOV       A,R0
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   5013         JNC       ??xor_calc_2
     40              crc ^= val[i];
   \   00001B   E8           MOV       A,R0
   \   00001C   FE           MOV       R6,A
   \   00001D   7F00         MOV       R7,#0x0
   \   00001F   EC           MOV       A,R4
   \   000020   2E           ADD       A,R6
   \   000021   F582         MOV       DPL,A
   \   000023   ED           MOV       A,R5
   \   000024   3F           ADDC      A,R7
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C9           XCH       A,R1
   \   000029   69           XRL       A,R1
   \   00002A   C9           XCH       A,R1
   \   00002B   08           INC       R0
   \   00002C   80E2         SJMP      ??xor_calc_1
     41            return crc;
   \                     ??xor_calc_2:
   \   00002E   7F01         MOV       R7,#0x1
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
     42          }
     43          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          static inline void _send_ack(struct frame *frame){
   \                     ??_send_ack:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
     45            struct ack ack;
     46            struct frame *ack_frame;
     47            // Создаем подтверждение кадра
     48            ack.CRC8 = xor_calc(frame);
   \   00000E                ; Setup parameters for call to function xor_calc
   \   00000E   AA..         MOV       R2,?V0
   \   000010   AB..         MOV       R3,?V1
   \   000012   12....       LCALL     `??xor_calc::?relay`; Banked call to: xor_calc
   \   000015   E9           MOV       A,R1
   \   000016   C0E0         PUSH      A
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
     49            // Создаем кадр для отправки
     50            ack_frame = FR_create();
   \   000021                ; Setup parameters for call to function FR_create
   \   000021   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000024   8A..         MOV       ?V2,R2
   \   000026   8B..         MOV       ?V3,R3
   \   000028   AE..         MOV       R6,?V2
   \   00002A   AF..         MOV       R7,?V3
     51            FR_add_header(ack_frame, &ack, sizeof(struct ack));
   \   00002C                ; Setup parameters for call to function FR_add_header
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   AC..         MOV       R4,?XSP + 0
   \   000030   AD..         MOV       R5,?XSP + 1
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
     52            ack_frame->meta.SEND_TIME = 0;
   \   000039   EE           MOV       A,R6
   \   00003A   2413         ADD       A,#0x13
   \   00003C   F582         MOV       DPL,A
   \   00003E   E4           CLR       A
   \   00003F   3F           ADDC      A,R7
   \   000040   F583         MOV       DPH,A
   \   000042   7400         MOV       A,#0x0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   7400         MOV       A,#0x0
   \   000048   F0           MOVX      @DPTR,A
     53            RI_Send(ack_frame);
   \   000049                ; Setup parameters for call to function RI_Send
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??RI_Send::?relay`; Banked call to: RI_Send
     54            FR_delete(ack_frame);  
   \   000050                ; Setup parameters for call to function FR_delete
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
     55          }
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   7F04         MOV       R7,#0x4
   \   00005E   02....       LJMP      ?BANKED_LEAVE_XDATA
     56          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     57          void MAC_Receive(channel_t ch){
   \                     MAC_Receive:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
     58            struct frame *frame = _recv_frame(ch);
   \   000007                ; Setup parameters for call to function _recv_frame
   \   000007   A9..         MOV       R1,?V0
   \   000009   12....       LCALL     `??_recv_frame::?relay`; Banked call to: _recv_frame
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   AE..         MOV       R6,?V2
   \   000012   AF..         MOV       R7,?V3
     59            if (!frame)
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??MAC_Receive_0 & 0xFFFF
     60              return;
     61            
     62            frame->meta.TS = MODEL.TM.timeslot;
   \   00001B   90....       MOV       DPTR,#MODEL + 13
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   C0E0         PUSH      A
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
     63            if (MODEL.TM.timeslot > 1) // не системный таймслот требует подтверждения
   \   00002D   90....       MOV       DPTR,#MODEL + 13
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C3           CLR       C
   \   000032   9402         SUBB      A,#0x2
   \   000034   4007         JC        ??MAC_Receive_1
     64              _send_ack(frame);
   \   000036                ; Setup parameters for call to function _send_ack
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??_send_ack::?relay`; Banked call to: _send_ack
     65            
     66            AES_StreamCoder(false, frame->payload, frame->payload, frame->len);
   \                     ??MAC_Receive_1:
   \   00003D                ; Setup parameters for call to function AES_StreamCoder
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   EE           MOV       A,R6
   \   000044   2415         ADD       A,#0x15
   \   000046   FC           MOV       R4,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   FD           MOV       R5,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2415         ADD       A,#0x15
   \   00004D   FA           MOV       R2,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   FB           MOV       R3,A
   \   000051   C2F0         CLR       B.0
   \   000053   12....       LCALL     `??AES_StreamCoder::?relay`; Banked call to: AES_StreamCoder
     67            
     68            LOG_ON("push");
   \   000056                ; Setup parameters for call to function printf
   \   000056   75....       MOV       ?V2,#??__FUNCTION___3 & 0xff
   \   000059   75....       MOV       ?V3,#(??__FUNCTION___3 >> 8) & 0xff
   \   00005C   78..         MOV       R0,#?V2
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   75..44       MOV       ?V2,#0x44
   \   000064   75..00       MOV       ?V3,#0x0
   \   000067   78..         MOV       R0,#?V2
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   75....       MOV       ?V2,#`?<Constant "mac.c">` & 0xff
   \   00006F   75....       MOV       ?V3,#(`?<Constant "mac.c">` >> 8) & 0xff
   \   000072   78..         MOV       R0,#?V2
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000079   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   00007B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007E   7406         MOV       A,#0x6
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083                ; Setup parameters for call to function printf
   \   000083   7A..         MOV       R2,#`?<Constant "push">` & 0xff
   \   000085   7B..         MOV       R3,#(`?<Constant "push">` >> 8) & 0xff
   \   000087   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00008A                ; Setup parameters for call to function printf
   \   00008A   7A..         MOV       R2,#`?<Constant "\\r\\n">_1` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "\\r\\n">_1` >> 8) & 0xff
   \   00008E   12....       LCALL     `??printf::?relay`; Banked call to: printf
     69            bool push_res = BF_push_rx(frame);
   \   000091                ; Setup parameters for call to function BF_push_rx
   \   000091   EE           MOV       A,R6
   \   000092   FA           MOV       R2,A
   \   000093   EF           MOV       A,R7
   \   000094   FB           MOV       R3,A
   \   000095   12....       LCALL     `??BF_push_rx::?relay`; Banked call to: BF_push_rx
   \   000098   92..         MOV       ?VB.0,C
     70            if (!push_res){
   \   00009A   A2..         MOV       C,?VB.0
   \   00009C   4042         JC        ??MAC_Receive_0
     71              FR_delete(frame);
   \   00009E                ; Setup parameters for call to function FR_delete
   \   00009E   EE           MOV       A,R6
   \   00009F   FA           MOV       R2,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   FB           MOV       R3,A
   \   0000A2   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
     72              LOG_ON("push del");
   \   0000A5                ; Setup parameters for call to function printf
   \   0000A5   75....       MOV       ?V2,#??__FUNCTION___3 & 0xff
   \   0000A8   75....       MOV       ?V3,#(??__FUNCTION___3 >> 8) & 0xff
   \   0000AB   78..         MOV       R0,#?V2
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75..48       MOV       ?V2,#0x48
   \   0000B3   75..00       MOV       ?V3,#0x0
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75....       MOV       ?V2,#`?<Constant "mac.c">` & 0xff
   \   0000BE   75....       MOV       ?V3,#(`?<Constant "mac.c">` >> 8) & 0xff
   \   0000C1   78..         MOV       R0,#?V2
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   0000C8   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   0000CA   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000CD   7406         MOV       A,#0x6
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2                ; Setup parameters for call to function printf
   \   0000D2   7A..         MOV       R2,#`?<Constant "push del">` & 0xff
   \   0000D4   7B..         MOV       R3,#(`?<Constant "push del">` >> 8) & 0xff
   \   0000D6   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000D9                ; Setup parameters for call to function printf
   \   0000D9   7A..         MOV       R2,#`?<Constant "\\r\\n">_1` & 0xff
   \   0000DB   7B..         MOV       R3,#(`?<Constant "\\r\\n">_1` >> 8) & 0xff
   \   0000DD   12....       LCALL     `??printf::?relay`; Banked call to: printf
     73            }
     74            
     75          }
   \                     ??MAC_Receive_0:
   \   0000E0   7F04         MOV       R7,#0x4
   \   0000E2   02....       LJMP      ?BANKED_LEAVE_XDATA
     76          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          static inline bool _send_frame(struct frame *frame){
   \                     ??_send_frame:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     78            if(!RI_SetChannel(frame->meta.CH))
   \   000009                ; Setup parameters for call to function RI_SetChannel
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??RI_SetChannel::?relay`; Banked call to: RI_SetChannel
   \   000018   4037         JC        ??_send_frame_1
     79              HALT("Wrong channel");  
   \   00001A                ; Setup parameters for call to function printf
   \   00001A   75....       MOV       ?V0,#??__FUNCTION___4 & 0xff
   \   00001D   75....       MOV       ?V1,#(??__FUNCTION___4 >> 8) & 0xff
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   75..4F       MOV       ?V0,#0x4f
   \   000028   75..00       MOV       ?V1,#0x0
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75....       MOV       ?V0,#`?<Constant "mac.c">` & 0xff
   \   000033   75....       MOV       ?V1,#(`?<Constant "mac.c">` >> 8) & 0xff
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   00003F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047                ; Setup parameters for call to function printf
   \   000047   7A..         MOV       R2,#`?<Constant "Wrong channel">` & 0xff
   \   000049   7B..         MOV       R3,#(`?<Constant "Wrong channel">` >> 8) & 0xff
   \   00004B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004E                ; Setup parameters for call to function DBG_CORE_HALT
   \   00004E   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     80            
     81            UST_delay(918);
   \                     ??_send_frame_1:
   \   000051                ; Setup parameters for call to function UST_delay
   \   000051   90....       MOV       DPTR,#__Constant_396
   \   000054   12....       LCALL     ?XLOAD_R2345
   \   000057   12....       LCALL     `??UST_delay::?relay`; Banked call to: UST_delay
     82            bool tx_success = RI_Send(frame);
   \   00005A                ; Setup parameters for call to function RI_Send
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??RI_Send::?relay`; Banked call to: RI_Send
   \   000061   92F0         MOV       B.0,C
     83            return tx_success;
   \   000063   A2F0         MOV       C,B.0
   \   000065   7F02         MOV       R7,#0x2
   \   000067   02....       LJMP      ?BANKED_LEAVE_XDATA
     84          }
     85          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          static inline bool _recv_ack(struct frame *frame){
   \                     ??_recv_ack:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     87            return true;
   \   000000   D3           SETB      C
   \   000001   02....       LJMP      ?BRET
     88          }
     89          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     90          int MAC_Send(struct frame *frame){
   \                     MAC_Send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     91            bool tx_success = _send_frame(frame);
   \   000009                ; Setup parameters for call to function _send_frame
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??_send_frame::?relay`; Banked call to: _send_frame
   \   000010   92..         MOV       ?VB.0,C
     92            
     93            bool ack_success = false;
   \   000012   C2..         CLR       ?VB.1
     94            if (MODEL.TM.timeslot > 1) // Ждем подтверждения ack для не системных слотов
   \   000014   90....       MOV       DPTR,#MODEL + 13
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C3           CLR       C
   \   000019   9402         SUBB      A,#0x2
   \   00001B   400B         JC        ??MAC_Send_0
     95              ack_success = _recv_ack(frame);
   \   00001D                ; Setup parameters for call to function _recv_ack
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??_recv_ack::?relay`; Banked call to: _recv_ack
   \   000024   92..         MOV       ?VB.1,C
   \   000026   8002         SJMP      ??MAC_Send_1
     96            else
     97              ack_success = true;
   \                     ??MAC_Send_0:
   \   000028   D2..         SETB      ?VB.1
     98            
     99            if (tx_success && ack_success){ // Удачная передача
   \                     ??MAC_Send_1:
   \   00002A   A2..         MOV       C,?VB.1
   \   00002C   82..         ANL       C,?VB.0
   \   00002E   500D         JNC       ??MAC_Send_2
    100              FR_delete(frame);
   \   000030                ; Setup parameters for call to function FR_delete
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    101              return 1;
   \   000037   7A01         MOV       R2,#0x1
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   8036         SJMP      ??MAC_Send_3
    102            }
    103            else{ // неудачная передача
    104              if (frame->meta.tx_attempts > 0)
   \                     ??MAC_Send_2:
   \   00003D   EE           MOV       A,R6
   \   00003E   2412         ADD       A,#0x12
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   3F           ADDC      A,R7
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   600D         JZ        ??MAC_Send_4
    105                frame->meta.tx_attempts --;
   \   000049   EE           MOV       A,R6
   \   00004A   2412         ADD       A,#0x12
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   F583         MOV       DPH,A
   \   000052   E0           MOVX      A,@DPTR
   \   000053   24FF         ADD       A,#-0x1
   \   000055   F0           MOVX      @DPTR,A
    106              
    107              if (!frame->meta.tx_attempts){ // кончились попытки передачи
   \                     ??MAC_Send_4:
   \   000056   EE           MOV       A,R6
   \   000057   2412         ADD       A,#0x12
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3F           ADDC      A,R7
   \   00005D   F583         MOV       DPH,A
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   700D         JNZ       ??MAC_Send_5
    108                FR_delete(frame);
   \   000062                ; Setup parameters for call to function FR_delete
   \   000062   EE           MOV       A,R6
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    109                return -1;
   \   000069   7AFF         MOV       R2,#-0x1
   \   00006B   7BFF         MOV       R3,#-0x1
   \   00006D   8004         SJMP      ??MAC_Send_3
    110              }
    111            }
    112            return 0;
   \                     ??MAC_Send_5:
   \   00006F   7A00         MOV       R2,#0x0
   \   000071   7B00         MOV       R3,#0x0
   \                     ??MAC_Send_3:
   \   000073   7F01         MOV       R7,#0x1
   \   000075   02....       LJMP      ?BANKED_LEAVE_XDATA
    113          }
E:\Neocore\Hardware\PRJ Test\main.c
      1          #include "utest.h"
      2          #include "stdint.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      3          void main(){
   \                     main:
   \   000000                ; Auto size: 0
      4            run_tests();
   \   000000                ; Setup parameters for call to function run_tests
   \   000000   12....       LCALL     `??run_tests::?relay`; Banked call to: run_tests
      5            while(1);
   \                     ??main_0:
   \   000003   80FE         SJMP      ??main_0
      6          }
E:\Neocore\Hardware\STACK_CORE_SRC\mem_slots.c
      1          #include "debug.h"
      2          #include "global.h"
      3          #include "macros.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool is_array_ptr(void *, void *, size_t)
   \                     ??is_array_ptr:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
   \   000015   EC           MOV       A,R4
   \   000016   C3           CLR       C
   \   000017   9E           SUBB      A,R6
   \   000018   F8           MOV       R0,A
   \   000019   ED           MOV       A,R5
   \   00001A   9F           SUBB      A,R7
   \   00001B   F9           MOV       R1,A
   \   00001C   AA..         MOV       R2,?V0
   \   00001E   AB..         MOV       R3,?V1
   \   000020   12....       LCALL     ?US_DIV_MOD
   \   000023   8A..         MOV       ?V2,R2
   \   000025   8B..         MOV       ?V3,R3
   \   000027   A8..         MOV       R0,?V2
   \   000029   A9..         MOV       R1,?V3
   \   00002B   E8           MOV       A,R0
   \   00002C   49           ORL       A,R1
   \   00002D   7004         JNZ       ??is_array_ptr_1
   \   00002F   D2F0         SETB      B.0
   \   000031   8002         SJMP      ??is_array_ptr_2
   \                     ??is_array_ptr_1:
   \   000033   C2F0         CLR       B.0
   \                     ??is_array_ptr_2:
   \   000035   A2F0         MOV       C,B.0
   \   000037   7F04         MOV       R7,#0x4
   \   000039   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant size_t array_index(void *, void *, size_t)
   \                     ??array_index:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
   \   000015   EC           MOV       A,R4
   \   000016   C3           CLR       C
   \   000017   9E           SUBB      A,R6
   \   000018   F8           MOV       R0,A
   \   000019   ED           MOV       A,R5
   \   00001A   9F           SUBB      A,R7
   \   00001B   F9           MOV       R1,A
   \   00001C   AA..         MOV       R2,?V0
   \   00001E   AB..         MOV       R3,?V1
   \   000020   12....       LCALL     ?US_DIV_MOD
   \   000023   88..         MOV       ?V2,R0
   \   000025   89..         MOV       ?V3,R1
   \   000027   AA..         MOV       R2,?V2
   \   000029   AB..         MOV       R3,?V3
   \   00002B   7F04         MOV       R7,#0x4
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
      4          #include "stdbool.h"
      5          #include "action_manager.h"
      6          #include "mem_utils.h"  
      7          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      8          
      9          //!< Максимальный размер данных в одном слоте
     10          #define SLOT_BUFFER_SIZE 150
     11          #define RED_ZONE_CODE 0x73
     12          
     13          typedef char red_zone_t;
     14          
     15          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     16          module_s MS_MODULE = {ALIAS(SW_Init)};
   \                     MS_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for MS_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     17          
     18          struct property{
     19            char taken: 1;
     20          };
     21          
     22          struct slot{
     23            struct property property;
     24            red_zone_t red_zone_1;
     25            char buffer[SLOT_BUFFER_SIZE];
     26            red_zone_t red_zone_2;
     27          };
     28          
     29          //!< Хранилище слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          static struct slot SLOT_POOL[SLOT_POOL_ITEMS];
   \                     ??SLOT_POOL:
   \   000000                DS 3060
   \   000BF4                REQUIRE __INIT_XDATA_Z
     31          //!< Количество занятых слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     32          static int slot_busy;
   \                     ??slot_busy:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     33          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void SW_Init(void){
   \                     ??SW_Init_5:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     35            slot_busy = 0;
   \   00000A   90....       MOV       DPTR,#??slot_busy
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
     36            for_each_type(struct slot, SLOT_POOL, slot){
   \   000014   7E..         MOV       R6,#??SLOT_POOL & 0xff
   \   000016   7F..         MOV       R7,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SW_Init_14:
   \   000018   C3           CLR       C
   \   000019   EE           MOV       A,R6
   \   00001A   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   00001C   EF           MOV       A,R7
   \   00001D   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   00001F   504A         JNC       ??SW_Init_15
     37              slot->property.taken = false;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C2E0         CLR       0xE0 /* A   */.0
   \   000028   F0           MOVX      @DPTR,A
     38              #ifdef FILL_SLOT_ZERO
     39                MEMSET(slot->buffer, 0, SLOT_BUFFER_SIZE);
   \   000029   90....       MOV       DPTR,#`?<Constant {(char *)0, 150, 0}>`
   \   00002C   AC..         MOV       R4,?XSP + 0
   \   00002E   AD..         MOV       R5,?XSP + 1
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000035   EE           MOV       A,R6
   \   000036   2402         ADD       A,#0x2
   \   000038   F8           MOV       R0,A
   \   000039   E4           CLR       A
   \   00003A   3F           ADDC      A,R7
   \   00003B   F9           MOV       R1,A
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   E8           MOV       A,R0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E9           MOV       A,R1
   \   000046   F0           MOVX      @DPTR,A
   \   000047                ; Setup parameters for call to function MEM_memset
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     40              #endif    
     41              slot->red_zone_1 = RED_ZONE_CODE;
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   A3           INC       DPTR
   \   000053   7473         MOV       A,#0x73
   \   000055   F0           MOVX      @DPTR,A
     42              slot->red_zone_2 = RED_ZONE_CODE;
   \   000056   EE           MOV       A,R6
   \   000057   2498         ADD       A,#-0x68
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3F           ADDC      A,R7
   \   00005D   F583         MOV       DPH,A
   \   00005F   7473         MOV       A,#0x73
   \   000061   F0           MOVX      @DPTR,A
     43            }
   \   000062   EE           MOV       A,R6
   \   000063   2499         ADD       A,#-0x67
   \   000065   FE           MOV       R6,A
   \   000066   50B0         JNC       ??SW_Init_14
   \   000068   0F           INC       R7
   \   000069   80AD         SJMP      ??SW_Init_14
     44          };
   \                     ??SW_Init_15:
   \   00006B   7404         MOV       A,#0x4
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   7F01         MOV       R7,#0x1
   \   000072   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 150, 0}>`:
   \   000000   0000         DW 0H
   \   000002   96           DB 150
   \   000003   00           DB 0
     45          
     46          /**
     47          @brief Возвращает указатель на буфер или NULL. Буфер заполнен 0
     48          @detail 
     49          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     50          char* SL_alloc(void){  
   \                     SL_alloc:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     51            char *ret_ptr = NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   75..00       MOV       ?V1,#0x0
     52            ATOMIC_BLOCK_RESTORE{
   \   000010   A2AF         MOV       C,0xa8.7
   \   000012   E4           CLR       A
   \   000013   33           RLC       A
   \   000014   F5..         MOV       ?V2,A
   \   000016                ; Setup parameters for call to function __cli
   \   000016   12....       LCALL     `??__cli::?relay_2`; Banked call to: __cli
   \   000019   E9           MOV       A,R1
   \   00001A   F8           MOV       R0,A
   \                     ??SL_alloc_0:
   \   00001B   E8           MOV       A,R0
   \   00001C   606F         JZ        ??SL_alloc_1
     53              for_each_type(struct slot, SLOT_POOL, slot){
   \   00001E   7E..         MOV       R6,#??SLOT_POOL & 0xff
   \   000020   7F..         MOV       R7,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SL_alloc_2:
   \   000022   C3           CLR       C
   \   000023   EE           MOV       A,R6
   \   000024   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000026   EF           MOV       A,R7
   \   000027   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000029   5058         JNC       ??SL_alloc_3
     54                if (!slot->property.taken){
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   A2E0         MOV       C,0xE0 /* A   */.0
   \   000032   4046         JC        ??SL_alloc_4
     55                  slot->property.taken = true;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   E0           MOVX      A,@DPTR
   \   000039   D2E0         SETB      0xE0 /* A   */.0
   \   00003B   F0           MOVX      @DPTR,A
     56                  slot_busy++;
   \   00003C   90....       MOV       DPTR,#??slot_busy
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   2401         ADD       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   3400         ADDC      A,#0x0
   \   000047   F0           MOVX      @DPTR,A
     57                  #ifdef FILL_SLOT_ZERO
     58                    MEMSET(slot->buffer, 0, SLOT_BUFFER_SIZE);
   \   000048   90....       MOV       DPTR,#`?<Constant {(char *)0, 150, 0}>_1`
   \   00004B   AC..         MOV       R4,?XSP + 0
   \   00004D   AD..         MOV       R5,?XSP + 1
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000054   EE           MOV       A,R6
   \   000055   2402         ADD       A,#0x2
   \   000057   F8           MOV       R0,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   F9           MOV       R1,A
   \   00005B   85..82       MOV       DPL,?XSP + 0
   \   00005E   85..83       MOV       DPH,?XSP + 1
   \   000061   E8           MOV       A,R0
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E9           MOV       A,R1
   \   000065   F0           MOVX      @DPTR,A
   \   000066                ; Setup parameters for call to function MEM_memset
   \   000066   AA..         MOV       R2,?XSP + 0
   \   000068   AB..         MOV       R3,?XSP + 1
   \   00006A   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     59                  #endif
     60                  ret_ptr = slot->buffer;
   \   00006D   EE           MOV       A,R6
   \   00006E   2402         ADD       A,#0x2
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3F           ADDC      A,R7
   \   000073   F9           MOV       R1,A
   \   000074   88..         MOV       ?V0,R0
   \   000076   89..         MOV       ?V1,R1
     61                  break;
   \   000078   8009         SJMP      ??SL_alloc_3
     62                };
     63              };  
   \                     ??SL_alloc_4:
   \   00007A   EE           MOV       A,R6
   \   00007B   2499         ADD       A,#-0x67
   \   00007D   FE           MOV       R6,A
   \   00007E   50A2         JNC       ??SL_alloc_2
   \   000080   0F           INC       R7
   \   000081   809F         SJMP      ??SL_alloc_2
     64            };
   \                     ??SL_alloc_3:
   \   000083   7800         MOV       R0,#0x0
   \   000085   E5..         MOV       A,?V2
   \   000087   A2E0         MOV       C,0xE0 /* A   */.0
   \   000089   92AF         MOV       0xa8.7,C
   \   00008B   808E         SJMP      ??SL_alloc_0
     65            return ret_ptr;
   \                     ??SL_alloc_1:
   \   00008D   AA..         MOV       R2,?V0
   \   00008F   AB..         MOV       R3,?V1
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096   7F03         MOV       R7,#0x3
   \   000098   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00009B                REQUIRE _A_IEN0
     66          };

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 150, 0}>_1`:
   \   000000   0000         DW 0H
   \   000002   96           DB 150
   \   000003   00           DB 0
     67          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     68          static bool _free(char *buff){
   \                     ??_free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
     69            struct slot *slot = container_of(buff, struct slot, buffer);
   \   000009   E5..         MOV       A,?V0
   \   00000B   24FE         ADD       A,#-0x2
   \   00000D   FE           MOV       R6,A
   \   00000E   E5..         MOV       A,?V1
   \   000010   34FF         ADDC      A,#-0x1
   \   000012   FF           MOV       R7,A
     70            
     71            if (!is_array_ptr(SLOT_POOL, slot, sizeof(struct slot)))
   \   000013                ; Setup parameters for call to function is_array_ptr
   \   000013   75..99       MOV       ?V2,#-0x67
   \   000016   75..00       MOV       ?V3,#0x0
   \   000019   78..         MOV       R0,#?V2
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   EE           MOV       A,R6
   \   00001F   FC           MOV       R4,A
   \   000020   EF           MOV       A,R7
   \   000021   FD           MOV       R5,A
   \   000022   7A..         MOV       R2,#??SLOT_POOL & 0xff
   \   000024   7B..         MOV       R3,#(??SLOT_POOL >> 8) & 0xff
   \   000026   12....       LCALL     `??is_array_ptr::?relay`; Banked call to: is_array_ptr
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   4003         JC        ??_free_1
     72              return false;
   \   000030   C3           CLR       C
   \   000031   8050         SJMP      ??_free_2
     73            
     74            size_t index = array_index(SLOT_POOL, slot, sizeof(struct slot));
   \                     ??_free_1:
   \   000033                ; Setup parameters for call to function array_index
   \   000033   75..99       MOV       ?V2,#-0x67
   \   000036   75..00       MOV       ?V3,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV       A,R6
   \   00003F   FC           MOV       R4,A
   \   000040   EF           MOV       A,R7
   \   000041   FD           MOV       R5,A
   \   000042   7A..         MOV       R2,#??SLOT_POOL & 0xff
   \   000044   7B..         MOV       R3,#(??SLOT_POOL >> 8) & 0xff
   \   000046   12....       LCALL     `??array_index::?relay`; Banked call to: array_index
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   8A..         MOV       ?V2,R2
   \   000050   8B..         MOV       ?V3,R3
   \   000052   A8..         MOV       R0,?V2
   \   000054   A9..         MOV       R1,?V3
     75            if (!(index < SLOT_BUFFER_SIZE))
   \   000056   C3           CLR       C
   \   000057   E8           MOV       A,R0
   \   000058   9496         SUBB      A,#-0x6a
   \   00005A   E9           MOV       A,R1
   \   00005B   9400         SUBB      A,#0x0
   \   00005D   4003         JC        ??_free_3
     76              return false;
   \   00005F   C3           CLR       C
   \   000060   8021         SJMP      ??_free_2
     77            
     78            if (slot->property.taken != true)
   \                     ??_free_3:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E0           MOVX      A,@DPTR
   \   000067   A2E0         MOV       C,0xE0 /* A   */.0
   \   000069   4003         JC        ??_free_4
     79              return false;
   \   00006B   C3           CLR       C
   \   00006C   8015         SJMP      ??_free_2
     80              
     81            slot->property.taken = false;
   \                     ??_free_4:
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C2E0         CLR       0xE0 /* A   */.0
   \   000075   F0           MOVX      @DPTR,A
     82            slot_busy--;
   \   000076   90....       MOV       DPTR,#??slot_busy
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   24FF         ADD       A,#-0x1
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   34FF         ADDC      A,#-0x1
   \   000081   F0           MOVX      @DPTR,A
     83            return true;
   \   000082   D3           SETB      C
   \                     ??_free_2:
   \   000083   7F04         MOV       R7,#0x4
   \   000085   02....       LJMP      ?BANKED_LEAVE_XDATA
     84          }
     85          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          bool SL_free(char *buff){
   \                     SL_free:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     87            bool res;
     88            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V0,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_2`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??SL_free_0:
   \   000014   E8           MOV       A,R0
   \   000015   6013         JZ        ??SL_free_1
     89              res = _free(buff);
   \   000017                ; Setup parameters for call to function _free
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??_free::?relay`; Banked call to: _free
   \   00001E   92..         MOV       ?VB.0,C
     90            }
   \   000020   7800         MOV       R0,#0x0
   \   000022   E5..         MOV       A,?V0
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   92AF         MOV       0xa8.7,C
   \   000028   80EA         SJMP      ??SL_free_0
     91            return res;
   \                     ??SL_free_1:
   \   00002A   A2..         MOV       C,?VB.0
   \   00002C   7F01         MOV       R7,#0x1
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000031                REQUIRE _A_IEN0
     92          };
     93          
     94          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          int SL_busy(){
   \                     SL_busy:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     96            ASSERT(slot_busy <= SLOT_POOL_ITEMS);
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9415         SUBB      A,#0x15
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4025         JC        ??SL_busy_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75..60       MOV       ?V0,#0x60
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000025   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_4` & 0xff
   \   00002F   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_4` >> 8) & 0xff
   \   000031   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000034   7404         MOV       A,#0x4
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   \   000039                ; Setup parameters for call to function DBG_CORE_HALT
   \   000039   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     97            return slot_busy;
   \                     ??SL_busy_0:
   \   00003C   90....       MOV       DPTR,#??slot_busy
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FA           MOV       R2,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   7F02         MOV       R7,#0x2
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
     98          };
     99          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          int SL_available(){
   \                     SL_available:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    101            ASSERT(slot_busy <= SLOT_POOL_ITEMS);  
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9415         SUBB      A,#0x15
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4025         JC        ??SL_available_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75..65       MOV       ?V0,#0x65
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000025   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_4` & 0xff
   \   00002F   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_4` >> 8) & 0xff
   \   000031   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000034   7404         MOV       A,#0x4
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   \   000039                ; Setup parameters for call to function DBG_CORE_HALT
   \   000039   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    102            return SLOT_POOL_ITEMS - slot_busy;
   \                     ??SL_available_0:
   \   00003C   90....       MOV       DPTR,#??slot_busy
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   7414         MOV       A,#0x14
   \   000046   C3           CLR       C
   \   000047   98           SUBB      A,R0
   \   000048   FA           MOV       R2,A
   \   000049   7400         MOV       A,#0x0
   \   00004B   99           SUBB      A,R1
   \   00004C   FB           MOV       R3,A
   \   00004D   7F02         MOV       R7,#0x2
   \   00004F   02....       LJMP      ?BANKED_LEAVE_XDATA
    103          };
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          int SL_zone_check(){
   \                     SL_zone_check:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    106            int index = 0;
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
    107            for_each_type(struct slot, SLOT_POOL, slot){
   \   000008   78..         MOV       R0,#??SLOT_POOL & 0xff
   \   00000A   79..         MOV       R1,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SL_zone_check_0:
   \   00000C   C3           CLR       C
   \   00000D   E8           MOV       A,R0
   \   00000E   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000010   E9           MOV       A,R1
   \   000011   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000013   502C         JNC       ??SL_zone_check_1
    108              if (!(slot->red_zone_1 == RED_ZONE_CODE &&
    109                    slot->red_zone_2 == RED_ZONE_CODE))
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6473         XRL       A,#0x73
   \   00001D   700E         JNZ       ??SL_zone_check_2
   \   00001F   E8           MOV       A,R0
   \   000020   2498         ADD       A,#-0x68
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6473         XRL       A,#0x73
   \   00002B   6006         JZ        ??SL_zone_check_3
    110                return index;
   \                     ??SL_zone_check_2:
   \   00002D   EC           MOV       A,R4
   \   00002E   FA           MOV       R2,A
   \   00002F   ED           MOV       A,R5
   \   000030   FB           MOV       R3,A
   \   000031   8012         SJMP      ??SL_zone_check_4
    111              index++;
   \                     ??SL_zone_check_3:
   \   000033   0C           INC       R4
   \   000034   EC           MOV       A,R4
   \   000035   7001         JNZ       ??SL_zone_check_5
   \   000037   0D           INC       R5
    112            }
   \                     ??SL_zone_check_5:
   \   000038   E8           MOV       A,R0
   \   000039   2499         ADD       A,#-0x67
   \   00003B   F8           MOV       R0,A
   \   00003C   50CE         JNC       ??SL_zone_check_0
   \   00003E   09           INC       R1
   \   00003F   80CB         SJMP      ??SL_zone_check_0
    113            return -1;
   \                     ??SL_zone_check_1:
   \   000041   7AFF         MOV       R2,#-0x1
   \   000043   7BFF         MOV       R3,#-0x1
   \                     ??SL_zone_check_4:
   \   000045   D083         POP       DPH
   \   000047   D082         POP       DPL
   \   000049   02....       LJMP      ?BRET
    114          };
    115          
E:\Neocore\Hardware\STACK_CORE_SRC\mem_utils.c
      1          #include "mem_utils.h"
      2          #include "debug.h"
      3          
      4          /**
      5          @file Реентерабельное копирование
      6          */
      7          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      8          void MEM_memcpy(struct memcpy *memcpy){
   \                     MEM_memcpy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
      9            while (memcpy->len > 0){
   \                     ??MEM_memcpy_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   605E         JZ        ??MEM_memcpy_1
     10              *memcpy->dst = *memcpy->src;
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F583         MOV       DPH,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C0E0         PUSH      A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F583         MOV       DPH,A
   \   00002A   8882         MOV       DPL,R0
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
     11              memcpy->dst++;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2401         ADD       A,#0x1
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   3400         ADDC      A,#0x0
   \   00003B   F9           MOV       R1,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
     12              memcpy->src++;
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   2401         ADD       A,#0x1
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   3400         ADDC      A,#0x0
   \   000053   F9           MOV       R1,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   F0           MOVX      @DPTR,A
     13              memcpy->len--;
   \   00005F   8A82         MOV       DPL,R2
   \   000061   8B83         MOV       DPH,R3
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   24FF         ADD       A,#-0x1
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   8097         SJMP      ??MEM_memcpy_0
     14            }
     15          };
   \                     ??MEM_memcpy_1:
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   02....       LJMP      ?BRET
     16          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     17          void MEM_memset(struct memset *memset){
   \                     MEM_memset:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     18            while (memset->len > 0){
   \                     ??MEM_memset_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   603B         JZ        ??MEM_memset_1
     19              *memset->dst = memset->val;
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C0E0         PUSH      A
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
     20              memset->dst++;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2401         ADD       A,#0x1
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   3400         ADDC      A,#0x0
   \   000032   F9           MOV       R1,A
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   E8           MOV       A,R0
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   E9           MOV       A,R1
   \   00003B   F0           MOVX      @DPTR,A
     21              memset->len--;
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   24FF         ADD       A,#-0x1
   \   000045   F0           MOVX      @DPTR,A
   \   000046   80BC         SJMP      ??MEM_memset_0
     22            }  
     23          };
   \                     ??MEM_memset_1:
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET
     24          
     25          
E:\Neocore\Hardware\STACK_CORE_SRC\model.c
      1          #include "model.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          MODEL_s MODEL;
   \                     MODEL:
   \   000000                DS 152
   \   000098                REQUIRE __INIT_XDATA_Z
      9          
     10            
     11          static void SW_Init(void); 
     12          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     13          module_s MD_MODULE = {ALIAS(SW_Init)};
   \                     MD_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for MD_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     14          
     15           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          static void SW_Init(void){}; 
   \                     ??SW_Init_6:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     17          
     18          
E:\Neocore\Hardware\Stack_core_src\radio.c
      1          #include "radio.h"
      2          #include "mem_utils.h"
      3          #include "debug.h"
      4          #include "radio_defs.h"
      5          #include "ustimer.h"
      6          #include "frame.h"
      7          #include "string.h"
      8          #include "alarm_timer.h"
      9          #include "model.h"
     10          #include "action_manager.h"
     11          #include "frame.h"
     12          #include "macros.h"
     13          #include "stdlib.h"
     14          
     15          static void HW_Init(void);
     16          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          module_s RADIO_MODULE = {ALIAS(SW_Init), ALIAS(HW_Init)};
   \                     RADIO_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for RADIO_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     18          
     19          static void random_core_init(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static char RXBUFF[128];
   \                     ??RXBUFF:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
     21          
     22          #define IEEE_MODE 0     //!< Режимы фазы сигнала
     23          #define NOT_IEEE_MODE 1 //!< Режимы фазы сигнала
     24          #define RSSI_OFFSET -76 //!< Константа для вычисления реальной мощности
     25          /*!
     26          \details 
     27           Расчет качества связи. Коэффициенты получаются эксперементально.
     28           Есть предположение, что количество ошибок будет пропорционально квадрату
     29           коеффициента корреляции сигнала.
     30           LIQ = 255 передача 1000 пакетов без ошибок CRC
     31           LIQ = 127 передача 1000 пакетов с 50% ошибок CRC
     32           LIQ = 0   передача 1000 пакетов с 100% ошибок CRC
     33          */ 
     34          
     35          #define CONST_A (int8_t)0 //!< Коэффициент A
     36          #define CONST_B (int8_t)1 //!< Коэффициент B
     37          #define LIQ_CALC(corr) ((corr-CONST_A)*CONST_B) //!< Формула вычисление LIQ 
     38          #define FRQ_CALC(x) (11+5*(x-11)) //!< Формул вычисления частоты сигнала
     39          
     40          #ifdef RADIO_DEBUG
     41            #define WRITE_TIME_DBG(where) (where) = AT_time()
     42            #define WRITE_PARA_DBG(where,val) (where) = (val) 
     43          #else
     44            #define WRITE_TIME_DBG(where) {}
     45            #define WRITE_PARA_DBG(where,val)
     46          #endif
     47          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          static void SW_Init(void){
   \                     ??SW_Init_7:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     49            // Настройки поумолчанию
     50            MODEL.RADIO.CRCError = 0;
   \   000004   90....       MOV       DPTR,#MODEL + 87
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
     51            MODEL.RADIO.CCAReject = 0;
   \   000016   90....       MOV       DPTR,#MODEL + 91
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7400         MOV       A,#0x0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   7400         MOV       A,#0x0
   \   000027   F0           MOVX      @DPTR,A
     52            MODEL.RADIO.channel = CH11;
   \   000028   90....       MOV       DPTR,#MODEL + 96
   \   00002B   740B         MOV       A,#0xb
   \   00002D   F0           MOVX      @DPTR,A
     53            MODEL.RADIO.power_tx = m0x5;
   \   00002E   90....       MOV       DPTR,#MODEL + 95
   \   000031   74C5         MOV       A,#-0x3b
   \   000033   F0           MOVX      @DPTR,A
     54            // Пост действия с радио
     55            random_core_init();
   \   000034                ; Setup parameters for call to function random_core_init
   \   000034   12....       LCALL     `??random_core_init::?relay`; Banked call to: random_core_init
     56          }
   \   000037   D083         POP       DPH
   \   000039   D082         POP       DPL
   \   00003B   02....       LJMP      ?BRET
     57          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     58          static void HW_Init(void){
   \                     ??HW_Init_6:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     59            FRMFILT0 = 0x00; // Отключаем фильтрацию пакетов
   \   000009   906180       MOV       DPTR,#0x6180
   \   00000C   7400         MOV       A,#0x0
   \   00000E   F0           MOVX      @DPTR,A
     60            MDMTEST1_u MDM1; // Устанавливаем режим модуляции
     61            MDM1.value = MDMTEST1;
   \   00000F   9061B9       MOV       DPTR,#0x61b9
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C0E0         PUSH      A
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
     62            MDM1.bits.MODULATION_MODE = IEEE_MODE;
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C2E1         CLR       0xE0 /* A   */.1
   \   000027   F0           MOVX      @DPTR,A
     63            MDMTEST1 = MDM1.value;   
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   9061B9       MOV       DPTR,#0x61b9
   \   000032   F0           MOVX      @DPTR,A
     64          }
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   D083         POP       DPH
   \   00003A   D082         POP       DPL
   \   00003C   02....       LJMP      ?BRET
     65          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          static inline void setFreq(channel_t ch)
   \                     ??setFreq:
     67          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
     68            ASSERT( (ch >= MIN_CH) && (ch <= MAX_CH));
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   940B         SUBB      A,#0xb
   \   000010   4006         JC        ??setFreq_1
   \   000012   EE           MOV       A,R6
   \   000013   C3           CLR       C
   \   000014   941D         SUBB      A,#0x1d
   \   000016   4025         JC        ??setFreq_2
   \                     ??setFreq_1:
   \   000018                ; Setup parameters for call to function printf
   \   000018   75..44       MOV       ?V0,#0x44
   \   00001B   75..00       MOV       ?V1,#0x0
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75....       MOV       ?V0,#`?<Constant "radio.c">` & 0xff
   \   000026   75....       MOV       ?V1,#(`?<Constant "radio.c">` >> 8) & 0xff
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_5` & 0xff
   \   000030   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_5` >> 8) & 0xff
   \   000032   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00003A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     69            // Устанавливаем частоту радиопередатчика
     70            FREQCTRL_u FRQ;
     71            FRQ.value = FRQ_CALC(MODEL.RADIO.channel);
   \                     ??setFreq_2:
   \   00003D   75F005       MOV       B,#0x5
   \   000040   90....       MOV       DPTR,#MODEL + 96
   \   000043   E0           MOVX      A,@DPTR
   \   000044   A4           MUL       AB
   \   000045   24D4         ADD       A,#-0x2c
   \   000047   C0E0         PUSH      A
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   D0E0         POP       A
   \   000051   F0           MOVX      @DPTR,A
     72            FREQCTRL = FRQ.value;  
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   E0           MOVX      A,@DPTR
   \   000059   90618F       MOV       DPTR,#0x618f
   \   00005C   F0           MOVX      @DPTR,A
     73          }
   \   00005D   7401         MOV       A,#0x1
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
     74          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          static inline void pre_config(void){
   \                     ??pre_config:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     76            setFreq(MODEL.RADIO.channel); 
   \   000004                ; Setup parameters for call to function setFreq
   \   000004   90....       MOV       DPTR,#MODEL + 96
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??setFreq::?relay`; Banked call to: setFreq
     77            TXPOWER = MODEL.RADIO.power_tx;
   \   00000C   90....       MOV       DPTR,#MODEL + 95
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   906190       MOV       DPTR,#0x6190
   \   000013   F0           MOVX      @DPTR,A
     78          }
   \   000014   D083         POP       DPH
   \   000016   D082         POP       DPL
   \   000018   02....       LJMP      ?BRET
     79          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          bool RI_SetChannel(channel_t channel){
   \                     RI_SetChannel:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     81            if (!(channel >= MIN_CH) && (channel <= MAX_CH))
   \   000004   E9           MOV       A,R1
   \   000005   C3           CLR       C
   \   000006   940B         SUBB      A,#0xb
   \   000008   5009         JNC       ??RI_SetChannel_0
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   941D         SUBB      A,#0x1d
   \   00000E   5003         JNC       ??RI_SetChannel_0
     82              return false;
   \   000010   C3           CLR       C
   \   000011   8006         SJMP      ??RI_SetChannel_1
     83            MODEL.RADIO.channel = channel;
   \                     ??RI_SetChannel_0:
   \   000013   E9           MOV       A,R1
   \   000014   90....       MOV       DPTR,#MODEL + 96
   \   000017   F0           MOVX      @DPTR,A
     84            return true;
   \   000018   D3           SETB      C
   \                     ??RI_SetChannel_1:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
     85          }
     86          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          static void LoadTXData(char *src, size_t len){
   \                     ??LoadTXData:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     88            ISFLUSHTX(); // Очищаем буфер передатчика
   \   000004   75E1EE       MOV       0xe1,#-0x12
     89            RFD = len + 2; // Поле LEN на два байта больше
   \   000007   EC           MOV       A,R4
   \   000008   2402         ADD       A,#0x2
   \   00000A   F5D9         MOV       0xd9,A
     90            for (size_t i = 0 ; i < len; i++)
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \                     ??LoadTXData_1:
   \   000010   C3           CLR       C
   \   000011   E8           MOV       A,R0
   \   000012   9C           SUBB      A,R4
   \   000013   E9           MOV       A,R1
   \   000014   9D           SUBB      A,R5
   \   000015   5012         JNC       ??LoadTXData_2
     91              RFD = src[i];
   \   000017   EA           MOV       A,R2
   \   000018   28           ADD       A,R0
   \   000019   F582         MOV       DPL,A
   \   00001B   EB           MOV       A,R3
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5D9         MOV       0xd9,A
   \   000022   08           INC       R0
   \   000023   E8           MOV       A,R0
   \   000024   70EA         JNZ       ??LoadTXData_1
   \   000026   09           INC       R1
   \   000027   80E7         SJMP      ??LoadTXData_1
     92            RFD = 0x00; // Добавляем CRC1,2
   \                     ??LoadTXData_2:
   \   000029   75D900       MOV       0xd9,#0x0
     93            RFD = 0x00;
   \   00002C   75D900       MOV       0xd9,#0x0
     94          };
   \   00002F   D083         POP       DPH
   \   000031   D082         POP       DPL
   \   000033   02....       LJMP      ?BRET
   \   000036                REQUIRE RFST
   \   000036                REQUIRE RFD
     95          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          static bool SendData(struct frame *fr){
   \                     ??SendData:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
     97            LoadTXData(fr->payload, fr->len);
   \   00000E                ; Setup parameters for call to function LoadTXData
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   7D00         MOV       R5,#0x0
   \   000016   EE           MOV       A,R6
   \   000017   2415         ADD       A,#0x15
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   3F           ADDC      A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??LoadTXData::?relay`; Banked call to: LoadTXData
     98            
     99            // Прежде чем включать радио нужно подождать
    100            if (fr->meta.SEND_TIME != 0) 
   \   000020   EE           MOV       A,R6
   \   000021   2413         ADD       A,#0x13
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   49           ORL       A,R1
   \   000030   6015         JZ        ??SendData_1
    101                AT_wait(fr->meta.SEND_TIME - 29);
   \   000032                ; Setup parameters for call to function AT_wait
   \   000032   EE           MOV       A,R6
   \   000033   2413         ADD       A,#0x13
   \   000035   F582         MOV       DPL,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   F583         MOV       DPH,A
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   24E3         ADD       A,#-0x1d
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   34FF         ADDC      A,#-0x1
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??AT_wait::?relay`; Banked call to: AT_wait
    102            
    103            ISRXON();
   \                     ??SendData_1:
   \   000047   75E1E3       MOV       0xe1,#-0x1d
    104            WRITE_TIME_DBG(MODEL.RADIO.DEBUG_TX.isrxon);
   \   00004A                ; Setup parameters for call to function AT_time
   \   00004A   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00004D   90....       MOV       DPTR,#MODEL + 105
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   F0           MOVX      @DPTR,A
    105            RFIRQF1 &= ~RFIRQF1_TXDONE;
   \   000055   5391FD       ANL       0x91,#0xfd
    106            RFIRQF0 &= ~RFIRQF0_SFD; 
   \   000058   53E9FD       ANL       0xe9,#0xfd
    107            bool result = true;
   \   00005B   D2..         SETB      ?VB.0
    108            while(!RSSISTAT);
   \                     ??SendData_2:
   \   00005D   906199       MOV       DPTR,#0x6199
   \   000060   E0           MOVX      A,@DPTR
   \   000061   60FA         JZ        ??SendData_2
    109            WRITE_TIME_DBG(MODEL.RADIO.DEBUG_TX.rssistat);
   \   000063                ; Setup parameters for call to function AT_time
   \   000063   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   000066   90....       MOV       DPTR,#MODEL + 107
   \   000069   EA           MOV       A,R2
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   EB           MOV       A,R3
   \   00006D   F0           MOVX      @DPTR,A
    110            TRY{
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   7408         MOV       A,#0x8
   \   000076                REQUIRE ?V7
   \   000076   12....       LCALL     ?SETJMP_XDATA
   \   000079   8A..         MOV       ?V0,R2
   \   00007B   8B..         MOV       ?V1,R3
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SendData>_0`:
   \   000082   0000         DW        0
   \   000084   01           DB        1
   \   000085   ....         DW        ??SendData_3
   \   000087   ....         DW        ??SendData_4
   \   000089   ....         DW        ??SendData_5
    111              if (fr->meta.SEND_TIME != 0) // Отправка в определеное время
   \                     ??SendData_4:
   \   00008B   EE           MOV       A,R6
   \   00008C   2413         ADD       A,#0x13
   \   00008E   F582         MOV       DPL,A
   \   000090   E4           CLR       A
   \   000091   3F           ADDC      A,R7
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   E8           MOV       A,R0
   \   00009A   49           ORL       A,R1
   \   00009B   6015         JZ        ??SendData_6
    112                AT_wait(fr->meta.SEND_TIME - 13); 
   \   00009D                ; Setup parameters for call to function AT_wait
   \   00009D   EE           MOV       A,R6
   \   00009E   2413         ADD       A,#0x13
   \   0000A0   F582         MOV       DPL,A
   \   0000A2   E4           CLR       A
   \   0000A3   3F           ADDC      A,R7
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   24F3         ADD       A,#-0xd
   \   0000A9   FA           MOV       R2,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   34FF         ADDC      A,#-0x1
   \   0000AE   FB           MOV       R3,A
   \   0000AF   12....       LCALL     `??AT_wait::?relay`; Banked call to: AT_wait
    113              ISTXONCCA();
   \                     ??SendData_6:
   \   0000B2   75E1EA       MOV       0xe1,#-0x16
    114              WRITE_TIME_DBG(MODEL.RADIO.DEBUG_TX.istxoncca);
   \   0000B5                ; Setup parameters for call to function AT_time
   \   0000B5   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   0000B8   90....       MOV       DPTR,#MODEL + 109
   \   0000BB   EA           MOV       A,R2
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   EB           MOV       A,R3
   \   0000BF   F0           MOVX      @DPTR,A
    115              if (!(FSMSTAT1 & 1<<3)) //SAMPLED_CCA == 0
   \   0000C0   906193       MOV       DPTR,#0x6193
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000C6   400F         JC        ??SendData_7
    116                THROW(1);
   \   0000C8   7A01         MOV       R2,#0x1
   \   0000CA   7B00         MOV       R3,#0x0
   \   0000CC   85..82       MOV       DPL,?XSP + 0
   \   0000CF   85..83       MOV       DPH,?XSP + 1
   \   0000D2   7408         MOV       A,#0x8
   \   0000D4                REQUIRE ?V7
   \   0000D4   02....       LJMP      ?LONGJMP_XDATA
    117              // Ждем отправки SFD
    118              while (!(RFIRQF0 & RFIRQF0_SFD));
   \                     ??SendData_7:
   \   0000D7   E5E9         MOV       A,0xe9
   \   0000D9   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000DB   50FA         JNC       ??SendData_7
    119              fr->meta.TIMESTAMP = AT_time();
   \   0000DD                ; Setup parameters for call to function AT_time
   \   0000DD   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   A3           INC       DPTR
   \   0000E5   EA           MOV       A,R2
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   A3           INC       DPTR
   \   0000E8   EB           MOV       A,R3
   \   0000E9   F0           MOVX      @DPTR,A
    120              WRITE_TIME_DBG(MODEL.RADIO.DEBUG_TX.sfd);
   \   0000EA                ; Setup parameters for call to function AT_time
   \   0000EA   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   0000ED   90....       MOV       DPTR,#MODEL + 111
   \   0000F0   EA           MOV       A,R2
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   EB           MOV       A,R3
   \   0000F4   F0           MOVX      @DPTR,A
    121              // Ждем завершения отправки сообщения
    122              while (!(RFIRQF1 & RFIRQF1_TXDONE));
   \                     ??SendData_8:
   \   0000F5   E591         MOV       A,0x91
   \   0000F7   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000F9   50FA         JNC       ??SendData_8
    123              WRITE_TIME_DBG(MODEL.RADIO.DEBUG_TX.txdone);
   \   0000FB                ; Setup parameters for call to function AT_time
   \   0000FB   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   0000FE   90....       MOV       DPTR,#MODEL + 113
   \   000101   EA           MOV       A,R2
   \   000102   F0           MOVX      @DPTR,A
   \   000103   A3           INC       DPTR
   \   000104   EB           MOV       A,R3
   \   000105   F0           MOVX      @DPTR,A
    124              
    125            }
    126            CATCH(1){ //SAMPLED_CCA == 0
   \   000106   8002         SJMP      ??SendData_3
    127              result = false;
   \                     ??SendData_5:
   \   000108   C2..         CLR       ?VB.0
    128            }
    129            FINALLY{
    130              ISRFOFF();
   \                     ??SendData_3:
   \   00010A   75E1EF       MOV       0xe1,#-0x11
    131            }
    132            ETRY;  
    133            return result;
   \   00010D   A2..         MOV       C,?VB.0
   \   00010F   7431         MOV       A,#0x31
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   7F02         MOV       R7,#0x2
   \   000116   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000119                REQUIRE RFST
   \   000119                REQUIRE RFIRQF1
   \   000119                REQUIRE RFIRQF0
    134          }
    135          
    136          /*!
    137          \brief Передает данные в эфир
    138          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          bool RI_Send(struct frame *fr){
   \                     RI_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    140            ASSERT(fr != NULL);
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   E8           MOV       A,R0
   \   000021   49           ORL       A,R1
   \   000022   7025         JNZ       ??RI_Send_0
   \   000024                ; Setup parameters for call to function printf
   \   000024   75..8C       MOV       ?V0,#-0x74
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75....       MOV       ?V0,#`?<Constant "radio.c">` & 0xff
   \   000032   75....       MOV       ?V1,#(`?<Constant "radio.c">` >> 8) & 0xff
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_5` & 0xff
   \   00003C   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_5` >> 8) & 0xff
   \   00003E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    141            pre_config();
   \                     ??RI_Send_0:
   \   000049                ; Setup parameters for call to function pre_config
   \   000049   12....       LCALL     `??pre_config::?relay`; Banked call to: pre_config
    142            stamp_t start = UST_now();
   \   00004C                ; Setup parameters for call to function UST_now
   \   00004C   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00004F   740A         MOV       A,#0xa
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?XSTORE_R2345
    143            bool send_res = SendData(fr);
   \   000057                ; Setup parameters for call to function SendData
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   FA           MOV       R2,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??SendData::?relay`; Banked call to: SendData
   \   000065   92..         MOV       ?VB.0,C
    144            stamp_t stop = UST_now();
   \   000067                ; Setup parameters for call to function UST_now
   \   000067   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00006A   7406         MOV       A,#0x6
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?XSTORE_R2345
    145            //TODO Неверно считает интервал так как при отправке
    146            // sync пакета мы ждем
    147            ustime_t tx_time = UST_interval(start, stop); 
   \   000072                ; Setup parameters for call to function UST_interval
   \   000072   7406         MOV       A,#0x6
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007A   740E         MOV       A,#0xe
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?XLOAD_R2345
   \   000082   12....       LCALL     `??UST_interval::?relay`; Banked call to: UST_interval
   \   000085   7404         MOV       A,#0x4
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?XSTORE_R2345
    148            WRITE_PARA_DBG(MODEL.RADIO.DEBUG_TX.fulltime, tx_time);
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?XLOAD_R0123
   \   00009A   90....       MOV       DPTR,#MODEL + 116
   \   00009D   12....       LCALL     ?XSTORE_R0123
    149            MODEL.RADIO.UptimeTX += tx_time;
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?L_MOV_X
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?UL_TO_FLT
   \   0000AF   90....       MOV       DPTR,#MODEL + 97
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   79..         MOV       R1,#?V4
   \   0000BB   12....       LCALL     ?FLT_ADD
   \   0000BE   90....       MOV       DPTR,#MODEL + 97
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?L_MOV_TO_X
    150            WRITE_PARA_DBG(MODEL.RADIO.DEBUG_TX.ccasampled, send_res);
   \   0000C6   A2..         MOV       C,?VB.0
   \   0000C8   E4           CLR       A
   \   0000C9   33           RLC       A
   \   0000CA   90....       MOV       DPTR,#MODEL + 115
   \   0000CD   F0           MOVX      @DPTR,A
    151            if (!send_res)
   \   0000CE   A2..         MOV       C,?VB.0
   \   0000D0   4010         JC        ??RI_Send_1
    152              MODEL.RADIO.CCAReject++;
   \   0000D2   90....       MOV       DPTR,#__Constant_1
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?L_MOV_X
   \   0000DA   90....       MOV       DPTR,#MODEL + 91
   \   0000DD   78..         MOV       R0,#?V0
   \   0000DF   12....       LCALL     ?L_ADD_TO_X
    153            return send_res;
   \                     ??RI_Send_1:
   \   0000E2   A2..         MOV       C,?VB.0
   \   0000E4   740E         MOV       A,#0xe
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E9   7F08         MOV       R7,#0x8
   \   0000EB   02....       LJMP      ?BANKED_LEAVE_XDATA
    154          }
    155          
    156          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          static void UnLoadRXData(char *src, size_t len){
   \                     ??UnLoadRXData:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    158            for (size_t i = 0 ; i < len; i++)
   \   000004   7800         MOV       R0,#0x0
   \   000006   7900         MOV       R1,#0x0
   \                     ??UnLoadRXData_1:
   \   000008   C3           CLR       C
   \   000009   E8           MOV       A,R0
   \   00000A   9C           SUBB      A,R4
   \   00000B   E9           MOV       A,R1
   \   00000C   9D           SUBB      A,R5
   \   00000D   5016         JNC       ??UnLoadRXData_2
    159              src[i] = RFD;
   \   00000F   E5D9         MOV       A,0xd9
   \   000011   C0E0         PUSH      A
   \   000013   EA           MOV       A,R2
   \   000014   28           ADD       A,R0
   \   000015   F582         MOV       DPL,A
   \   000017   EB           MOV       A,R3
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   08           INC       R0
   \   00001F   E8           MOV       A,R0
   \   000020   70E6         JNZ       ??UnLoadRXData_1
   \   000022   09           INC       R1
   \   000023   80E3         SJMP      ??UnLoadRXData_1
    160          };
   \                     ??UnLoadRXData_2:
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
   \   00002C                REQUIRE RFD
    161          
    162          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          static bool RecvData(ustime_t timeout, nwtime_t *sfd_stamp){   
   \                     ??RecvData:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 53
   \   000005   74CB         MOV       A,#-0x35
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   7443         MOV       A,#0x43
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FF           MOV       R7,A
    164            bool recv_result = true;
   \   00001C   D2..         SETB      ?VB.0
    165            
    166            ISFLUSHRX();
   \   00001E   75E1ED       MOV       0xe1,#-0x13
    167            RFIRQF0 &= ~RFIRQF0_RXPKTDONE;  
   \   000021   53E9BF       ANL       0xe9,#0xbf
    168            RFIRQF0 &= ~RFIRQF0_SFD; 
   \   000024   53E9FD       ANL       0xe9,#0xfd
    169            ISRXON();
   \   000027   75E1E3       MOV       0xe1,#-0x1d
    170            WRITE_TIME_DBG(MODEL.RADIO.DEBUG_RX.isrxon);
   \   00002A                ; Setup parameters for call to function AT_time
   \   00002A   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00002D   90....       MOV       DPTR,#MODEL + 120
   \   000030   EA           MOV       A,R2
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   EB           MOV       A,R3
   \   000034   F0           MOVX      @DPTR,A
    171            stamp_t start = UST_now();
   \   000035                ; Setup parameters for call to function UST_now
   \   000035   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   000038   EA           MOV       A,R2
   \   000039   F8           MOV       R0,A
   \   00003A   EB           MOV       A,R3
   \   00003B   F9           MOV       R1,A
   \   00003C   EC           MOV       A,R4
   \   00003D   FA           MOV       R2,A
   \   00003E   ED           MOV       A,R5
   \   00003F   FB           MOV       R3,A
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   12....       LCALL     ?XSTORE_R0123
    172            TRY{
   \   000049   7404         MOV       A,#0x4
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   7408         MOV       A,#0x8
   \   000050                REQUIRE ?V7
   \   000050   12....       LCALL     ?SETJMP_XDATA
   \   000053   8A..         MOV       ?V4,R2
   \   000055   8B..         MOV       ?V5,R3
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for RecvData>_0`:
   \   00005C   0000         DW        0
   \   00005E   01           DB        1
   \   00005F   ....         DW        ??RecvData_1
   \   000061   ....         DW        ??RecvData_2
   \   000063   ....         DW        ??RecvData_3
    173              while(true){
    174                if (UST_time_over(start, timeout))
   \                     ??RecvData_2:
   \   000065                ; Setup parameters for call to function UST_time_over
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?XLOAD_R2345
   \   000072   12....       LCALL     `??UST_time_over::?relay`; Banked call to: UST_time_over
   \   000075   7404         MOV       A,#0x4
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   500E         JNC       ??RecvData_4
    175                  THROW(1);
   \   00007C   7A01         MOV       R2,#0x1
   \   00007E   7B00         MOV       R3,#0x0
   \   000080   7404         MOV       A,#0x4
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   7408         MOV       A,#0x8
   \   000087                REQUIRE ?V7
   \   000087   02....       LJMP      ?LONGJMP_XDATA
    176                
    177                if ((RFIRQF0 & RFIRQF0_SFD)){ // Принят сигнал SFD
   \                     ??RecvData_4:
   \   00008A   E5E9         MOV       A,0xe9
   \   00008C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00008E   50D5         JNC       ??RecvData_2
    178                  *sfd_stamp = AT_time(); 
   \   000090                ; Setup parameters for call to function AT_time
   \   000090   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   EA           MOV       A,R2
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   EB           MOV       A,R3
   \   00009B   F0           MOVX      @DPTR,A
    179                  WRITE_TIME_DBG(MODEL.RADIO.DEBUG_RX.sfd);
   \   00009C                ; Setup parameters for call to function AT_time
   \   00009C   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00009F   90....       MOV       DPTR,#MODEL + 122
   \   0000A2   EA           MOV       A,R2
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   EB           MOV       A,R3
   \   0000A6   F0           MOVX      @DPTR,A
    180                  break;
    181                }
    182              }
    183              // Ждем окончания приема пакета
    184              while (!(RFIRQF0 & RFIRQF0_RXPKTDONE));
   \                     ??RecvData_5:
   \   0000A7   E5E9         MOV       A,0xe9
   \   0000A9   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000AB   50FA         JNC       ??RecvData_5
    185              WRITE_TIME_DBG(MODEL.RADIO.DEBUG_RX.rxdone);
   \   0000AD                ; Setup parameters for call to function AT_time
   \   0000AD   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   0000B0   90....       MOV       DPTR,#MODEL + 124
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   EB           MOV       A,R3
   \   0000B7   F0           MOVX      @DPTR,A
    186            }
    187            CATCH(1){ // Вышло время ожидания
   \   0000B8   8002         SJMP      ??RecvData_1
    188              recv_result = false;
   \                     ??RecvData_3:
   \   0000BA   C2..         CLR       ?VB.0
    189            }
    190            FINALLY{
    191              ISRFOFF();
   \                     ??RecvData_1:
   \   0000BC   75E1EF       MOV       0xe1,#-0x11
    192            }
    193            ETRY;
    194            return recv_result;
   \   0000BF   A2..         MOV       C,?VB.0
   \   0000C1   7435         MOV       A,#0x35
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   7F06         MOV       R7,#0x6
   \   0000C8   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000CB                REQUIRE RFST
   \   0000CB                REQUIRE RFIRQF0
    195          }
    196          
    197          /*!
    198          \brief Принимает данные из эфира
    199          \details Функция принимает данные из эфира. Проводит проверку CRC, увеличивает
    200          RI_CRC_ERROR. Отмечает время прихода SFD в тактах сетевого времени .
    201          \param[in] timeout Время ожидания данных в микросекундах
    202          \return Возвращает NULL если данных нет
    203          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          struct frame* RI_Receive(ustime_t timeout){
   \                     RI_Receive:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7410         MOV       A,#0x10
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
    205            // Устанавливаем частоту передачи пакета
    206            pre_config();
   \   00001A                ; Setup parameters for call to function pre_config
   \   00001A   12....       LCALL     `??pre_config::?relay`; Banked call to: pre_config
    207            nwtime_t sfd_stamp;
    208               
    209            // Принимаем пакет 
    210            stamp_t start = UST_now();
   \   00001D                ; Setup parameters for call to function UST_now
   \   00001D   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   000020   740C         MOV       A,#0xc
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?XSTORE_R2345
    211            bool recv_res = RecvData(timeout, &sfd_stamp);
   \   000028                ; Setup parameters for call to function RecvData
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP100_8
   \   00002D   88..         MOV       ?V0,R0
   \   00002F   89..         MOV       ?V1,R1
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?XLOAD_R2345
   \   00003E   12....       LCALL     `??RecvData::?relay`; Banked call to: RecvData
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   92..         MOV       ?VB.0,C
    212            stamp_t stop = UST_now();
   \   000048                ; Setup parameters for call to function UST_now
   \   000048   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00004B   7408         MOV       A,#0x8
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?XSTORE_R2345
    213            ustime_t rx_time = UST_interval(start, stop); 
   \   000053                ; Setup parameters for call to function UST_interval
   \   000053   7408         MOV       A,#0x8
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005B   7410         MOV       A,#0x10
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?XLOAD_R2345
   \   000063   12....       LCALL     `??UST_interval::?relay`; Banked call to: UST_interval
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   7404         MOV       A,#0x4
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?XSTORE_R2345
    214            WRITE_PARA_DBG(MODEL.RADIO.DEBUG_RX.fulltime, rx_time);
   \   000073   7404         MOV       A,#0x4
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?XLOAD_R0123
   \   00007B   90....       MOV       DPTR,#MODEL + 126
   \   00007E   12....       LCALL     ?XSTORE_R0123
    215            MODEL.RADIO.UptimeRX += rx_time;
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?L_MOV_X
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?UL_TO_FLT
   \   000090   90....       MOV       DPTR,#MODEL + 101
   \   000093   78..         MOV       R0,#?V4
   \   000095   12....       LCALL     ?L_MOV_X
   \   000098   78..         MOV       R0,#?V0
   \   00009A   79..         MOV       R1,#?V4
   \   00009C   12....       LCALL     ?FLT_ADD
   \   00009F   90....       MOV       DPTR,#MODEL + 101
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?L_MOV_TO_X
    216            WRITE_PARA_DBG(MODEL.RADIO.DEBUG_RX.received, recv_res);
   \   0000A7   A2..         MOV       C,?VB.0
   \   0000A9   E4           CLR       A
   \   0000AA   33           RLC       A
   \   0000AB   90....       MOV       DPTR,#MODEL + 130
   \   0000AE   F0           MOVX      @DPTR,A
    217            if (!recv_res) // Нет пакета, возвращаем NULL
   \   0000AF   A2..         MOV       C,?VB.0
   \   0000B1   4007         JC        ??RI_Receive_0
    218              return NULL;
   \   0000B3   7A00         MOV       R2,#0x0
   \   0000B5   7B00         MOV       R3,#0x0
   \   0000B7   02....       LJMP      ??RI_Receive_1 & 0xFFFF
    219            
    220            uint8_t frame_size = RXFIFOCNT; // Количество принятых данных
   \                     ??RI_Receive_0:
   \   0000BA   90619B       MOV       DPTR,#0x619b
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F5..         MOV       ?V0,A
    221            
    222            // Минимальный размер FCS1,FCS2 - 2 байта. LEN не включен в подсчет 
    223            if (frame_size <= 2)
   \   0000C0   E5..         MOV       A,?V0
   \   0000C2   C3           CLR       C
   \   0000C3   9403         SUBB      A,#0x3
   \   0000C5   5007         JNC       ??RI_Receive_2
    224              return NULL;
   \   0000C7   7A00         MOV       R2,#0x0
   \   0000C9   7B00         MOV       R3,#0x0
   \   0000CB   02....       LJMP      ??RI_Receive_1 & 0xFFFF
    225            
    226            UnLoadRXData(RXBUFF, frame_size);
   \                     ??RI_Receive_2:
   \   0000CE                ; Setup parameters for call to function UnLoadRXData
   \   0000CE   E5..         MOV       A,?V0
   \   0000D0   FC           MOV       R4,A
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   7A..         MOV       R2,#??RXBUFF & 0xff
   \   0000D5   7B..         MOV       R3,#(??RXBUFF >> 8) & 0xff
   \   0000D7   12....       LCALL     `??UnLoadRXData::?relay`; Banked call to: UnLoadRXData
    227            
    228            int8_t  FCS1 = RXBUFF[frame_size - 2]; // RSSI
   \   0000DA   E5..         MOV       A,?V0
   \   0000DC   F8           MOV       R0,A
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   74..         MOV       A,#(??RXBUFF + 254) & 0xff
   \   0000E1   28           ADD       A,R0
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   74..         MOV       A,#((??RXBUFF - 2) >> 8) & 0xff
   \   0000E6   39           ADDC      A,R1
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   C0E0         PUSH      A
   \   0000EC   7401         MOV       A,#0x1
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   D0E0         POP       A
   \   0000F3   F0           MOVX      @DPTR,A
    229            uint8_t FCS2 = RXBUFF[frame_size - 1]; // bit7 = CRCOK, bit[6..0] Corr_val
   \   0000F4   E5..         MOV       A,?V0
   \   0000F6   F8           MOV       R0,A
   \   0000F7   7900         MOV       R1,#0x0
   \   0000F9   74..         MOV       A,#(??RXBUFF + 255) & 0xff
   \   0000FB   28           ADD       A,R0
   \   0000FC   F582         MOV       DPL,A
   \   0000FE   74..         MOV       A,#((??RXBUFF - 1) >> 8) & 0xff
   \   000100   39           ADDC      A,R1
   \   000101   F583         MOV       DPH,A
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F5..         MOV       ?V1,A
    230            uint8_t LEN_F = RXBUFF[0]; // Поле LEN
   \   000106   90....       MOV       DPTR,#??RXBUFF
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   C0E0         PUSH      A
   \   00010C   85..82       MOV       DPL,?XSP + 0
   \   00010F   85..83       MOV       DPH,?XSP + 1
   \   000112   D0E0         POP       A
   \   000114   F0           MOVX      @DPTR,A
    231            
    232            // Проверим поле LEN. Размер данных в заголовке должен совпадать
    233            // с фактической длинной принятых данных
    234            if (LEN_F != frame_size - 1){
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   FA           MOV       R2,A
   \   00011D   7B00         MOV       R3,#0x0
   \   00011F   E5..         MOV       A,?V0
   \   000121   F8           MOV       R0,A
   \   000122   7900         MOV       R1,#0x0
   \   000124   E8           MOV       A,R0
   \   000125   24FF         ADD       A,#-0x1
   \   000127   F8           MOV       R0,A
   \   000128   E9           MOV       A,R1
   \   000129   34FF         ADDC      A,#-0x1
   \   00012B   F9           MOV       R1,A
   \   00012C   E8           MOV       A,R0
   \   00012D   6A           XRL       A,R2
   \   00012E   7002         JNZ       ??RI_Receive_3
   \   000130   E9           MOV       A,R1
   \   000131   6B           XRL       A,R3
   \                     ??RI_Receive_3:
   \   000132   6017         JZ        ??RI_Receive_4
    235              MODEL.RADIO.CRCError++;
   \   000134   90....       MOV       DPTR,#__Constant_1
   \   000137   78..         MOV       R0,#?V4
   \   000139   12....       LCALL     ?L_MOV_X
   \   00013C   90....       MOV       DPTR,#MODEL + 87
   \   00013F   78..         MOV       R0,#?V4
   \   000141   12....       LCALL     ?L_ADD_TO_X
    236              return NULL;
   \   000144   7A00         MOV       R2,#0x0
   \   000146   7B00         MOV       R3,#0x0
   \   000148   02....       LJMP      ??RI_Receive_1 & 0xFFFF
    237            }
    238            
    239            // Проверим поле CRCOK
    240            if (!(FCS2 && 1<<7)){
   \                     ??RI_Receive_4:
   \   00014B   E5..         MOV       A,?V1
   \   00014D   7017         JNZ       ??RI_Receive_5
    241              MODEL.RADIO.CRCError++;
   \   00014F   90....       MOV       DPTR,#__Constant_1
   \   000152   78..         MOV       R0,#?V4
   \   000154   12....       LCALL     ?L_MOV_X
   \   000157   90....       MOV       DPTR,#MODEL + 87
   \   00015A   78..         MOV       R0,#?V4
   \   00015C   12....       LCALL     ?L_ADD_TO_X
    242              return NULL;
   \   00015F   7A00         MOV       R2,#0x0
   \   000161   7B00         MOV       R3,#0x0
   \   000163   02....       LJMP      ??RI_Receive_1 & 0xFFFF
    243            }
    244            
    245            // Создаем буфер, последнии два байта FCS1,2 и поле LEN не копируем
    246            struct frame *frame = FR_create();
   \                     ??RI_Receive_5:
   \   000166                ; Setup parameters for call to function FR_create
   \   000166   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000169   8A..         MOV       ?V2,R2
   \   00016B   8B..         MOV       ?V3,R3
   \   00016D   AE..         MOV       R6,?V2
   \   00016F   AF..         MOV       R7,?V3
    247            ASSERT(frame);
   \   000171   EE           MOV       A,R6
   \   000172   4F           ORL       A,R7
   \   000173   7025         JNZ       ??RI_Receive_6
   \   000175                ; Setup parameters for call to function printf
   \   000175   75..F7       MOV       ?V2,#-0x9
   \   000178   75..00       MOV       ?V3,#0x0
   \   00017B   78..         MOV       R0,#?V2
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000180   75....       MOV       ?V2,#`?<Constant "radio.c">` & 0xff
   \   000183   75....       MOV       ?V3,#(`?<Constant "radio.c">` >> 8) & 0xff
   \   000186   78..         MOV       R0,#?V2
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018B   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_5` & 0xff
   \   00018D   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_5` >> 8) & 0xff
   \   00018F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000192   7404         MOV       A,#0x4
   \   000194   12....       LCALL     ?DEALLOC_XSTACK8
   \   000197                ; Setup parameters for call to function DBG_CORE_HALT
   \   000197   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    248            bool add_h = FR_add_header(frame, &RXBUFF[1], frame_size - 3);
   \                     ??RI_Receive_6:
   \   00019A                ; Setup parameters for call to function FR_add_header
   \   00019A   74FD         MOV       A,#-0x3
   \   00019C   25..         ADD       A,?V0
   \   00019E   F9           MOV       R1,A
   \   00019F   7C..         MOV       R4,#(??RXBUFF + 1) & 0xff
   \   0001A1   7D..         MOV       R5,#((??RXBUFF + 1) >> 8) & 0xff
   \   0001A3   EE           MOV       A,R6
   \   0001A4   FA           MOV       R2,A
   \   0001A5   EF           MOV       A,R7
   \   0001A6   FB           MOV       R3,A
   \   0001A7   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
   \   0001AA   92..         MOV       ?VB.1,C
    249            ASSERT(add_h);
   \   0001AC   A2..         MOV       C,?VB.1
   \   0001AE   4025         JC        ??RI_Receive_7
   \   0001B0                ; Setup parameters for call to function printf
   \   0001B0   75..F9       MOV       ?V2,#-0x7
   \   0001B3   75..00       MOV       ?V3,#0x0
   \   0001B6   78..         MOV       R0,#?V2
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BB   75....       MOV       ?V2,#`?<Constant "radio.c">` & 0xff
   \   0001BE   75....       MOV       ?V3,#(`?<Constant "radio.c">` >> 8) & 0xff
   \   0001C1   78..         MOV       R0,#?V2
   \   0001C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C6   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_5` & 0xff
   \   0001C8   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_5` >> 8) & 0xff
   \   0001CA   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001CD   7404         MOV       A,#0x4
   \   0001CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D2                ; Setup parameters for call to function DBG_CORE_HALT
   \   0001D2   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    250            
    251            frame->meta.TIMESTAMP = sfd_stamp;
   \                     ??RI_Receive_7:
   \   0001D5   7402         MOV       A,#0x2
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F8           MOV       R0,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F9           MOV       R1,A
   \   0001DF   8E82         MOV       DPL,R6
   \   0001E1   8F83         MOV       DPH,R7
   \   0001E3   A3           INC       DPTR
   \   0001E4   E8           MOV       A,R0
   \   0001E5   F0           MOVX      @DPTR,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E9           MOV       A,R1
   \   0001E8   F0           MOVX      @DPTR,A
    252            frame->meta.RSSI_SIG =  FCS1 + RSSI_OFFSET;
   \   0001E9   7401         MOV       A,#0x1
   \   0001EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   24B4         ADD       A,#-0x4c
   \   0001F1   C0E0         PUSH      A
   \   0001F3   8E82         MOV       DPL,R6
   \   0001F5   8F83         MOV       DPH,R7
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   D0E0         POP       A
   \   0001FC   F0           MOVX      @DPTR,A
    253            uint8_t corr = FCS2 & 0x7F;
   \   0001FD   747F         MOV       A,#0x7f
   \   0001FF   55..         ANL       A,?V1
   \   000201   F8           MOV       R0,A
    254            frame->meta.LIQ = LIQ_CALC(corr);
   \   000202   E8           MOV       A,R0
   \   000203   C0E0         PUSH      A
   \   000205   8E82         MOV       DPL,R6
   \   000207   8F83         MOV       DPH,R7
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   A3           INC       DPTR
   \   00020D   D0E0         POP       A
   \   00020F   F0           MOVX      @DPTR,A
    255            frame->meta.CH = MODEL.RADIO.channel;
   \   000210   90....       MOV       DPTR,#MODEL + 96
   \   000213   E0           MOVX      A,@DPTR
   \   000214   C0E0         PUSH      A
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   D0E0         POP       A
   \   000222   F0           MOVX      @DPTR,A
    256            return frame;
   \   000223   EE           MOV       A,R6
   \   000224   FA           MOV       R2,A
   \   000225   EF           MOV       A,R7
   \   000226   FB           MOV       R3,A
   \                     ??RI_Receive_1:
   \   000227   7414         MOV       A,#0x14
   \   000229   12....       LCALL     ?DEALLOC_XSTACK8
   \   00022C   7F08         MOV       R7,#0x8
   \   00022E   02....       LJMP      ?BANKED_LEAVE_XDATA
    257          }
    258          
    259          
    260          /**
    261          @breif Подссчет количества бит в байте
    262          @return Возвращает количество бит
    263          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          static uint8_t bits_count(uint8_t value) {
   \                     ??bits_count:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   FA           MOV       R2,A
    265            int ret = 0;
   \   000002   7800         MOV       R0,#0x0
   \   000004   7900         MOV       R1,#0x0
    266            for ( ; value; value = value >> 1 )
   \                     ??bits_count_1:
   \   000006   EA           MOV       A,R2
   \   000007   6014         JZ        ??bits_count_2
    267              ret += value & 1;
   \   000009   EA           MOV       A,R2
   \   00000A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   FC           MOV       R4,A
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   2C           ADD       A,R4
   \   000013   F8           MOV       R0,A
   \   000014   E9           MOV       A,R1
   \   000015   3D           ADDC      A,R5
   \   000016   F9           MOV       R1,A
   \   000017   EA           MOV       A,R2
   \   000018   C3           CLR       C
   \   000019   13           RRC       A
   \   00001A   FA           MOV       R2,A
   \   00001B   80E9         SJMP      ??bits_count_1
    268            return ret;
   \                     ??bits_count_2:
   \   00001D   E8           MOV       A,R0
   \   00001E   F9           MOV       R1,A
   \   00001F   02....       LJMP      ?BRET
    269          }
    270          
    271          /**
    272          @brief Возращает 1 байт случайного числа
    273          @details Радио выдает всего лишь дви бита, нам нужно 8 
    274          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          static inline uint8_t getRNDByte(void)
   \                     ??getRNDByte:
    276          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    277            uint8_t val = 0;
   \   000004   7900         MOV       R1,#0x0
    278            val |= RFRND << 0;
   \   000006   9061A7       MOV       DPTR,#0x61a7
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C9           XCH       A,R1
   \   00000B   49           ORL       A,R1
   \   00000C   C9           XCH       A,R1
    279            val |= RFRND << 2;
   \   00000D   9061A7       MOV       DPTR,#0x61a7
   \   000010   E0           MOVX      A,@DPTR
   \   000011   33           RLC       A
   \   000012   33           RLC       A
   \   000013   54FC         ANL       A,#0xfc
   \   000015   C9           XCH       A,R1
   \   000016   49           ORL       A,R1
   \   000017   C9           XCH       A,R1
    280            val |= RFRND << 4;
   \   000018   9061A7       MOV       DPTR,#0x61a7
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C4           SWAP      A
   \   00001D   54F0         ANL       A,#0xf0
   \   00001F   C9           XCH       A,R1
   \   000020   49           ORL       A,R1
   \   000021   C9           XCH       A,R1
    281            val |= RFRND << 6;
   \   000022   9061A7       MOV       DPTR,#0x61a7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C4           SWAP      A
   \   000027   33           RLC       A
   \   000028   33           RLC       A
   \   000029   54C0         ANL       A,#0xc0
   \   00002B   C9           XCH       A,R1
   \   00002C   49           ORL       A,R1
   \   00002D   C9           XCH       A,R1
    282            return val;
   \   00002E   D083         POP       DPH
   \   000030   D082         POP       DPL
   \   000032   02....       LJMP      ?BRET
    283          }
    284          
    285          /**
    286          @brief Возвращает случайное число с числом включеных бит от 2 до 6 включительно
    287          @details Случайные числа появляются в регистре с частотой 170нс. Функция 
    288          возвращает гарантированно новое значение. 
    289          @return возвращает случайное число.
    290          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          static inline uint8_t readRandom(void)
   \                     ??readRandom:
    292          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    293            uint8_t rnd_val = 0;
   \   000005   7E00         MOV       R6,#0x0
    294            uint8_t bit_cnt = 0;
   \   000007   7F00         MOV       R7,#0x0
    295            while ( bit_cnt <= 2 || bit_cnt >= 6 )
   \                     ??readRandom_1:
   \   000009   EF           MOV       A,R7
   \   00000A   C3           CLR       C
   \   00000B   9403         SUBB      A,#0x3
   \   00000D   4006         JC        ??readRandom_2
   \   00000F   EF           MOV       A,R7
   \   000010   C3           CLR       C
   \   000011   9406         SUBB      A,#0x6
   \   000013   401A         JC        ??readRandom_3
    296            {
    297              rnd_val = getRNDByte();
   \                     ??readRandom_2:
   \   000015                ; Setup parameters for call to function getRNDByte
   \   000015   12....       LCALL     `??getRNDByte::?relay`; Banked call to: getRNDByte
   \   000018   E9           MOV       A,R1
   \   000019   FE           MOV       R6,A
    298              while (rnd_val == getRNDByte());
   \                     ??readRandom_4:
   \   00001A                ; Setup parameters for call to function getRNDByte
   \   00001A   12....       LCALL     `??getRNDByte::?relay`; Banked call to: getRNDByte
   \   00001D   E9           MOV       A,R1
   \   00001E   6E           XRL       A,R6
   \   00001F   60F9         JZ        ??readRandom_4
    299              rnd_val = getRNDByte();
   \   000021                ; Setup parameters for call to function getRNDByte
   \   000021   12....       LCALL     `??getRNDByte::?relay`; Banked call to: getRNDByte
   \   000024   E9           MOV       A,R1
   \   000025   FE           MOV       R6,A
    300              bit_cnt = bits_count(rnd_val);
   \   000026                ; Setup parameters for call to function bits_count
   \   000026   EE           MOV       A,R6
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??bits_count::?relay`; Banked call to: bits_count
   \   00002B   E9           MOV       A,R1
   \   00002C   FF           MOV       R7,A
   \   00002D   80DA         SJMP      ??readRandom_1
    301            }
    302            return rnd_val;
   \                     ??readRandom_3:
   \   00002F   EE           MOV       A,R6
   \   000030   F9           MOV       R1,A
   \   000031   7F01         MOV       R7,#0x1
   \   000033   02....       LJMP      ?BANKED_LEAVE_XDATA
    303          }
    304          
    305          /*!
    306          \brief Иницилизирует ядро генератора случайных чисел данными из эфира
    307          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          static void random_core_init(void)  
   \                     ??random_core_init:
    309          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    310            unsigned int rnd_core = 0;;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    311               
    312            pre_config();
   \   000009                ; Setup parameters for call to function pre_config
   \   000009   12....       LCALL     `??pre_config::?relay`; Banked call to: pre_config
    313            FREQCTRL = 0x00; // Выбираем не используемую частоту
   \   00000C   90618F       MOV       DPTR,#0x618f
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
    314          
    315            // TODO По какой то причине OP_EXE не выполняет команду.
    316            // регистра RFST читается как 0xD0. это его состояние при reset
    317            // Включаем демодулятор
    318            ISRXON();
   \   000012   75E1E3       MOV       0xe1,#-0x1d
    319            
    320            // Ждем пока статус RSSI_VALID станет true
    321            while(!RSSISTAT);
   \                     ??random_core_init_1:
   \   000015   906199       MOV       DPTR,#0x6199
   \   000018   E0           MOVX      A,@DPTR
   \   000019   60FA         JZ        ??random_core_init_1
    322            
    323            // Ждем случайных чисел
    324            while (RFRND == 0);
   \                     ??random_core_init_2:
   \   00001B   9061A7       MOV       DPTR,#0x61a7
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   60FA         JZ        ??random_core_init_2
    325            
    326            // Настраиваем ядро случайного генератора
    327            rnd_core = readRandom();
   \   000021                ; Setup parameters for call to function readRandom
   \   000021   12....       LCALL     `??readRandom::?relay`; Banked call to: readRandom
   \   000024   E9           MOV       A,R1
   \   000025   F8           MOV       R0,A
   \   000026   7900         MOV       R1,#0x0
   \   000028   E8           MOV       A,R0
   \   000029   FE           MOV       R6,A
   \   00002A   E9           MOV       A,R1
   \   00002B   FF           MOV       R7,A
    328            rnd_core |= (unsigned int)readRandom()<<8;
   \   00002C                ; Setup parameters for call to function readRandom
   \   00002C   12....       LCALL     `??readRandom::?relay`; Banked call to: readRandom
   \   00002F   E9           MOV       A,R1
   \   000030   F8           MOV       R0,A
   \   000031   7900         MOV       R1,#0x0
   \   000033   E4           CLR       A
   \   000034   C8           XCH       A,R0
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   4E           ORL       A,R6
   \   000038   FE           MOV       R6,A
   \   000039   E9           MOV       A,R1
   \   00003A   4F           ORL       A,R7
   \   00003B   FF           MOV       R7,A
    329            srand(rnd_core);
   \   00003C                ; Setup parameters for call to function srand
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??srand::?relay`; Banked call to: srand
    330            
    331            // Выключаем демодулятор
    332            ISRFOFF();
   \   000043   75E1EF       MOV       0xe1,#-0x11
    333            // Первая генерация случайного числа занимает много времени.
    334            // Влияло на работу радио, так как использовались случайные посылки
    335            rand(); 
   \   000046                ; Setup parameters for call to function rand
   \   000046   12....       LCALL     `??rand::?relay` ; Banked call to: rand
    336          }
   \   000049   7F01         MOV       R7,#0x1
   \   00004B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00004E                REQUIRE RFST
    337          
    338          /**
    339          @brief Измерение мощности сигнала
    340          @details Частота = 2394+fch. fch = [0..113]. 2394MHz to 2507MHz.
    341           Устройство поддерживает частоты до 2507 МГц
    342          @param[in] fch номер ЧАСТОТНОГО канала
    343          @param[in] timeout_ms время сканирования в мс
    344          @param[out] Максимальная мощность сигнала за время сканирования
    345          @return true если успешно
    346          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          bool RI_Measure_POW(char fch, ustime_t timeout, 
   \                     RI_Measure_POW:
    348                              int8_t *RSSI_SIG){
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
    349            if (fch > 113)
   \   00001B   EE           MOV       A,R6
   \   00001C   C3           CLR       C
   \   00001D   9472         SUBB      A,#0x72
   \   00001F   4003         JC        ??RI_Measure_POW_0
    350              return false;
   \   000021   C3           CLR       C
   \   000022   8037         SJMP      ??RI_Measure_POW_1
    351            //(2394+FREQCTRL.FREQ[6:0])
    352            FREQCTRL = fch; // Выбираем не используемую частоту
   \                     ??RI_Measure_POW_0:
   \   000024   EE           MOV       A,R6
   \   000025   90618F       MOV       DPTR,#0x618f
   \   000028   F0           MOVX      @DPTR,A
    353            ISRXON();
   \   000029   75E1E3       MOV       0xe1,#-0x1d
    354            while(!RSSISTAT);
   \                     ??RI_Measure_POW_2:
   \   00002C   906199       MOV       DPTR,#0x6199
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   60FA         JZ        ??RI_Measure_POW_2
    355            FRMCTRL0 |= 1<<4; // включаем ENERGY_SCAN, детектор пикового сигнала
   \   000032   906189       MOV       DPTR,#0x6189
   \   000035   E0           MOVX      A,@DPTR
   \   000036   D2E4         SETB      0xE0 /* A   */.4
   \   000038   F0           MOVX      @DPTR,A
    356            UST_delay(timeout);
   \   000039                ; Setup parameters for call to function UST_delay
   \   000039   AA..         MOV       R2,?V0
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   AC..         MOV       R4,?V2
   \   00003F   AD..         MOV       R5,?V3
   \   000041   12....       LCALL     `??UST_delay::?relay`; Banked call to: UST_delay
    357            int8_t rssi = RSSI + RSSI_OFFSET;
   \   000044   906198       MOV       DPTR,#0x6198
   \   000047   E0           MOVX      A,@DPTR
   \   000048   24B4         ADD       A,#-0x4c
   \   00004A   F8           MOV       R0,A
    358            *RSSI_SIG = rssi;
   \   00004B   E8           MOV       A,R0
   \   00004C   C0E0         PUSH      A
   \   00004E   85..82       MOV       DPL,?V4
   \   000051   85..83       MOV       DPH,?V5
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
    359            ISRFOFF();
   \   000057   75E1EF       MOV       0xe1,#-0x11
    360            return true;
   \   00005A   D3           SETB      C
   \                     ??RI_Measure_POW_1:
   \   00005B   7F06         MOV       R7,#0x6
   \   00005D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000060                REQUIRE RFST
    361          }
    362          
E:\Neocore\Hardware\STACK_CORE_SRC\rtc.c
      1          #include "action_manager.h"
      2          #include "model.h"
      3           
      4          static void SW_Init(void); 
      5          static void Cold_Start(void);
      6          static void Hot_Start(void);
      7          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          module_s RTC_MODULE = {ALIAS(SW_Init), ALIAS(Cold_Start), 
   \                     RTC_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for RTC_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
      9            ALIAS(Hot_Start)};
     10           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static void SW_Init(void){}; 
   \                     ??SW_Init_8:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static void Cold_Start(void){};
   \                     ??Cold_Start_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     13          
     14          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     15          static void Hot_Start(void){
   \                     ??Hot_Start_2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     16            if (MODEL.TM.timeslot != 0)
   \   000005   90....       MOV       DPTR,#MODEL + 13
   \   000008   E0           MOVX      A,@DPTR
   \   000009   7020         JNZ       ??Hot_Start_6
     17              return;    
     18            MODEL.RTC.uptime++;
   \   00000B   90....       MOV       DPTR,#__Constant_1
   \   00000E   78..         MOV       R0,#?V0
   \   000010   12....       LCALL     ?L_MOV_X
   \   000013   90....       MOV       DPTR,#MODEL + 4
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?L_ADD_TO_X
     19            MODEL.RTC.rtc++;
   \   00001B   90....       MOV       DPTR,#__Constant_1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?L_MOV_X
   \   000023   90....       MOV       DPTR,#MODEL + 8
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?L_ADD_TO_X
     20          };
   \                     ??Hot_Start_6:
   \   00002B   7F04         MOV       R7,#0x4
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\Neocore\Hardware\STACK_CORE_SRC\sync.c
      1          #include "sync.h"
      2          #include "action_manager.h"
      3          #include "radio.h"
      4          #include "model.h"
      5          #include "alarm_timer.h"
      6          #include "debug.h"
      7          #include "frame.h"
      8          #include "coder.h"
      9          #include "stdlib.h"
     10          #include "macros.h"
     11          #include "global.h"
     12          
     13          #define MODE_0 0 // Отклчена модуль синхронизации 
     14          #define MODE_1 1 // Прием, ретрансляция, синхронизация
     15          #define MODE_2 2 // Периодическое вещание
     16          #define SYNC_TS 0 // Слот для синхронизации
     17          #define MAGIC 0x19833891 // Проверка что пакет действительно sync
     18          #define SYNC_TIME 163 // Точное время отправки пакета.nwtime
     19          #define NEG_RECV_OFFSET 33 // nwtime
     20          #define POS_RECV_OFFSET 33 // nwtime
     21          #define SEND_PERIOD 10 // Периодичность отправки пакетов
     22          #define RETRANSMITE_TRY 3 // Кол-во попыток отправки sync
     23          #define PROBABILIT 40 // % вероятность одной попытки отправки 
     24          #define UNSYNC_TIME 60 // Время в секундах рассинхронизации сети
     25          
     26          static void SW_Init(void);
     27          static void Cold_Start(void);
     28          static void Hot_Start(void);
     29          static bool send_sync(void);
     30          static struct frame* recv_sync(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     31          static char retransmite;
   \                     ??retransmite:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     32          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     33          module_s SYNC_MODULE = {ALIAS(SW_Init), ALIAS(Cold_Start), 
   \                     SYNC_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for SYNC_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     34            ALIAS(Hot_Start)};
     35          
     36          struct sync{
     37            char sys_ch;
     38            char tx_power;
     39            char panid;
     40            unsigned long rtc;
     41            unsigned long magic;
     42          } __attribute__((packed));
     43          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          static void SW_Init(void){ 
   \                     ??SW_Init_9:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     45            MODEL.SYNC.next_sync_send = 0;
   \   000004   90....       MOV       DPTR,#MODEL + 137
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
     46            MODEL.SYNC.next_time_recv = 0;
   \   000016   90....       MOV       DPTR,#MODEL + 141
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7400         MOV       A,#0x0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   7400         MOV       A,#0x0
   \   000027   F0           MOVX      @DPTR,A
     47            MODEL.SYNC.last_time_recv = 0;
   \   000028   90....       MOV       DPTR,#MODEL + 145
   \   00002B   7400         MOV       A,#0x0
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   7400         MOV       A,#0x0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   7400         MOV       A,#0x0
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   7400         MOV       A,#0x0
   \   000039   F0           MOVX      @DPTR,A
     48            MODEL.SYNC.sys_channel = DEFAULT_SYS_CH;
   \   00003A   90....       MOV       DPTR,#MODEL + 133
   \   00003D   740B         MOV       A,#0xb
   \   00003F   F0           MOVX      @DPTR,A
     49            MODEL.SYNC.sync_channel = DEFAULT_SYNC_CH;
   \   000040   90....       MOV       DPTR,#MODEL + 134
   \   000043   741C         MOV       A,#0x1c
   \   000045   F0           MOVX      @DPTR,A
     50            retransmite = 0;
   \   000046   90....       MOV       DPTR,#??retransmite
   \   000049   7400         MOV       A,#0x0
   \   00004B   F0           MOVX      @DPTR,A
     51          };
   \   00004C   D083         POP       DPH
   \   00004E   D082         POP       DPL
   \   000050   02....       LJMP      ?BRET
     52          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          static void Cold_Start(void){
   \                     ??Cold_Start_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     54          };
   \   000000   02....       LJMP      ?BRET
     55          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     56          static inline bool validate_sync(struct sync *sync){
   \                     ??validate_sync:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     57            bool valid = 
     58              (sync->magic == MAGIC) &&
     59              (sync->panid == MODEL.SYNC.panid);
   \   000005   90....       MOV       DPTR,#__Constant_19833891
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?L_MOV_X
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_EQ_X
   \   00001D   7013         JNZ       ??validate_sync_1
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   90....       MOV       DPTR,#MODEL + 149
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   68           XRL       A,R0
   \   00002C   7004         JNZ       ??validate_sync_1
   \   00002E   D2F0         SETB      B.0
   \   000030   8002         SJMP      ??validate_sync_2
   \                     ??validate_sync_1:
   \   000032   C2F0         CLR       B.0
     60            return valid;
   \                     ??validate_sync_2:
   \   000034   A2F0         MOV       C,B.0
   \   000036   7F04         MOV       R7,#0x4
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA
     61          }
     62          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     63          static inline void accept_sync_data(struct sync *sync){
   \                     ??accept_sync_data:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     64            MODEL.RTC.rtc = sync->rtc;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?XLOAD_R4567
   \   00000F   90....       MOV       DPTR,#MODEL + 8
   \   000012   12....       LCALL     ?XSTORE_R4567
     65          };
   \   000015   7F01         MOV       R7,#0x1
   \   000017   02....       LJMP      ?BANKED_LEAVE_XDATA
     66          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          static inline void syncronize_timer(struct frame *frame){
   \                     ??syncronize_timer:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
     68            nwtime_t now = AT_time();
   \   000009                ; Setup parameters for call to function AT_time
   \   000009   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   85....       MOV       ?V2,?V4
   \   000013   85....       MOV       ?V3,?V5
     69            // Время прошедшее с момента получения пакета
     70            // RI_Send корректриует время, чтобы SFD был передан в SEND_TIME
     71            // Поэтому нам корректировать ненужно
     72            nwtime_t passed = AT_interval(now, frame->meta.TIMESTAMP);  
   \   000016                ; Setup parameters for call to function AT_interval
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FC           MOV       R4,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FD           MOV       R5,A
   \   000022   AA..         MOV       R2,?V2
   \   000024   AB..         MOV       R3,?V3
   \   000026   12....       LCALL     `??AT_interval::?relay`; Banked call to: AT_interval
   \   000029   8A..         MOV       ?V4,R2
   \   00002B   8B..         MOV       ?V5,R3
   \   00002D   AE..         MOV       R6,?V4
   \   00002F   AF..         MOV       R7,?V5
     73            AT_set_time(SYNC_TIME + passed);
   \   000031                ; Setup parameters for call to function AT_set_time
   \   000031   EE           MOV       A,R6
   \   000032   24A3         ADD       A,#-0x5d
   \   000034   FA           MOV       R2,A
   \   000035   E4           CLR       A
   \   000036   3F           ADDC      A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??AT_set_time::?relay`; Banked call to: AT_set_time
     74            MODEL.SYNC.sync_err = SYNC_TIME - frame->meta.TIMESTAMP;
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   74A3         MOV       A,#-0x5d
   \   000049   C3           CLR       C
   \   00004A   98           SUBB      A,R0
   \   00004B   F8           MOV       R0,A
   \   00004C   7400         MOV       A,#0x0
   \   00004E   99           SUBB      A,R1
   \   00004F   F9           MOV       R1,A
   \   000050   90....       MOV       DPTR,#MODEL + 135
   \   000053   E8           MOV       A,R0
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   E9           MOV       A,R1
   \   000057   F0           MOVX      @DPTR,A
     75            LOG_ON("Sync err %d", MODEL.SYNC.sync_err);
   \   000058                ; Setup parameters for call to function printf
   \   000058   75....       MOV       ?V4,#??__FUNCTION___5 & 0xff
   \   00005B   75....       MOV       ?V5,#(??__FUNCTION___5 >> 8) & 0xff
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   75..4B       MOV       ?V4,#0x4b
   \   000066   75..00       MOV       ?V5,#0x0
   \   000069   78..         MOV       R0,#?V4
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   75....       MOV       ?V4,#`?<Constant "sync.c">` & 0xff
   \   000071   75....       MOV       ?V5,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000074   78..         MOV       R0,#?V4
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00007B   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   00007D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000080   7406         MOV       A,#0x6
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085                ; Setup parameters for call to function printf
   \   000085   90....       MOV       DPTR,#MODEL + 135
   \   000088   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008B   7A..         MOV       R2,#`?<Constant "Sync err %d">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "Sync err %d">` >> 8) & 0xff
   \   00008F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097                ; Setup parameters for call to function printf
   \   000097   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   000099   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   00009B   12....       LCALL     `??printf::?relay`; Banked call to: printf
     76          };
   \   00009E   7F06         MOV       R7,#0x6
   \   0000A0   02....       LJMP      ?BANKED_LEAVE_XDATA
     77          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          static inline void mode_1_receive_process(void){
   \                     ??mode_1_receive_process:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
     79            LOW(PIN1);
   \   000005   C290         CLR       0x90.0
     80            struct frame *fr = recv_sync();
   \   000007                ; Setup parameters for call to function recv_sync
   \   000007   12....       LCALL     `??recv_sync::?relay`; Banked call to: recv_sync
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   AE..         MOV       R6,?V0
   \   000010   AF..         MOV       R7,?V1
     81            if (!fr)
   \   000012   EE           MOV       A,R6
   \   000013   4F           ORL       A,R7
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??mode_1_receive_process_1 & 0xFFFF
     82              return;
     83            
     84            struct sync *sync = (struct sync*)(fr->payload);
   \   000019   EE           MOV       A,R6
   \   00001A   2415         ADD       A,#0x15
   \   00001C   F5..         MOV       ?V4,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F5..         MOV       ?V5,A
     85            if (!validate_sync(sync)){
   \   000022                ; Setup parameters for call to function validate_sync
   \   000022   AA..         MOV       R2,?V4
   \   000024   AB..         MOV       R3,?V5
   \   000026   12....       LCALL     `??validate_sync::?relay`; Banked call to: validate_sync
   \   000029   400A         JC        ??mode_1_receive_process_2
     86              FR_delete(fr);
   \   00002B                ; Setup parameters for call to function FR_delete
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
     87              return;
   \   000032   02....       LJMP      ??mode_1_receive_process_1 & 0xFFFF
     88            }
     89            syncronize_timer(fr);
   \                     ??mode_1_receive_process_2:
   \   000035                ; Setup parameters for call to function syncronize_timer
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??syncronize_timer::?relay`; Banked call to: syncronize_timer
     90            accept_sync_data(sync);
   \   00003C                ; Setup parameters for call to function accept_sync_data
   \   00003C   AA..         MOV       R2,?V4
   \   00003E   AB..         MOV       R3,?V5
   \   000040   12....       LCALL     `??accept_sync_data::?relay`; Banked call to: accept_sync_data
     91            FR_delete(fr);
   \   000043                ; Setup parameters for call to function FR_delete
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
     92            LOG_ON("Sichronize sync RSSI = %d", fr->meta.RSSI_SIG);
   \   00004A                ; Setup parameters for call to function printf
   \   00004A   75....       MOV       ?V0,#??__FUNCTION___6 & 0xff
   \   00004D   75....       MOV       ?V1,#(??__FUNCTION___6 >> 8) & 0xff
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..5C       MOV       ?V0,#0x5c
   \   000058   75..00       MOV       ?V1,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   000063   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00006D   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   00006F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000072   7406         MOV       A,#0x6
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077                ; Setup parameters for call to function printf
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F5..         MOV       ?V0,A
   \   000081   33           RLC       A
   \   000082   95E0         SUBB      A,0xE0 /* A   */
   \   000084   F5..         MOV       ?V1,A
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   7A..         MOV       R2,#`?<Constant "Sichronize sync RSSI ...">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "Sichronize sync RSSI ...">` >> 8) & 0xff
   \   00008F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097                ; Setup parameters for call to function printf
   \   000097   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   000099   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   00009B   12....       LCALL     `??printf::?relay`; Banked call to: printf
     93            retransmite = RETRANSMITE_TRY;
   \   00009E   90....       MOV       DPTR,#??retransmite
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   F0           MOVX      @DPTR,A
     94            MODEL.SYNC.next_time_recv = MODEL.RTC.uptime + SEND_PERIOD;
   \   0000A4   90....       MOV       DPTR,#MODEL + 4
   \   0000A7   78..         MOV       R0,#?V0
   \   0000A9   12....       LCALL     ?L_MOV_X
   \   0000AC   90....       MOV       DPTR,#__Constant_a
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?L_ADD_X
   \   0000B4   AA..         MOV       R2,?V0
   \   0000B6   AB..         MOV       R3,?V1
   \   0000B8   AC..         MOV       R4,?V2
   \   0000BA   AD..         MOV       R5,?V3
   \   0000BC   90....       MOV       DPTR,#MODEL + 141
   \   0000BF   EA           MOV       A,R2
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   EB           MOV       A,R3
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   EC           MOV       A,R4
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   ED           MOV       A,R5
   \   0000C9   F0           MOVX      @DPTR,A
     95            MODEL.SYNC.last_time_recv = MODEL.RTC.uptime;   
   \   0000CA   90....       MOV       DPTR,#MODEL + 4
   \   0000CD   12....       LCALL     ?XLOAD_R0123
   \   0000D0   90....       MOV       DPTR,#MODEL + 145
   \   0000D3   12....       LCALL     ?XSTORE_R0123
     96            HIGH(PIN1);
   \   0000D6   D290         SETB      0x90.0
     97          }
   \                     ??mode_1_receive_process_1:
   \   0000D8   7F06         MOV       R7,#0x6
   \   0000DA   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000DD                REQUIRE _A_P1
     98          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          static inline bool _throw_dice(void){
   \                     ??_throw_dice:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    100            return  ((rand() % 100) <= PROBABILIT) ? true : false;
   \   000005                ; Setup parameters for call to function rand
   \   000005   12....       LCALL     `??rand::?relay` ; Banked call to: rand
   \   000008   EA           MOV       A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   EB           MOV       A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   7A64         MOV       R2,#0x64
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   12....       LCALL     ?S_DIV_MOD
   \   000013   8A..         MOV       ?V0,R2
   \   000015   8B..         MOV       ?V1,R3
   \   000017   C3           CLR       C
   \   000018   E5..         MOV       A,?V0
   \   00001A   9429         SUBB      A,#0x29
   \   00001C   E5..         MOV       A,?V1
   \   00001E   9400         SUBB      A,#0x0
   \   000020   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000022   65D0         XRL       A,PSW
   \   000024   33           RLC       A
   \   000025   5004         JNC       ??_throw_dice_1
   \   000027   D2F0         SETB      B.0
   \   000029   8002         SJMP      ??_throw_dice_2
   \                     ??_throw_dice_1:
   \   00002B   C2F0         CLR       B.0
   \                     ??_throw_dice_2:
   \   00002D   A2F0         MOV       C,B.0
   \   00002F   7F02         MOV       R7,#0x2
   \   000031   02....       LJMP      ?BANKED_LEAVE_XDATA
    101          };
    102          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          static inline void mode_1_retransmition_process(void){
   \                     ??mode_1_retransmition_process:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    104            retransmite--;
   \   000004   90....       MOV       DPTR,#??retransmite
   \   000007   E0           MOVX      A,@DPTR
   \   000008   24FF         ADD       A,#-0x1
   \   00000A   F0           MOVX      @DPTR,A
    105            if (!_throw_dice())
   \   00000B                ; Setup parameters for call to function _throw_dice
   \   00000B   12....       LCALL     `??_throw_dice::?relay`; Banked call to: _throw_dice
   \   00000E   5009         JNC       ??mode_1_retransmition_process_1
    106              return;
    107            send_sync();
   \   000010                ; Setup parameters for call to function send_sync
   \   000010   12....       LCALL     `??send_sync::?relay`; Banked call to: send_sync
    108            retransmite = 0;
   \   000013   90....       MOV       DPTR,#??retransmite
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
    109          }
   \                     ??mode_1_retransmition_process_1:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
    110          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          static void mode_1_process(){
   \                     ??mode_1_process:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    112           // Прием, ретрансляция, синхронизация   
    113            if ( MODEL.RTC.uptime >= MODEL.SYNC.next_time_recv)
   \   000005   90....       MOV       DPTR,#MODEL + 141
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?L_MOV_X
   \   00000D   90....       MOV       DPTR,#MODEL + 4
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?UL_GT_X
   \   000015   4005         JC        ??mode_1_process_1
    114              mode_1_receive_process();
   \   000017                ; Setup parameters for call to function mode_1_receive_process
   \   000017   12....       LCALL     `??mode_1_receive_process::?relay`; Banked call to: mode_1_receive_process
   \   00001A   8009         SJMP      ??mode_1_process_2
    115            else if(retransmite)
   \                     ??mode_1_process_1:
   \   00001C   90....       MOV       DPTR,#??retransmite
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6003         JZ        ??mode_1_process_2
    116              mode_1_retransmition_process();
   \   000022                ; Setup parameters for call to function mode_1_retransmition_process
   \   000022   12....       LCALL     `??mode_1_retransmition_process::?relay`; Banked call to: mode_1_retransmition_process
    117            
    118            if (MODEL.RTC.uptime - MODEL.SYNC.last_time_recv > UNSYNC_TIME){
   \                     ??mode_1_process_2:
   \   000025   90....       MOV       DPTR,#__Constant_3d
   \   000028   C082         PUSH      DPL
   \   00002A   C083         PUSH      DPH
   \   00002C   90....       MOV       DPTR,#MODEL + 4
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?L_MOV_X
   \   000034   90....       MOV       DPTR,#MODEL + 145
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?L_SUB_X
   \   00003C   D083         POP       DPH
   \   00003E   D082         POP       DPL
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?UL_GE_X
   \   000045   504D         JNC       ??mode_1_process_3
    119              MODEL.SYNC.synced = false;
   \   000047   7400         MOV       A,#0x0
   \   000049   90....       MOV       DPTR,#MODEL + 132
   \   00004C   F0           MOVX      @DPTR,A
    120              MODEL.SYNC.mode = 0;
   \   00004D   90....       MOV       DPTR,#MODEL + 131
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
    121              MODEL.TM.MODE = 0;
   \   000053   90....       MOV       DPTR,#MODEL + 12
   \   000056   7400         MOV       A,#0x0
   \   000058   F0           MOVX      @DPTR,A
    122              LOG_ON("unsynced");
   \   000059                ; Setup parameters for call to function printf
   \   000059   75....       MOV       ?V0,#??__FUNCTION___7 & 0xff
   \   00005C   75....       MOV       ?V1,#(??__FUNCTION___7 >> 8) & 0xff
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   75..7A       MOV       ?V0,#0x7a
   \   000067   75..00       MOV       ?V1,#0x0
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   000072   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00007C   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   00007E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000081   7406         MOV       A,#0x6
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086                ; Setup parameters for call to function printf
   \   000086   7A..         MOV       R2,#`?<Constant "unsynced">` & 0xff
   \   000088   7B..         MOV       R3,#(`?<Constant "unsynced">` >> 8) & 0xff
   \   00008A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00008D                ; Setup parameters for call to function printf
   \   00008D   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   00008F   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   000091   12....       LCALL     `??printf::?relay`; Banked call to: printf
    123            }
    124          }
   \                     ??mode_1_process_3:
   \   000094   7F04         MOV       R7,#0x4
   \   000096   02....       LJMP      ?BANKED_LEAVE_XDATA
    125          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          static void mode_2_process(){
   \                     ??mode_2_process:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    127            // Периодическое вещание
    128            if ( MODEL.RTC.uptime < MODEL.SYNC.next_sync_send)
   \   000005   90....       MOV       DPTR,#MODEL + 137
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?L_MOV_X
   \   00000D   90....       MOV       DPTR,#MODEL + 4
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?UL_GT_X
   \   000015   401F         JC        ??mode_2_process_1
    129              return;
    130            MODEL.SYNC.next_sync_send = MODEL.RTC.uptime + SEND_PERIOD;
   \   000017   90....       MOV       DPTR,#MODEL + 4
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_MOV_X
   \   00001F   90....       MOV       DPTR,#__Constant_a
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?L_ADD_X
   \   000027   90....       MOV       DPTR,#MODEL + 137
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?L_MOV_TO_X
    131            LOW(PIN1);
   \   00002F   C290         CLR       0x90.0
    132            send_sync();
   \   000031                ; Setup parameters for call to function send_sync
   \   000031   12....       LCALL     `??send_sync::?relay`; Banked call to: send_sync
    133            HIGH(PIN1);
   \   000034   D290         SETB      0x90.0
    134          }
   \                     ??mode_2_process_1:
   \   000036   7F04         MOV       R7,#0x4
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00003B                REQUIRE _A_P1
    135          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          static void Hot_Start(void){
   \                     ??Hot_Start_3:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    137            if (MODEL.TM.timeslot != SYNC_TS)
   \   000005   90....       MOV       DPTR,#MODEL + 13
   \   000008   E0           MOVX      A,@DPTR
   \   000009   704F         JNZ       ??Hot_Start_7
    138              return;
    139            switch(MODEL.SYNC.mode){
   \   00000B   90....       MOV       DPTR,#MODEL + 131
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6049         JZ        ??Hot_Start_7
   \   000011   14           DEC       A
   \   000012   6005         JZ        ??Hot_Start_8
   \   000014   14           DEC       A
   \   000015   6007         JZ        ??Hot_Start_9
   \   000017   800A         SJMP      ??Hot_Start_10
    140              case MODE_0: break;
    141              case MODE_1: mode_1_process(); break;
   \                     ??Hot_Start_8:
   \   000019                ; Setup parameters for call to function mode_1_process
   \   000019   12....       LCALL     `??mode_1_process::?relay`; Banked call to: mode_1_process
   \   00001C   803C         SJMP      ??Hot_Start_7
    142              case MODE_2: mode_2_process(); break;
   \                     ??Hot_Start_9:
   \   00001E                ; Setup parameters for call to function mode_2_process
   \   00001E   12....       LCALL     `??mode_2_process::?relay`; Banked call to: mode_2_process
   \   000021   8037         SJMP      ??Hot_Start_7
    143              default:
    144              HALT("Wrong mode");
   \                     ??Hot_Start_10:
   \   000023                ; Setup parameters for call to function printf
   \   000023   75....       MOV       ?V0,#??__FUNCTION___8 & 0xff
   \   000026   75....       MOV       ?V1,#(??__FUNCTION___8 >> 8) & 0xff
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   75..90       MOV       ?V0,#-0x70
   \   000031   75..00       MOV       ?V1,#0x0
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   00003C   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000048   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004B   7406         MOV       A,#0x6
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050                ; Setup parameters for call to function printf
   \   000050   7A..         MOV       R2,#`?<Constant "Wrong mode">` & 0xff
   \   000052   7B..         MOV       R3,#(`?<Constant "Wrong mode">` >> 8) & 0xff
   \   000054   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000057                ; Setup parameters for call to function DBG_CORE_HALT
   \   000057   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    145            }
    146          };
   \                     ??Hot_Start_7:
   \   00005A   7F02         MOV       R7,#0x2
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
    147          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          static struct frame* recv_sync(void){
   \                     ??recv_sync:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    149            if(!RI_SetChannel(MODEL.SYNC.sync_channel))
   \   00000A                ; Setup parameters for call to function RI_SetChannel
   \   00000A   90....       MOV       DPTR,#MODEL + 134
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??RI_SetChannel::?relay`; Banked call to: RI_SetChannel
   \   000012   4037         JC        ??recv_sync_1
    150              HALT("Wrong channel");
   \   000014                ; Setup parameters for call to function printf
   \   000014   75....       MOV       ?V0,#??__FUNCTION___9 & 0xff
   \   000017   75....       MOV       ?V1,#(??__FUNCTION___9 >> 8) & 0xff
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..96       MOV       ?V0,#-0x6a
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   00002D   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   000037   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000039   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003C   7406         MOV       A,#0x6
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041                ; Setup parameters for call to function printf
   \   000041   7A..         MOV       R2,#`?<Constant "Wrong channel">_1` & 0xff
   \   000043   7B..         MOV       R3,#(`?<Constant "Wrong channel">_1` >> 8) & 0xff
   \   000045   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000048                ; Setup parameters for call to function DBG_CORE_HALT
   \   000048   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    151            struct frame *frame;
    152            
    153            AT_wait(SYNC_TIME - NEG_RECV_OFFSET);
   \                     ??recv_sync_1:
   \   00004B                ; Setup parameters for call to function AT_wait
   \   00004B   7A82         MOV       R2,#-0x7e
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     `??AT_wait::?relay`; Banked call to: AT_wait
    154            ustime_t recv_time = NWTIME_TO_US(NEG_RECV_OFFSET + POS_RECV_OFFSET);
   \   000052   75..FE       MOV       ?V0,#-0x2
   \   000055   75..07       MOV       ?V1,#0x7
   \   000058   75..00       MOV       ?V2,#0x0
   \   00005B   75..00       MOV       ?V3,#0x0
    155            TRY{
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   7408         MOV       A,#0x8
   \   000066                REQUIRE ?V7
   \   000066   12....       LCALL     ?SETJMP_XDATA
   \   000069   8A..         MOV       ?V4,R2
   \   00006B   8B..         MOV       ?V5,R3
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for recv_sync>_0`:
   \   000072   0000         DW        0
   \   000074   02           DB        2
   \   000075   ....         DW        ??recv_sync_2
   \   000077   ....         DW        ??recv_sync_3
   \   000079   ....         DW        ??recv_sync_4
   \   00007B   ....         DW        ??recv_sync_5
    156              frame = RI_Receive(recv_time);
   \                     ??recv_sync_3:
   \   00007D                ; Setup parameters for call to function RI_Receive
   \   00007D   AA..         MOV       R2,?V0
   \   00007F   AB..         MOV       R3,?V1
   \   000081   AC..         MOV       R4,?V2
   \   000083   AD..         MOV       R5,?V3
   \   000085   12....       LCALL     `??RI_Receive::?relay`; Banked call to: RI_Receive
   \   000088   8A..         MOV       ?V4,R2
   \   00008A   8B..         MOV       ?V5,R3
   \   00008C   AE..         MOV       R6,?V4
   \   00008E   AF..         MOV       R7,?V5
    157              if (!frame)
   \   000090   EE           MOV       A,R6
   \   000091   4F           ORL       A,R7
   \   000092   700F         JNZ       ??recv_sync_6
    158                THROW(1);
   \   000094   7A01         MOV       R2,#0x1
   \   000096   7B00         MOV       R3,#0x0
   \   000098   85..82       MOV       DPL,?XSP + 0
   \   00009B   85..83       MOV       DPH,?XSP + 1
   \   00009E   7408         MOV       A,#0x8
   \   0000A0                REQUIRE ?V7
   \   0000A0   02....       LJMP      ?LONGJMP_XDATA
    159              if (frame->len != sizeof(struct sync))
   \                     ??recv_sync_6:
   \   0000A3   8E82         MOV       DPL,R6
   \   0000A5   8F83         MOV       DPH,R7
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   640B         XRL       A,#0xb
   \   0000AA   600F         JZ        ??recv_sync_7
    160                THROW(2);
   \   0000AC   7A02         MOV       R2,#0x2
   \   0000AE   7B00         MOV       R3,#0x0
   \   0000B0   85..82       MOV       DPL,?XSP + 0
   \   0000B3   85..83       MOV       DPH,?XSP + 1
   \   0000B6   7408         MOV       A,#0x8
   \   0000B8                REQUIRE ?V7
   \   0000B8   02....       LJMP      ?LONGJMP_XDATA
    161              AES_StreamCoder(false, frame->payload, frame->payload, frame->len);
   \                     ??recv_sync_7:
   \   0000BB                ; Setup parameters for call to function AES_StreamCoder
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F9           MOV       R1,A
   \   0000C1   EE           MOV       A,R6
   \   0000C2   2415         ADD       A,#0x15
   \   0000C4   FC           MOV       R4,A
   \   0000C5   E4           CLR       A
   \   0000C6   3F           ADDC      A,R7
   \   0000C7   FD           MOV       R5,A
   \   0000C8   EE           MOV       A,R6
   \   0000C9   2415         ADD       A,#0x15
   \   0000CB   FA           MOV       R2,A
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   FB           MOV       R3,A
   \   0000CF   C2F0         CLR       B.0
   \   0000D1   12....       LCALL     `??AES_StreamCoder::?relay`; Banked call to: AES_StreamCoder
    162              return frame;
   \   0000D4   EE           MOV       A,R6
   \   0000D5   FA           MOV       R2,A
   \   0000D6   EF           MOV       A,R7
   \   0000D7   FB           MOV       R3,A
   \   0000D8   8017         SJMP      ??recv_sync_8
    163            }
    164            CATCH(1){
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    165              return NULL;
   \                     ??recv_sync_4:
   \   0000DA   7A00         MOV       R2,#0x0
   \   0000DC   7B00         MOV       R3,#0x0
   \   0000DE   8011         SJMP      ??recv_sync_8
    166            }
    167            CATCH(2){
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    168              FR_delete(frame);
   \                     ??recv_sync_5:
   \   0000E0                ; Setup parameters for call to function FR_delete
   \   0000E0   EE           MOV       A,R6
   \   0000E1   FA           MOV       R2,A
   \   0000E2   EF           MOV       A,R7
   \   0000E3   FB           MOV       R3,A
   \   0000E4   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    169              return NULL;
   \   0000E7   7A00         MOV       R2,#0x0
   \   0000E9   7B00         MOV       R3,#0x0
   \   0000EB   8004         SJMP      ??recv_sync_8
    170            }
    171            ETRY;
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    172            return frame;
   \                     ??recv_sync_2:
   \   0000ED   EE           MOV       A,R6
   \   0000EE   FA           MOV       R2,A
   \   0000EF   EF           MOV       A,R7
   \   0000F0   FB           MOV       R3,A
   \                     ??recv_sync_8:
   \   0000F1   7431         MOV       A,#0x31
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F6   7F06         MOV       R7,#0x6
   \   0000F8   02....       LJMP      ?BANKED_LEAVE_XDATA
    173          }
    174          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          static bool send_sync(void){
   \                     ??send_sync:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    176            struct sync sync;
    177            sync.sys_ch = MODEL.SYNC.sys_channel;
   \   00000A   90....       MOV       DPTR,#MODEL + 133
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   C0E0         PUSH      A
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   D0E0         POP       A
   \   000018   F0           MOVX      @DPTR,A
    178            sync.tx_power = MODEL.RADIO.power_tx;
   \   000019   90....       MOV       DPTR,#MODEL + 95
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    179            sync.panid = MODEL.SYNC.panid;
   \   000027   90....       MOV       DPTR,#MODEL + 149
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
    180            sync.rtc = MODEL.RTC.rtc;
   \   000035   90....       MOV       DPTR,#MODEL + 8
   \   000038   12....       LCALL     ?XLOAD_R0123
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?XSTORE_R0123
    181            sync.magic = MAGIC;
   \   000043   7407         MOV       A,#0x7
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   7491         MOV       A,#-0x6f
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   7438         MOV       A,#0x38
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   7483         MOV       A,#-0x7d
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7419         MOV       A,#0x19
   \   000056   F0           MOVX      @DPTR,A
    182            
    183            struct frame *fr = FR_create();
   \   000057                ; Setup parameters for call to function FR_create
   \   000057   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   00005A   8A..         MOV       ?V0,R2
   \   00005C   8B..         MOV       ?V1,R3
   \   00005E   AE..         MOV       R6,?V0
   \   000060   AF..         MOV       R7,?V1
    184            ASSERT(fr);
   \   000062   EE           MOV       A,R6
   \   000063   4F           ORL       A,R7
   \   000064   7025         JNZ       ??send_sync_1
   \   000066                ; Setup parameters for call to function printf
   \   000066   75..B8       MOV       ?V0,#-0x48
   \   000069   75..00       MOV       ?V1,#0x0
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   000074   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_6` & 0xff
   \   00007E   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_6` >> 8) & 0xff
   \   000080   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000083   7404         MOV       A,#0x4
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088                ; Setup parameters for call to function DBG_CORE_HALT
   \   000088   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    185            FR_add_header(fr, &sync, sizeof(struct sync));
   \                     ??send_sync_1:
   \   00008B                ; Setup parameters for call to function FR_add_header
   \   00008B   790B         MOV       R1,#0xb
   \   00008D   AC..         MOV       R4,?XSP + 0
   \   00008F   AD..         MOV       R5,?XSP + 1
   \   000091   EE           MOV       A,R6
   \   000092   FA           MOV       R2,A
   \   000093   EF           MOV       A,R7
   \   000094   FB           MOV       R3,A
   \   000095   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
    186            
    187            fr->meta.SEND_TIME = (nwtime_t)SYNC_TIME;
   \   000098   EE           MOV       A,R6
   \   000099   2413         ADD       A,#0x13
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   3F           ADDC      A,R7
   \   00009F   F583         MOV       DPH,A
   \   0000A1   74A3         MOV       A,#-0x5d
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   7400         MOV       A,#0x0
   \   0000A7   F0           MOVX      @DPTR,A
    188            AES_StreamCoder(true, fr->payload, fr->payload, fr->len);
   \   0000A8                ; Setup parameters for call to function AES_StreamCoder
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F9           MOV       R1,A
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2415         ADD       A,#0x15
   \   0000B1   FC           MOV       R4,A
   \   0000B2   E4           CLR       A
   \   0000B3   3F           ADDC      A,R7
   \   0000B4   FD           MOV       R5,A
   \   0000B5   EE           MOV       A,R6
   \   0000B6   2415         ADD       A,#0x15
   \   0000B8   FA           MOV       R2,A
   \   0000B9   E4           CLR       A
   \   0000BA   3F           ADDC      A,R7
   \   0000BB   FB           MOV       R3,A
   \   0000BC   D2F0         SETB      B.0
   \   0000BE   12....       LCALL     `??AES_StreamCoder::?relay`; Banked call to: AES_StreamCoder
    189            
    190            bool set_ch_res = RI_SetChannel(MODEL.SYNC.sync_channel);
   \   0000C1                ; Setup parameters for call to function RI_SetChannel
   \   0000C1   90....       MOV       DPTR,#MODEL + 134
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F9           MOV       R1,A
   \   0000C6   12....       LCALL     `??RI_SetChannel::?relay`; Banked call to: RI_SetChannel
   \   0000C9   92..         MOV       ?VB.0,C
    191            ASSERT(set_ch_res);
   \   0000CB   A2..         MOV       C,?VB.0
   \   0000CD   4025         JC        ??send_sync_2
   \   0000CF                ; Setup parameters for call to function printf
   \   0000CF   75..BF       MOV       ?V0,#-0x41
   \   0000D2   75..00       MOV       ?V1,#0x0
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   0000DD   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_6` & 0xff
   \   0000E7   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_6` >> 8) & 0xff
   \   0000E9   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000EC   7404         MOV       A,#0x4
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1                ; Setup parameters for call to function DBG_CORE_HALT
   \   0000F1   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    192            bool res = RI_Send(fr);
   \                     ??send_sync_2:
   \   0000F4                ; Setup parameters for call to function RI_Send
   \   0000F4   EE           MOV       A,R6
   \   0000F5   FA           MOV       R2,A
   \   0000F6   EF           MOV       A,R7
   \   0000F7   FB           MOV       R3,A
   \   0000F8   12....       LCALL     `??RI_Send::?relay`; Banked call to: RI_Send
   \   0000FB   92..         MOV       ?VB.1,C
    193            FR_delete(fr);
   \   0000FD                ; Setup parameters for call to function FR_delete
   \   0000FD   EE           MOV       A,R6
   \   0000FE   FA           MOV       R2,A
   \   0000FF   EF           MOV       A,R7
   \   000100   FB           MOV       R3,A
   \   000101   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    194            LOG_ON("SYNC sended, res = %d", res);
   \   000104                ; Setup parameters for call to function printf
   \   000104   75....       MOV       ?V0,#??__FUNCTION___10 & 0xff
   \   000107   75....       MOV       ?V1,#(??__FUNCTION___10 >> 8) & 0xff
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   75..C2       MOV       ?V0,#-0x3e
   \   000112   75..00       MOV       ?V1,#0x0
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011A   75....       MOV       ?V0,#`?<Constant "sync.c">` & 0xff
   \   00011D   75....       MOV       ?V1,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000120   78..         MOV       R0,#?V0
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   000127   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000129   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00012C   7406         MOV       A,#0x6
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000131                ; Setup parameters for call to function printf
   \   000131   A2..         MOV       C,?VB.1
   \   000133   E4           CLR       A
   \   000134   33           RLC       A
   \   000135   F5..         MOV       ?V0,A
   \   000137   75..00       MOV       ?V1,#0x0
   \   00013A   78..         MOV       R0,#?V0
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013F   7A..         MOV       R2,#`?<Constant "SYNC sended, res = %d">` & 0xff
   \   000141   7B..         MOV       R3,#(`?<Constant "SYNC sended, res = %d">` >> 8) & 0xff
   \   000143   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000146   7402         MOV       A,#0x2
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B                ; Setup parameters for call to function printf
   \   00014B   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   00014D   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   00014F   12....       LCALL     `??printf::?relay`; Banked call to: printf
    195            return res;
   \   000152   A2..         MOV       C,?VB.1
   \   000154   740B         MOV       A,#0xb
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   \   000159   7F02         MOV       R7,#0x2
   \   00015B   02....       LJMP      ?BANKED_LEAVE_XDATA
    196          }
    197          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          static struct frame* network_recv_sync(ustime_t timeout){
   \                     ??network_recv_sync:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    199            if(!RI_SetChannel(MODEL.SYNC.sync_channel))
   \   000012                ; Setup parameters for call to function RI_SetChannel
   \   000012   90....       MOV       DPTR,#MODEL + 134
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   12....       LCALL     `??RI_SetChannel::?relay`; Banked call to: RI_SetChannel
   \   00001A   4037         JC        ??network_recv_sync_1
    200              HALT("Wrong channel");
   \   00001C                ; Setup parameters for call to function printf
   \   00001C   75....       MOV       ?V4,#??__FUNCTION___11 & 0xff
   \   00001F   75....       MOV       ?V5,#(??__FUNCTION___11 >> 8) & 0xff
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   75..C8       MOV       ?V4,#-0x38
   \   00002A   75..00       MOV       ?V5,#0x0
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75....       MOV       ?V4,#`?<Constant "sync.c">` & 0xff
   \   000035   75....       MOV       ?V5,#(`?<Constant "sync.c">` >> 8) & 0xff
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00003F   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000041   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000044   7406         MOV       A,#0x6
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function printf
   \   000049   7A..         MOV       R2,#`?<Constant "Wrong channel">_1` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant "Wrong channel">_1` >> 8) & 0xff
   \   00004D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000050                ; Setup parameters for call to function DBG_CORE_HALT
   \   000050   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    201            
    202            struct frame *frame = NULL;
   \                     ??network_recv_sync_1:
   \   000053   7E00         MOV       R6,#0x0
   \   000055   7F00         MOV       R7,#0x0
    203            TRY{
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   7408         MOV       A,#0x8
   \   00005F                REQUIRE ?V7
   \   00005F   12....       LCALL     ?SETJMP_XDATA
   \   000062   8A..         MOV       ?V4,R2
   \   000064   8B..         MOV       ?V5,R3
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for network_recv_sync>_0`:
   \   00006B   0000         DW        0
   \   00006D   02           DB        2
   \   00006E   ....         DW        ??network_recv_sync_2
   \   000070   ....         DW        ??network_recv_sync_3
   \   000072   ....         DW        ??network_recv_sync_4
   \   000074   ....         DW        ??network_recv_sync_5
    204              frame = RI_Receive(timeout);
   \                     ??network_recv_sync_3:
   \   000076                ; Setup parameters for call to function RI_Receive
   \   000076   AA..         MOV       R2,?V0
   \   000078   AB..         MOV       R3,?V1
   \   00007A   AC..         MOV       R4,?V2
   \   00007C   AD..         MOV       R5,?V3
   \   00007E   12....       LCALL     `??RI_Receive::?relay`; Banked call to: RI_Receive
   \   000081   8A..         MOV       ?V4,R2
   \   000083   8B..         MOV       ?V5,R3
   \   000085   AE..         MOV       R6,?V4
   \   000087   AF..         MOV       R7,?V5
    205              if (!frame)
   \   000089   EE           MOV       A,R6
   \   00008A   4F           ORL       A,R7
   \   00008B   700F         JNZ       ??network_recv_sync_6
    206                THROW(1);
   \   00008D   7A01         MOV       R2,#0x1
   \   00008F   7B00         MOV       R3,#0x0
   \   000091   85..82       MOV       DPL,?XSP + 0
   \   000094   85..83       MOV       DPH,?XSP + 1
   \   000097   7408         MOV       A,#0x8
   \   000099                REQUIRE ?V7
   \   000099   02....       LJMP      ?LONGJMP_XDATA
    207              if (frame->len != sizeof(struct sync))
   \                     ??network_recv_sync_6:
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   640B         XRL       A,#0xb
   \   0000A3   600F         JZ        ??network_recv_sync_7
    208                THROW(2);
   \   0000A5   7A02         MOV       R2,#0x2
   \   0000A7   7B00         MOV       R3,#0x0
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   7408         MOV       A,#0x8
   \   0000B1                REQUIRE ?V7
   \   0000B1   02....       LJMP      ?LONGJMP_XDATA
    209              AES_StreamCoder(false, frame->payload, frame->payload, frame->len);
   \                     ??network_recv_sync_7:
   \   0000B4                ; Setup parameters for call to function AES_StreamCoder
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   EE           MOV       A,R6
   \   0000BB   2415         ADD       A,#0x15
   \   0000BD   FC           MOV       R4,A
   \   0000BE   E4           CLR       A
   \   0000BF   3F           ADDC      A,R7
   \   0000C0   FD           MOV       R5,A
   \   0000C1   EE           MOV       A,R6
   \   0000C2   2415         ADD       A,#0x15
   \   0000C4   FA           MOV       R2,A
   \   0000C5   E4           CLR       A
   \   0000C6   3F           ADDC      A,R7
   \   0000C7   FB           MOV       R3,A
   \   0000C8   C2F0         CLR       B.0
   \   0000CA   12....       LCALL     `??AES_StreamCoder::?relay`; Banked call to: AES_StreamCoder
    210              return frame;
   \   0000CD   EE           MOV       A,R6
   \   0000CE   FA           MOV       R2,A
   \   0000CF   EF           MOV       A,R7
   \   0000D0   FB           MOV       R3,A
   \   0000D1   8017         SJMP      ??network_recv_sync_8
    211            }
    212            CATCH(1){
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    213              return NULL;
   \                     ??network_recv_sync_4:
   \   0000D3   7A00         MOV       R2,#0x0
   \   0000D5   7B00         MOV       R3,#0x0
   \   0000D7   8011         SJMP      ??network_recv_sync_8
    214            }
    215            CATCH(2){
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    216              FR_delete(frame);
   \                     ??network_recv_sync_5:
   \   0000D9                ; Setup parameters for call to function FR_delete
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EF           MOV       A,R7
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    217              return NULL;
   \   0000E0   7A00         MOV       R2,#0x0
   \   0000E2   7B00         MOV       R3,#0x0
   \   0000E4   8004         SJMP      ??network_recv_sync_8
    218            }
    219            ETRY;
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    220            return frame;
   \                     ??network_recv_sync_2:
   \   0000E6   EE           MOV       A,R6
   \   0000E7   FA           MOV       R2,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   FB           MOV       R3,A
   \                     ??network_recv_sync_8:
   \   0000EA   7431         MOV       A,#0x31
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EF   7F06         MOV       R7,#0x6
   \   0000F1   02....       LJMP      ?BANKED_LEAVE_XDATA
    221          }
    222          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          bool network_sync(ustime_t timeout){  
   \                     network_sync:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 57
   \   000005   74C7         MOV       A,#-0x39
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
    224            stamp_t now = UST_now();
   \   00001A                ; Setup parameters for call to function UST_now
   \   00001A   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   8C..         MOV       ?V2,R4
   \   000023   8D..         MOV       ?V3,R5
    225            struct frame *frame;
    226            struct sync *sync;
    227            
    228            TRY{
   \   000025   7408         MOV       A,#0x8
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   7408         MOV       A,#0x8
   \   00002C                REQUIRE ?V7
   \   00002C   12....       LCALL     ?SETJMP_XDATA
   \   00002F   8A..         MOV       ?V4,R2
   \   000031   8B..         MOV       ?V5,R3
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for network_sync>_0`:
   \   000038   0000         DW        0
   \   00003A   01           DB        1
   \   00003B   ....         DW        ??network_sync_0
   \   00003D   ....         DW        ??network_sync_1
   \   00003F   ....         DW        ??network_sync_2
    229              while(true){
    230                if(UST_time_over(now, timeout))
   \                     ??network_sync_1:
   \   000041                ; Setup parameters for call to function UST_time_over
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   AC..         MOV       R4,?V2
   \   00004F   AD..         MOV       R5,?V3
   \   000051   12....       LCALL     `??UST_time_over::?relay`; Banked call to: UST_time_over
   \   000054   7404         MOV       A,#0x4
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   \   000059   500E         JNC       ??network_sync_3
    231                   THROW(1);
   \   00005B   7A01         MOV       R2,#0x1
   \   00005D   7B00         MOV       R3,#0x0
   \   00005F   7408         MOV       A,#0x8
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   7408         MOV       A,#0x8
   \   000066                REQUIRE ?V7
   \   000066   02....       LJMP      ?LONGJMP_XDATA
    232                
    233                frame = network_recv_sync(timeout);
   \                     ??network_sync_3:
   \   000069                ; Setup parameters for call to function network_recv_sync
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?XLOAD_R2345
   \   000071   12....       LCALL     `??network_recv_sync::?relay`; Banked call to: network_recv_sync
   \   000074   85..82       MOV       DPL,?XSP + 0
   \   000077   85..83       MOV       DPH,?XSP + 1
   \   00007A   EA           MOV       A,R2
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   EB           MOV       A,R3
   \   00007E   F0           MOVX      @DPTR,A
    234                if (!frame)
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F8           MOV       R0,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   49           ORL       A,R1
   \   00008C   60B3         JZ        ??network_sync_1
    235                   continue;
    236                
    237                sync = (struct sync*)frame->payload;
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   E0           MOVX      A,@DPTR
   \   000095   2415         ADD       A,#0x15
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   3400         ADDC      A,#0x0
   \   00009C   F9           MOV       R1,A
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E8           MOV       A,R0
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E9           MOV       A,R1
   \   0000A6   F0           MOVX      @DPTR,A
    238                if (sync->magic != MAGIC){
   \   0000A7   90....       MOV       DPTR,#__Constant_19833891
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?L_MOV_X
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F8           MOV       R0,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C8           XCH       A,R0
   \   0000B9   2407         ADD       A,#0x7
   \   0000BB   F582         MOV       DPL,A
   \   0000BD   C8           XCH       A,R0
   \   0000BE   3400         ADDC      A,#0x0
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   78..         MOV       R0,#?V4
   \   0000C4   12....       LCALL     ?L_EQ_X
   \   0000C7   6011         JZ        ??network_sync_4
    239                  FR_delete(frame);
   \   0000C9                ; Setup parameters for call to function FR_delete
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   FA           MOV       R2,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   FB           MOV       R3,A
   \   0000D4   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    240                  continue;
   \   0000D7   02....       LJMP      ??network_sync_1 & 0xFFFF
    241                }
    242               
    243                syncronize_timer(frame);
   \                     ??network_sync_4:
   \   0000DA                ; Setup parameters for call to function syncronize_timer
   \   0000DA   85..82       MOV       DPL,?XSP + 0
   \   0000DD   85..83       MOV       DPH,?XSP + 1
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FA           MOV       R2,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FB           MOV       R3,A
   \   0000E5   12....       LCALL     `??syncronize_timer::?relay`; Banked call to: syncronize_timer
    244                
    245                MODEL.SYNC.synced = true;
   \   0000E8   7401         MOV       A,#0x1
   \   0000EA   90....       MOV       DPTR,#MODEL + 132
   \   0000ED   F0           MOVX      @DPTR,A
    246                MODEL.SYNC.sys_channel = sync->sys_ch;
   \   0000EE   7402         MOV       A,#0x2
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   F8           MOV       R0,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   8882         MOV       DPL,R0
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   90....       MOV       DPTR,#MODEL + 133
   \   0000FF   F0           MOVX      @DPTR,A
    247                MODEL.SYNC.panid = sync->panid;
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F583         MOV       DPH,A
   \   00010B   8882         MOV       DPL,R0
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   90....       MOV       DPTR,#MODEL + 149
   \   000113   F0           MOVX      @DPTR,A
    248                MODEL.RADIO.power_tx = sync->tx_power;
   \   000114   7402         MOV       A,#0x2
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   F8           MOV       R0,A
   \   00011B   A3           INC       DPTR
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F583         MOV       DPH,A
   \   00011F   8882         MOV       DPL,R0
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   90....       MOV       DPTR,#MODEL + 95
   \   000126   F0           MOVX      @DPTR,A
    249                MODEL.RTC.rtc = sync->rtc;
   \   000127   7402         MOV       A,#0x2
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   F8           MOV       R0,A
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F583         MOV       DPH,A
   \   000132   8882         MOV       DPL,R0
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   12....       LCALL     ?XLOAD_R0123
   \   00013A   90....       MOV       DPTR,#MODEL + 8
   \   00013D   12....       LCALL     ?XSTORE_R0123
    250                
    251                retransmite = RETRANSMITE_TRY;
   \   000140   90....       MOV       DPTR,#??retransmite
   \   000143   7403         MOV       A,#0x3
   \   000145   F0           MOVX      @DPTR,A
    252                MODEL.SYNC.next_time_recv = MODEL.RTC.uptime +  SEND_PERIOD ;
   \   000146   90....       MOV       DPTR,#MODEL + 4
   \   000149   78..         MOV       R0,#?V4
   \   00014B   12....       LCALL     ?L_MOV_X
   \   00014E   90....       MOV       DPTR,#__Constant_a
   \   000151   78..         MOV       R0,#?V4
   \   000153   12....       LCALL     ?L_ADD_X
   \   000156   90....       MOV       DPTR,#MODEL + 141
   \   000159   78..         MOV       R0,#?V4
   \   00015B   12....       LCALL     ?L_MOV_TO_X
    253                MODEL.SYNC.last_time_recv = MODEL.RTC.uptime;     
   \   00015E   90....       MOV       DPTR,#MODEL + 4
   \   000161   12....       LCALL     ?XLOAD_R0123
   \   000164   90....       MOV       DPTR,#MODEL + 145
   \   000167   12....       LCALL     ?XSTORE_R0123
    254                break;
    255              }
    256            }
    257            CATCH(1){
   \   00016A   8011         SJMP      ??network_sync_0
    258              FR_delete(frame);
   \                     ??network_sync_2:
   \   00016C                ; Setup parameters for call to function FR_delete
   \   00016C   85..82       MOV       DPL,?XSP + 0
   \   00016F   85..83       MOV       DPH,?XSP + 1
   \   000172   E0           MOVX      A,@DPTR
   \   000173   FA           MOV       R2,A
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   FB           MOV       R3,A
   \   000177   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    259              return false; // timeout
   \   00017A   C3           CLR       C
   \   00017B   800F         SJMP      ??network_sync_5
    260            }
    261            FINALLY{
                   ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\sync.c"
    262              FR_delete(frame);
   \                     ??network_sync_0:
   \   00017D                ; Setup parameters for call to function FR_delete
   \   00017D   85..82       MOV       DPL,?XSP + 0
   \   000180   85..83       MOV       DPH,?XSP + 1
   \   000183   E0           MOVX      A,@DPTR
   \   000184   FA           MOV       R2,A
   \   000185   A3           INC       DPTR
   \   000186   E0           MOVX      A,@DPTR
   \   000187   FB           MOV       R3,A
   \   000188   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
    263            }
    264            ETRY;
    265            return true;  
   \   00018B   D3           SETB      C
   \                     ??network_sync_5:
   \   00018C   7439         MOV       A,#0x39
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   7F08         MOV       R7,#0x8
   \   000193   02....       LJMP      ?BANKED_LEAVE_XDATA
    266          }
E:\Neocore\Hardware\STACK_CORE_SRC\time_manager.c
      1          #include "time_manager.h"
      2          #include "model.h"
      3          #include "action_manager.h"
      4          #include "debug.h"
      5          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      6          #include "macros.h"
      7          
      8          /**
      9          @file
     10          */
     11          
     12          #define MAX_TIME_SLOTS 50
     13          
     14          #define ACTIVE_INTERVAL (nwtime_t)327 // 9.979 мс
     15          #define SLEEP_INTERVAL (nwtime_t)327  // 9.979 мс
     16          #define UNACCOUNTED 68 // Остаток времени после 50ого интервала.
     17          #define FULL_INTERVAL (ACTIVE_INTERVAL + SLEEP_INTERVAL)
     18          #define SLOT_TO_NWTIME(slot) ((nwtime_t)((slot) * FULL_INTERVAL)) 
     19          #define NWTIME_TO_SLOT(nwtime) ((timeslot_t)((time)/FULL_INTERVAL))
     20           
     21          //!< Список задач менеджера. Индекс - номер слота, значение-действие

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static char ALARMS[MAX_TIME_SLOTS];
   \                     ??ALARMS:
   \   000000                DS 50
   \   000032                REQUIRE __INIT_XDATA_Z
     23          
     24          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          void TM_SetAlarm(timeslot_t slot, char alarm){
   \                     TM_SetAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     26            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4025         JC        ??TM_SetAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75..1A       MOV       ?V0,#0x1a
   \   000012   75..00       MOV       ?V1,#0x0
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   00001D   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_7` & 0xff
   \   000027   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_7` >> 8) & 0xff
   \   000029   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000031                ; Setup parameters for call to function DBG_CORE_HALT
   \   000031   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     27            ALARMS[slot] |= alarm;
   \                     ??TM_SetAlarm_0:
   \   000034   EE           MOV       A,R6
   \   000035   F8           MOV       R0,A
   \   000036   7900         MOV       R1,#0x0
   \   000038   74..         MOV       A,#??ALARMS & 0xff
   \   00003A   28           ADD       A,R0
   \   00003B   F582         MOV       DPL,A
   \   00003D   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   00003F   39           ADDC      A,R1
   \   000040   F583         MOV       DPH,A
   \   000042   E0           MOVX      A,@DPTR
   \   000043   4F           ORL       A,R7
   \   000044   F0           MOVX      @DPTR,A
     28          }
   \   000045   7F02         MOV       R7,#0x2
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          void TM_ClrAlarm(timeslot_t slot, char alarm){
   \                     TM_ClrAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     31            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4025         JC        ??TM_ClrAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75..1F       MOV       ?V0,#0x1f
   \   000012   75..00       MOV       ?V1,#0x0
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   00001D   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_7` & 0xff
   \   000027   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_7` >> 8) & 0xff
   \   000029   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000031                ; Setup parameters for call to function DBG_CORE_HALT
   \   000031   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     32            ALARMS[slot] &= ~alarm;
   \                     ??TM_ClrAlarm_0:
   \   000034   EF           MOV       A,R7
   \   000035   F4           CPL       A
   \   000036   FA           MOV       R2,A
   \   000037   EE           MOV       A,R6
   \   000038   F8           MOV       R0,A
   \   000039   7900         MOV       R1,#0x0
   \   00003B   74..         MOV       A,#??ALARMS & 0xff
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   000042   39           ADDC      A,R1
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   5A           ANL       A,R2
   \   000047   F0           MOVX      @DPTR,A
     33          }
   \   000048   7F02         MOV       R7,#0x2
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
     34          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     35          static inline timeslot_t _inc_timeslot(timeslot_t slot){
   \                     ??_inc_timeslot:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
     36            slot++;
   \   000002   08           INC       R0
     37            return (slot >= MAX_TIME_SLOTS) ? 0 : slot;
   \   000003   E8           MOV       A,R0
   \   000004   C3           CLR       C
   \   000005   9432         SUBB      A,#0x32
   \   000007   4004         JC        ??_inc_timeslot_1
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??_inc_timeslot_2
   \                     ??_inc_timeslot_1:
   \   00000D   E8           MOV       A,R0
   \   00000E   F9           MOV       R1,A
   \                     ??_inc_timeslot_2:
   \   00000F   02....       LJMP      ?BRET
     38          }
     39          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          static inline timeslot_t _find_next_active(timeslot_t slot){
   \                     ??_find_next_active:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
     41            slot = _inc_timeslot(slot);
   \   000007                ; Setup parameters for call to function _inc_timeslot
   \   000007   EE           MOV       A,R6
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??_inc_timeslot::?relay`; Banked call to: _inc_timeslot
   \   00000C   E9           MOV       A,R1
   \   00000D   FE           MOV       R6,A
     42            while (slot && !ALARMS[slot])
   \                     ??_find_next_active_1:
   \   00000E   EE           MOV       A,R6
   \   00000F   601A         JZ        ??_find_next_active_2
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   7900         MOV       R1,#0x0
   \   000015   74..         MOV       A,#??ALARMS & 0xff
   \   000017   28           ADD       A,R0
   \   000018   F582         MOV       DPL,A
   \   00001A   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7009         JNZ       ??_find_next_active_2
     43              slot = _inc_timeslot(slot);
   \   000022                ; Setup parameters for call to function _inc_timeslot
   \   000022   EE           MOV       A,R6
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??_inc_timeslot::?relay`; Banked call to: _inc_timeslot
   \   000027   E9           MOV       A,R1
   \   000028   FE           MOV       R6,A
   \   000029   80E3         SJMP      ??_find_next_active_1
     44            return slot;
   \                     ??_find_next_active_2:
   \   00002B   EE           MOV       A,R6
   \   00002C   F9           MOV       R1,A
   \   00002D   7F01         MOV       R7,#0x1
   \   00002F   02....       LJMP      ?BANKED_LEAVE_XDATA
     45          }
     46          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          static void scheulder_next_alarm(nwtime_t time){
   \                     ??scheulder_next_alarm:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     48            timeslot_t slot = NWTIME_TO_SLOT(time);
   \   000009   EE           MOV       A,R6
   \   00000A   F8           MOV       R0,A
   \   00000B   EF           MOV       A,R7
   \   00000C   F9           MOV       R1,A
   \   00000D   7A8E         MOV       R2,#-0x72
   \   00000F   7B02         MOV       R3,#0x2
   \   000011   12....       LCALL     ?US_DIV_MOD
   \   000014   E8           MOV       A,R0
   \   000015   F5..         MOV       ?V0,A
     49            slot = _find_next_active(slot);
   \   000017                ; Setup parameters for call to function _find_next_active
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??_find_next_active::?relay`; Banked call to: _find_next_active
   \   00001C   E9           MOV       A,R1
   \   00001D   F5..         MOV       ?V0,A
     50            AT_set_alarm(SLOT_TO_NWTIME(slot));
   \   00001F                ; Setup parameters for call to function AT_set_alarm
   \   00001F   E5..         MOV       A,?V0
   \   000021   FA           MOV       R2,A
   \   000022   7B00         MOV       R3,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   75F08E       MOV       B,#-0x72
   \   000028   A4           MUL       AB
   \   000029   CA           XCH       A,R2
   \   00002A   A8F0         MOV       R0,B
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   28           ADD       A,R0
   \   000031   F8           MOV       R0,A
   \   000032   75F08E       MOV       B,#-0x72
   \   000035   EB           MOV       A,R3
   \   000036   A4           MUL       AB
   \   000037   28           ADD       A,R0
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     51          }
   \   00003C   7F01         MOV       R7,#0x1
   \   00003E   02....       LJMP      ?BANKED_LEAVE_XDATA
     52          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          void TM_IRQ(nwtime_t time){
   \                     TM_IRQ:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     54            if (MODEL.TM.MODE == 0){
   \   000009   90....       MOV       DPTR,#MODEL + 12
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7007         JNZ       ??TM_IRQ_0
     55              AT_enable(false);
   \   00000F                ; Setup parameters for call to function AT_enable
   \   00000F   C2F0         CLR       B.0
   \   000011   12....       LCALL     `??AT_enable::?relay`; Banked call to: AT_enable
     56              return;
   \   000014   8053         SJMP      ??TM_IRQ_1
     57            }
     58            
     59            ATOMIC_BLOCK_RESTORE{     
   \                     ??TM_IRQ_0:
   \   000016   A2AF         MOV       C,0xa8.7
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   F5..         MOV       ?V0,A
   \   00001C                ; Setup parameters for call to function __cli
   \   00001C   12....       LCALL     `??__cli::?relay_3`; Banked call to: __cli
   \   00001F   E9           MOV       A,R1
   \   000020   F8           MOV       R0,A
   \                     ??TM_IRQ_2:
   \   000021   E8           MOV       A,R0
   \   000022   6045         JZ        ??TM_IRQ_1
     60              MODEL.TM.timeslot = NWTIME_TO_SLOT(time);
   \   000024   EE           MOV       A,R6
   \   000025   F8           MOV       R0,A
   \   000026   EF           MOV       A,R7
   \   000027   F9           MOV       R1,A
   \   000028   7A8E         MOV       R2,#-0x72
   \   00002A   7B02         MOV       R3,#0x2
   \   00002C   12....       LCALL     ?US_DIV_MOD
   \   00002F   E8           MOV       A,R0
   \   000030   90....       MOV       DPTR,#MODEL + 13
   \   000033   F0           MOVX      @DPTR,A
     61              MODEL.TM.time = time;
   \   000034   90....       MOV       DPTR,#MODEL + 15
   \   000037   EE           MOV       A,R6
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EF           MOV       A,R7
   \   00003B   F0           MOVX      @DPTR,A
     62              MODEL.TM.alarm = ALARMS[ MODEL.TM.timeslot];
   \   00003C   90....       MOV       DPTR,#MODEL + 13
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   7900         MOV       R1,#0x0
   \   000043   74..         MOV       A,#??ALARMS & 0xff
   \   000045   28           ADD       A,R0
   \   000046   F582         MOV       DPL,A
   \   000048   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   00004A   39           ADDC      A,R1
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   90....       MOV       DPTR,#MODEL + 14
   \   000051   F0           MOVX      @DPTR,A
     63              scheulder_next_alarm(time);
   \   000052                ; Setup parameters for call to function scheulder_next_alarm
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??scheulder_next_alarm::?relay`; Banked call to: scheulder_next_alarm
     64              AM_Hot_start();
   \   000059                ; Setup parameters for call to function AM_Hot_start
   \   000059   12....       LCALL     `??AM_Hot_start::?relay`; Banked call to: AM_Hot_start
     65              AM_Cold_start();
   \   00005C                ; Setup parameters for call to function AM_Cold_start
   \   00005C   12....       LCALL     `??AM_Cold_start::?relay`; Banked call to: AM_Cold_start
     66            };
   \   00005F   7800         MOV       R0,#0x0
   \   000061   E5..         MOV       A,?V0
   \   000063   A2E0         MOV       C,0xE0 /* A   */.0
   \   000065   92AF         MOV       0xa8.7,C
   \   000067   80B8         SJMP      ??TM_IRQ_2
     67          }
   \                     ??TM_IRQ_1:
   \   000069   7F01         MOV       R7,#0x1
   \   00006B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00006E                REQUIRE _A_IEN0
     68          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     69          static inline void mcu_sleep(void){
   \                     ??mcu_sleep:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     70            SLEEPCMD = 2; // Режим PM2
   \   000000   75BE02       MOV       0xbe,#0x2
     71            PCON = 1;
   \   000003   758701       MOV       0x87,#0x1
     72          }
   \   000006   02....       LJMP      ?BRET
   \   000009                REQUIRE SLEEPCMD
   \   000009                REQUIRE PCON
     73          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          static inline void _clr_all(void){
   \                     ??_clr_all:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     75            for_each_type(char, ALARMS, i)
   \   000004   7582..       MOV       DPL,#??ALARMS & 0xff
   \   000007   7583..       MOV       DPH,#(??ALARMS >> 8) & 0xff
   \                     ??_clr_all_1:
   \   00000A   C3           CLR       C
   \   00000B   E582         MOV       A,DPL
   \   00000D   94..         SUBB      A,#(??ALARMS + 50) & 0xff
   \   00000F   E583         MOV       A,DPH
   \   000011   94..         SUBB      A,#((??ALARMS + 50) >> 8) & 0xff
   \   000013   5006         JNC       ??_clr_all_2
     76              *i = 0;
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   80EF         SJMP      ??_clr_all_1
     77          }
   \                     ??_clr_all_2:
   \   00001B   D083         POP       DPH
   \   00001D   D082         POP       DPL
   \   00001F   02....       LJMP      ?BRET
     78          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     79          static void init(void){
   \                     ??init:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     80            _clr_all();
   \   000004                ; Setup parameters for call to function _clr_all
   \   000004   12....       LCALL     `??_clr_all::?relay`; Banked call to: _clr_all
     81            scheulder_next_alarm(0);
   \   000007                ; Setup parameters for call to function scheulder_next_alarm
   \   000007   7A00         MOV       R2,#0x0
   \   000009   7B00         MOV       R3,#0x0
   \   00000B   12....       LCALL     `??scheulder_next_alarm::?relay`; Banked call to: scheulder_next_alarm
     82            AT_enable(true);
   \   00000E                ; Setup parameters for call to function AT_enable
   \   00000E   D2F0         SETB      B.0
   \   000010   12....       LCALL     `??AT_enable::?relay`; Banked call to: AT_enable
     83          }
   \   000013   D083         POP       DPH
   \   000015   D082         POP       DPL
   \   000017   02....       LJMP      ?BRET
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          static void start_mode_1(void){
   \                     ??start_mode_1:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     86            AM_IRQ_Init();
   \   000004                ; Setup parameters for call to function AM_IRQ_Init
   \   000004   12....       LCALL     `??AM_IRQ_Init::?relay`; Banked call to: AM_IRQ_Init
     87            init();
   \   000007                ; Setup parameters for call to function init
   \   000007   12....       LCALL     `??init::?relay` ; Banked call to: init
     88            while (true){
     89              mcu_sleep();
   \                     ??start_mode_1_1:
   \   00000A                ; Setup parameters for call to function mcu_sleep
   \   00000A   12....       LCALL     `??mcu_sleep::?relay`; Banked call to: mcu_sleep
     90              if (MODEL.TM.MODE == 0){
   \   00000D   90....       MOV       DPTR,#MODEL + 12
   \   000010   E0           MOVX      A,@DPTR
   \   000011   7007         JNZ       ??start_mode_1_2
     91                AT_enable(false);
   \   000013                ; Setup parameters for call to function AT_enable
   \   000013   C2F0         CLR       B.0
   \   000015   12....       LCALL     `??AT_enable::?relay`; Banked call to: AT_enable
     92                break;
     93              }
     94              
     95              AM_Callback();    
     96            }  
     97          }
   \   000018   8005         SJMP      ??start_mode_1_3
   \                     ??start_mode_1_2:
   \   00001A                ; Setup parameters for call to function AM_Callback
   \   00001A   12....       LCALL     `??AM_Callback::?relay`; Banked call to: AM_Callback
   \   00001D   80EB         SJMP      ??start_mode_1_1
   \                     ??start_mode_1_3:
   \   00001F   D083         POP       DPH
   \   000021   D082         POP       DPL
   \   000023   02....       LJMP      ?BRET
     98          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          static void start_mode_2(void){
   \                     ??start_mode_2:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    100            AM_IRQ_Init();
   \   000004                ; Setup parameters for call to function AM_IRQ_Init
   \   000004   12....       LCALL     `??AM_IRQ_Init::?relay`; Banked call to: AM_IRQ_Init
    101            init();
   \   000007                ; Setup parameters for call to function init
   \   000007   12....       LCALL     `??init::?relay` ; Banked call to: init
    102          }
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    103          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          void Neocore_start(void){
   \                     Neocore_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    105            switch (MODEL.TM.MODE){
   \   000005   90....       MOV       DPTR,#MODEL + 12
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6049         JZ        ??Neocore_start_0
   \   00000B   14           DEC       A
   \   00000C   6005         JZ        ??Neocore_start_1
   \   00000E   14           DEC       A
   \   00000F   6007         JZ        ??Neocore_start_2
   \   000011   800A         SJMP      ??Neocore_start_3
    106            case 0:
    107              return;
    108            case 1:
    109              start_mode_1();
   \                     ??Neocore_start_1:
   \   000013                ; Setup parameters for call to function start_mode_1
   \   000013   12....       LCALL     `??start_mode_1::?relay`; Banked call to: start_mode_1
    110              break;
   \   000016   803C         SJMP      ??Neocore_start_0
    111            case 2:
    112              start_mode_2();
   \                     ??Neocore_start_2:
   \   000018                ; Setup parameters for call to function start_mode_2
   \   000018   12....       LCALL     `??start_mode_2::?relay`; Banked call to: start_mode_2
    113              break;
   \   00001B   8037         SJMP      ??Neocore_start_0
    114            default: 
    115              HALT("Incorrect MODEL.TM.MODE");
   \                     ??Neocore_start_3:
   \   00001D                ; Setup parameters for call to function printf
   \   00001D   75....       MOV       ?V0,#??__FUNCTION___12 & 0xff
   \   000020   75....       MOV       ?V1,#(??__FUNCTION___12 >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..73       MOV       ?V0,#0x73
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   000036   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_3` & 0xff
   \   000040   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_3` >> 8) & 0xff
   \   000042   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000045   7406         MOV       A,#0x6
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A                ; Setup parameters for call to function printf
   \   00004A   7A..         MOV       R2,#`?<Constant "Incorrect MODEL.TM.MODE">` & 0xff
   \   00004C   7B..         MOV       R3,#(`?<Constant "Incorrect MODEL.TM.MODE">` >> 8) & 0xff
   \   00004E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000051                ; Setup parameters for call to function DBG_CORE_HALT
   \   000051   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    116            }
    117          }
   \                     ??Neocore_start_0:
   \   000054   7F02         MOV       R7,#0x2
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\Neocore\Hardware\PRJ Test\u_alarm_timer.c
      1          #include "debug.h"
      2          #include "alarm_timer.h"
      3          #include "cpu.h"
      4          
      5          // тестирование вставками. Теперь переопределить функции нельзя
      6          // void TM_IRQ(nwtime_t time) теперь вручную мониторить

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      7          void u_alarm_timer(void){
   \                     u_alarm_timer:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
      8            nwtime_t alarm = 500;
   \   000005   7EF4         MOV       R6,#-0xc
   \   000007   7F01         MOV       R7,#0x1
      9            INTERRUPT_ENABLE();
   \   000009   D2AF         SETB      0xa8.7
     10            AT_set_alarm(alarm);
   \   00000B                ; Setup parameters for call to function AT_set_alarm
   \   00000B   EE           MOV       A,R6
   \   00000C   FA           MOV       R2,A
   \   00000D   EF           MOV       A,R7
   \   00000E   FB           MOV       R3,A
   \   00000F   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     11            while(1);
   \                     ??u_alarm_timer_0:
   \   000012   80FE         SJMP      ??u_alarm_timer_0
   \   000014                REQUIRE _A_IEN0
     12          }
E:\Neocore\Hardware\PRJ Test\u_buffer.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          
      4          static int test1(void);
      5          static int test2(void);
      6          static int test3(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      7          struct test_unit UT_BF_1 = {.name = "BF:push tx", .fun = test1};
   \                     UT_BF_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_BF_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          struct test_unit UT_BF_2 = {.name = "BF:push-pop tx all", .fun = test2};
   \                     UT_BF_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_BF_2>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          struct test_unit UT_BF_3 = {.name = "BF:mix rx-tx bufs", .fun = test3};
   \                     UT_BF_3:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_BF_3>`
   \   000022                REQUIRE __INIT_XDATA_I
     10          
     11          #include "buffer.h"
     12          #include "frame.h"
     13          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     14          static int test3(void){
   \                     ??test3:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     15            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     16            struct frame* fr_rx[10];
     17            struct frame* fr_tx[10];
     18            struct frame* content;
     19            
     20            
     21            if (BF_rx_busy() != 0)
   \   00000E                ; Setup parameters for call to function BF_rx_busy
   \   00000E   12....       LCALL     `??BF_rx_busy::?relay`; Banked call to: BF_rx_busy
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   E5..         MOV       A,?V0
   \   000017   45..         ORL       A,?V1
   \   000019   6004         JZ        ??test3_3
     22              test_res = 31;
   \   00001B   7E1F         MOV       R6,#0x1f
   \   00001D   7F00         MOV       R7,#0x0
     23          
     24            if (BF_tx_busy() != 0)
   \                     ??test3_3:
   \   00001F                ; Setup parameters for call to function BF_tx_busy
   \   00001F   12....       LCALL     `??BF_tx_busy::?relay`; Banked call to: BF_tx_busy
   \   000022   8A..         MOV       ?V0,R2
   \   000024   8B..         MOV       ?V1,R3
   \   000026   E5..         MOV       A,?V0
   \   000028   45..         ORL       A,?V1
   \   00002A   6004         JZ        ??test3_4
     25              test_res = 32;
   \   00002C   7E20         MOV       R6,#0x20
   \   00002E   7F00         MOV       R7,#0x0
     26          
     27            if (BF_available()!=20)
   \                     ??test3_4:
   \   000030                ; Setup parameters for call to function BF_available
   \   000030   12....       LCALL     `??BF_available::?relay`; Banked call to: BF_available
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8B..         MOV       ?V1,R3
   \   000037   7414         MOV       A,#0x14
   \   000039   65..         XRL       A,?V0
   \   00003B   7004         JNZ       ??test3_5
   \   00003D   7400         MOV       A,#0x0
   \   00003F   65..         XRL       A,?V1
   \                     ??test3_5:
   \   000041   6004         JZ        ??test3_6
     28              test_res = 33;
   \   000043   7E21         MOV       R6,#0x21
   \   000045   7F00         MOV       R7,#0x0
     29            
     30            for (int i = 0; i < 10; i++){
   \                     ??test3_6:
   \   000047   75..00       MOV       ?V0,#0x0
   \   00004A   75..00       MOV       ?V1,#0x0
   \                     ??test3_7:
   \   00004D   C3           CLR       C
   \   00004E   E5..         MOV       A,?V0
   \   000050   940A         SUBB      A,#0xa
   \   000052   E5..         MOV       A,?V1
   \   000054   9400         SUBB      A,#0x0
   \   000056   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000058   65D0         XRL       A,PSW
   \   00005A   33           RLC       A
   \   00005B   4003         JC        $+5
   \   00005D   02....       LJMP      ??test3_8 & 0xFFFF
     31              fr_rx[i] = FR_create();
   \   000060                ; Setup parameters for call to function FR_create
   \   000060   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000063   A8..         MOV       R0,?V0
   \   000065   A9..         MOV       R1,?V1
   \   000067   E8           MOV       A,R0
   \   000068   75F002       MOV       B,#0x2
   \   00006B   A4           MUL       AB
   \   00006C   C8           XCH       A,R0
   \   00006D   ACF0         MOV       R4,B
   \   00006F   75F000       MOV       B,#0x0
   \   000072   A4           MUL       AB
   \   000073   2C           ADD       A,R4
   \   000074   FC           MOV       R4,A
   \   000075   75F002       MOV       B,#0x2
   \   000078   E9           MOV       A,R1
   \   000079   A4           MUL       AB
   \   00007A   2C           ADD       A,R4
   \   00007B   F9           MOV       R1,A
   \   00007C   7416         MOV       A,#0x16
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E582         MOV       A,DPL
   \   000083   28           ADD       A,R0
   \   000084   F582         MOV       DPL,A
   \   000086   E583         MOV       A,DPH
   \   000088   39           ADDC      A,R1
   \   000089   F583         MOV       DPH,A
   \   00008B   EA           MOV       A,R2
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   EB           MOV       A,R3
   \   00008F   F0           MOVX      @DPTR,A
     32              fr_tx[i] = FR_create();
   \   000090                ; Setup parameters for call to function FR_create
   \   000090   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000093   A8..         MOV       R0,?V0
   \   000095   A9..         MOV       R1,?V1
   \   000097   E8           MOV       A,R0
   \   000098   75F002       MOV       B,#0x2
   \   00009B   A4           MUL       AB
   \   00009C   C8           XCH       A,R0
   \   00009D   ACF0         MOV       R4,B
   \   00009F   75F000       MOV       B,#0x0
   \   0000A2   A4           MUL       AB
   \   0000A3   2C           ADD       A,R4
   \   0000A4   FC           MOV       R4,A
   \   0000A5   75F002       MOV       B,#0x2
   \   0000A8   E9           MOV       A,R1
   \   0000A9   A4           MUL       AB
   \   0000AA   2C           ADD       A,R4
   \   0000AB   F9           MOV       R1,A
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E582         MOV       A,DPL
   \   0000B3   28           ADD       A,R0
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   E583         MOV       A,DPH
   \   0000B8   39           ADDC      A,R1
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   EA           MOV       A,R2
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   EB           MOV       A,R3
   \   0000BF   F0           MOVX      @DPTR,A
     33              if (!BF_push_tx(fr_tx[i]))
   \   0000C0                ; Setup parameters for call to function BF_push_tx
   \   0000C0   A8..         MOV       R0,?V0
   \   0000C2   A9..         MOV       R1,?V1
   \   0000C4   E8           MOV       A,R0
   \   0000C5   75F002       MOV       B,#0x2
   \   0000C8   A4           MUL       AB
   \   0000C9   C8           XCH       A,R0
   \   0000CA   AAF0         MOV       R2,B
   \   0000CC   75F000       MOV       B,#0x0
   \   0000CF   A4           MUL       AB
   \   0000D0   2A           ADD       A,R2
   \   0000D1   FA           MOV       R2,A
   \   0000D2   75F002       MOV       B,#0x2
   \   0000D5   E9           MOV       A,R1
   \   0000D6   A4           MUL       AB
   \   0000D7   2A           ADD       A,R2
   \   0000D8   F9           MOV       R1,A
   \   0000D9   7402         MOV       A,#0x2
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E582         MOV       A,DPL
   \   0000E0   28           ADD       A,R0
   \   0000E1   F582         MOV       DPL,A
   \   0000E3   E583         MOV       A,DPH
   \   0000E5   39           ADDC      A,R1
   \   0000E6   F583         MOV       DPH,A
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   FA           MOV       R2,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   FB           MOV       R3,A
   \   0000ED   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   0000F0   4004         JC        ??test3_9
     34                test_res = 1;
   \   0000F2   7E01         MOV       R6,#0x1
   \   0000F4   7F00         MOV       R7,#0x0
     35              if (!BF_push_rx(fr_rx[i]))
   \                     ??test3_9:
   \   0000F6                ; Setup parameters for call to function BF_push_rx
   \   0000F6   A8..         MOV       R0,?V0
   \   0000F8   A9..         MOV       R1,?V1
   \   0000FA   E8           MOV       A,R0
   \   0000FB   75F002       MOV       B,#0x2
   \   0000FE   A4           MUL       AB
   \   0000FF   C8           XCH       A,R0
   \   000100   AAF0         MOV       R2,B
   \   000102   75F000       MOV       B,#0x0
   \   000105   A4           MUL       AB
   \   000106   2A           ADD       A,R2
   \   000107   FA           MOV       R2,A
   \   000108   75F002       MOV       B,#0x2
   \   00010B   E9           MOV       A,R1
   \   00010C   A4           MUL       AB
   \   00010D   2A           ADD       A,R2
   \   00010E   F9           MOV       R1,A
   \   00010F   7416         MOV       A,#0x16
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   E582         MOV       A,DPL
   \   000116   28           ADD       A,R0
   \   000117   F582         MOV       DPL,A
   \   000119   E583         MOV       A,DPH
   \   00011B   39           ADDC      A,R1
   \   00011C   F583         MOV       DPH,A
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   FA           MOV       R2,A
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   FB           MOV       R3,A
   \   000123   12....       LCALL     `??BF_push_rx::?relay`; Banked call to: BF_push_rx
   \   000126   4004         JC        ??test3_10
     36                test_res = 2;    
   \   000128   7E02         MOV       R6,#0x2
   \   00012A   7F00         MOV       R7,#0x0
     37            } 
   \                     ??test3_10:
   \   00012C   05..         INC       ?V0
   \   00012E   E5..         MOV       A,?V0
   \   000130   7002         JNZ       ??test3_11
   \   000132   05..         INC       ?V1
   \                     ??test3_11:
   \   000134   02....       LJMP      ??test3_7 & 0xFFFF
     38           
     39            if (BF_rx_busy() != 10)
   \                     ??test3_8:
   \   000137                ; Setup parameters for call to function BF_rx_busy
   \   000137   12....       LCALL     `??BF_rx_busy::?relay`; Banked call to: BF_rx_busy
   \   00013A   8A..         MOV       ?V0,R2
   \   00013C   8B..         MOV       ?V1,R3
   \   00013E   740A         MOV       A,#0xa
   \   000140   65..         XRL       A,?V0
   \   000142   7004         JNZ       ??test3_12
   \   000144   7400         MOV       A,#0x0
   \   000146   65..         XRL       A,?V1
   \                     ??test3_12:
   \   000148   6004         JZ        ??test3_13
     40              test_res = 21;
   \   00014A   7E15         MOV       R6,#0x15
   \   00014C   7F00         MOV       R7,#0x0
     41          
     42            if (BF_tx_busy() != 10)
   \                     ??test3_13:
   \   00014E                ; Setup parameters for call to function BF_tx_busy
   \   00014E   12....       LCALL     `??BF_tx_busy::?relay`; Banked call to: BF_tx_busy
   \   000151   8A..         MOV       ?V0,R2
   \   000153   8B..         MOV       ?V1,R3
   \   000155   740A         MOV       A,#0xa
   \   000157   65..         XRL       A,?V0
   \   000159   7004         JNZ       ??test3_14
   \   00015B   7400         MOV       A,#0x0
   \   00015D   65..         XRL       A,?V1
   \                     ??test3_14:
   \   00015F   6004         JZ        ??test3_15
     43              test_res = 22;
   \   000161   7E16         MOV       R6,#0x16
   \   000163   7F00         MOV       R7,#0x0
     44          
     45            if (BF_available()!=0)
   \                     ??test3_15:
   \   000165                ; Setup parameters for call to function BF_available
   \   000165   12....       LCALL     `??BF_available::?relay`; Banked call to: BF_available
   \   000168   8A..         MOV       ?V0,R2
   \   00016A   8B..         MOV       ?V1,R3
   \   00016C   E5..         MOV       A,?V0
   \   00016E   45..         ORL       A,?V1
   \   000170   6004         JZ        ??test3_16
     46              test_res = 23;
   \   000172   7E17         MOV       R6,#0x17
   \   000174   7F00         MOV       R7,#0x0
     47            
     48            void *cursor = BF_cursor_tx();
   \                     ??test3_16:
   \   000176                ; Setup parameters for call to function BF_cursor_tx
   \   000176   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000179   8A..         MOV       ?V2,R2
   \   00017B   8B..         MOV       ?V3,R3
   \   00017D   85....       MOV       ?V0,?V2
   \   000180   85....       MOV       ?V1,?V3
     49            for (int i = 0; i < 10; i++){
   \   000183   75..00       MOV       ?V2,#0x0
   \   000186   75..00       MOV       ?V3,#0x0
   \                     ??test3_17:
   \   000189   C3           CLR       C
   \   00018A   E5..         MOV       A,?V2
   \   00018C   940A         SUBB      A,#0xa
   \   00018E   E5..         MOV       A,?V3
   \   000190   9400         SUBB      A,#0x0
   \   000192   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000194   65D0         XRL       A,PSW
   \   000196   33           RLC       A
   \   000197   507A         JNC       ??test3_18
     50                content = BF_content(cursor);
   \   000199                ; Setup parameters for call to function BF_content
   \   000199   AA..         MOV       R2,?V0
   \   00019B   AB..         MOV       R3,?V1
   \   00019D   12....       LCALL     `??BF_content::?relay`; Banked call to: BF_content
   \   0001A0   85..82       MOV       DPL,?XSP + 0
   \   0001A3   85..83       MOV       DPH,?XSP + 1
   \   0001A6   EA           MOV       A,R2
   \   0001A7   F0           MOVX      @DPTR,A
   \   0001A8   A3           INC       DPTR
   \   0001A9   EB           MOV       A,R3
   \   0001AA   F0           MOVX      @DPTR,A
     51                if (content != fr_tx[9-i])
   \   0001AB   85..82       MOV       DPL,?XSP + 0
   \   0001AE   85..83       MOV       DPH,?XSP + 1
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   FA           MOV       R2,A
   \   0001B3   A3           INC       DPTR
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   FB           MOV       R3,A
   \   0001B6   C3           CLR       C
   \   0001B7   E4           CLR       A
   \   0001B8   95..         SUBB      A,?V2
   \   0001BA   F8           MOV       R0,A
   \   0001BB   E4           CLR       A
   \   0001BC   95..         SUBB      A,?V3
   \   0001BE   F9           MOV       R1,A
   \   0001BF   E8           MOV       A,R0
   \   0001C0   75F002       MOV       B,#0x2
   \   0001C3   A4           MUL       AB
   \   0001C4   C8           XCH       A,R0
   \   0001C5   ACF0         MOV       R4,B
   \   0001C7   75F000       MOV       B,#0x0
   \   0001CA   A4           MUL       AB
   \   0001CB   2C           ADD       A,R4
   \   0001CC   FC           MOV       R4,A
   \   0001CD   75F002       MOV       B,#0x2
   \   0001D0   E9           MOV       A,R1
   \   0001D1   A4           MUL       AB
   \   0001D2   2C           ADD       A,R4
   \   0001D3   F9           MOV       R1,A
   \   0001D4   7402         MOV       A,#0x2
   \   0001D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D9   E582         MOV       A,DPL
   \   0001DB   28           ADD       A,R0
   \   0001DC   F8           MOV       R0,A
   \   0001DD   E583         MOV       A,DPH
   \   0001DF   39           ADDC      A,R1
   \   0001E0   F9           MOV       R1,A
   \   0001E1   E8           MOV       A,R0
   \   0001E2   2412         ADD       A,#0x12
   \   0001E4   F582         MOV       DPL,A
   \   0001E6   E4           CLR       A
   \   0001E7   39           ADDC      A,R1
   \   0001E8   F583         MOV       DPH,A
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   6A           XRL       A,R2
   \   0001EC   7003         JNZ       ??test3_19
   \   0001EE   A3           INC       DPTR
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   6B           XRL       A,R3
   \                     ??test3_19:
   \   0001F1   6004         JZ        ??test3_20
     52                  test_res = 3;
   \   0001F3   7E03         MOV       R6,#0x3
   \   0001F5   7F00         MOV       R7,#0x0
     53                cursor = BF_cursor_next(cursor);
   \                     ??test3_20:
   \   0001F7                ; Setup parameters for call to function BF_cursor_next
   \   0001F7   AA..         MOV       R2,?V0
   \   0001F9   AB..         MOV       R3,?V1
   \   0001FB   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   0001FE   8A..         MOV       ?V4,R2
   \   000200   8B..         MOV       ?V5,R3
   \   000202   85....       MOV       ?V0,?V4
   \   000205   85....       MOV       ?V1,?V5
     54            }  
   \   000208   05..         INC       ?V2
   \   00020A   E5..         MOV       A,?V2
   \   00020C   7002         JNZ       ??test3_21
   \   00020E   05..         INC       ?V3
   \                     ??test3_21:
   \   000210   02....       LJMP      ??test3_17 & 0xFFFF
     55          
     56            cursor = BF_cursor_rx();
   \                     ??test3_18:
   \   000213                ; Setup parameters for call to function BF_cursor_rx
   \   000213   12....       LCALL     `??BF_cursor_rx::?relay`; Banked call to: BF_cursor_rx
   \   000216   8A..         MOV       ?V2,R2
   \   000218   8B..         MOV       ?V3,R3
   \   00021A   85....       MOV       ?V0,?V2
   \   00021D   85....       MOV       ?V1,?V3
     57            for (int i = 0; i < 10; i++){
   \   000220   75..00       MOV       ?V2,#0x0
   \   000223   75..00       MOV       ?V3,#0x0
   \                     ??test3_22:
   \   000226   C3           CLR       C
   \   000227   E5..         MOV       A,?V2
   \   000229   940A         SUBB      A,#0xa
   \   00022B   E5..         MOV       A,?V3
   \   00022D   9400         SUBB      A,#0x0
   \   00022F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000231   65D0         XRL       A,PSW
   \   000233   33           RLC       A
   \   000234   507A         JNC       ??test3_23
     58                content = BF_content(cursor);
   \   000236                ; Setup parameters for call to function BF_content
   \   000236   AA..         MOV       R2,?V0
   \   000238   AB..         MOV       R3,?V1
   \   00023A   12....       LCALL     `??BF_content::?relay`; Banked call to: BF_content
   \   00023D   85..82       MOV       DPL,?XSP + 0
   \   000240   85..83       MOV       DPH,?XSP + 1
   \   000243   EA           MOV       A,R2
   \   000244   F0           MOVX      @DPTR,A
   \   000245   A3           INC       DPTR
   \   000246   EB           MOV       A,R3
   \   000247   F0           MOVX      @DPTR,A
     59                if (content != fr_rx[9-i])
   \   000248   85..82       MOV       DPL,?XSP + 0
   \   00024B   85..83       MOV       DPH,?XSP + 1
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   FA           MOV       R2,A
   \   000250   A3           INC       DPTR
   \   000251   E0           MOVX      A,@DPTR
   \   000252   FB           MOV       R3,A
   \   000253   C3           CLR       C
   \   000254   E4           CLR       A
   \   000255   95..         SUBB      A,?V2
   \   000257   F8           MOV       R0,A
   \   000258   E4           CLR       A
   \   000259   95..         SUBB      A,?V3
   \   00025B   F9           MOV       R1,A
   \   00025C   E8           MOV       A,R0
   \   00025D   75F002       MOV       B,#0x2
   \   000260   A4           MUL       AB
   \   000261   C8           XCH       A,R0
   \   000262   ACF0         MOV       R4,B
   \   000264   75F000       MOV       B,#0x0
   \   000267   A4           MUL       AB
   \   000268   2C           ADD       A,R4
   \   000269   FC           MOV       R4,A
   \   00026A   75F002       MOV       B,#0x2
   \   00026D   E9           MOV       A,R1
   \   00026E   A4           MUL       AB
   \   00026F   2C           ADD       A,R4
   \   000270   F9           MOV       R1,A
   \   000271   7416         MOV       A,#0x16
   \   000273   12....       LCALL     ?XSTACK_DISP0_8
   \   000276   E582         MOV       A,DPL
   \   000278   28           ADD       A,R0
   \   000279   F8           MOV       R0,A
   \   00027A   E583         MOV       A,DPH
   \   00027C   39           ADDC      A,R1
   \   00027D   F9           MOV       R1,A
   \   00027E   E8           MOV       A,R0
   \   00027F   2412         ADD       A,#0x12
   \   000281   F582         MOV       DPL,A
   \   000283   E4           CLR       A
   \   000284   39           ADDC      A,R1
   \   000285   F583         MOV       DPH,A
   \   000287   E0           MOVX      A,@DPTR
   \   000288   6A           XRL       A,R2
   \   000289   7003         JNZ       ??test3_24
   \   00028B   A3           INC       DPTR
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   6B           XRL       A,R3
   \                     ??test3_24:
   \   00028E   6004         JZ        ??test3_25
     60                  test_res = 4;
   \   000290   7E04         MOV       R6,#0x4
   \   000292   7F00         MOV       R7,#0x0
     61                cursor = BF_cursor_next(cursor);
   \                     ??test3_25:
   \   000294                ; Setup parameters for call to function BF_cursor_next
   \   000294   AA..         MOV       R2,?V0
   \   000296   AB..         MOV       R3,?V1
   \   000298   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   00029B   8A..         MOV       ?V4,R2
   \   00029D   8B..         MOV       ?V5,R3
   \   00029F   85....       MOV       ?V0,?V4
   \   0002A2   85....       MOV       ?V1,?V5
     62            }    
   \   0002A5   05..         INC       ?V2
   \   0002A7   E5..         MOV       A,?V2
   \   0002A9   7002         JNZ       ??test3_26
   \   0002AB   05..         INC       ?V3
   \                     ??test3_26:
   \   0002AD   02....       LJMP      ??test3_22 & 0xFFFF
     63            
     64            void *del_cursor;
     65            cursor = BF_cursor_tx();
   \                     ??test3_23:
   \   0002B0                ; Setup parameters for call to function BF_cursor_tx
   \   0002B0   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   0002B3   8A..         MOV       ?V2,R2
   \   0002B5   8B..         MOV       ?V3,R3
   \   0002B7   85....       MOV       ?V0,?V2
   \   0002BA   85....       MOV       ?V1,?V3
     66            for (int i = 0; i < 10; i++){
   \   0002BD   75..00       MOV       ?V2,#0x0
   \   0002C0   75..00       MOV       ?V3,#0x0
   \                     ??test3_27:
   \   0002C3   C3           CLR       C
   \   0002C4   E5..         MOV       A,?V2
   \   0002C6   940A         SUBB      A,#0xa
   \   0002C8   E5..         MOV       A,?V3
   \   0002CA   9400         SUBB      A,#0x0
   \   0002CC   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0002CE   65D0         XRL       A,PSW
   \   0002D0   33           RLC       A
   \   0002D1   506C         JNC       ??test3_28
     67                if (!FR_delete(fr_tx[i]))
   \   0002D3                ; Setup parameters for call to function FR_delete
   \   0002D3   A8..         MOV       R0,?V2
   \   0002D5   A9..         MOV       R1,?V3
   \   0002D7   E8           MOV       A,R0
   \   0002D8   75F002       MOV       B,#0x2
   \   0002DB   A4           MUL       AB
   \   0002DC   C8           XCH       A,R0
   \   0002DD   AAF0         MOV       R2,B
   \   0002DF   75F000       MOV       B,#0x0
   \   0002E2   A4           MUL       AB
   \   0002E3   2A           ADD       A,R2
   \   0002E4   FA           MOV       R2,A
   \   0002E5   75F002       MOV       B,#0x2
   \   0002E8   E9           MOV       A,R1
   \   0002E9   A4           MUL       AB
   \   0002EA   2A           ADD       A,R2
   \   0002EB   F9           MOV       R1,A
   \   0002EC   7402         MOV       A,#0x2
   \   0002EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F1   E582         MOV       A,DPL
   \   0002F3   28           ADD       A,R0
   \   0002F4   F582         MOV       DPL,A
   \   0002F6   E583         MOV       A,DPH
   \   0002F8   39           ADDC      A,R1
   \   0002F9   F583         MOV       DPH,A
   \   0002FB   E0           MOVX      A,@DPTR
   \   0002FC   FA           MOV       R2,A
   \   0002FD   A3           INC       DPTR
   \   0002FE   E0           MOVX      A,@DPTR
   \   0002FF   FB           MOV       R3,A
   \   000300   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   000303   4004         JC        ??test3_29
     68                  test_res = 5;
   \   000305   7E05         MOV       R6,#0x5
   \   000307   7F00         MOV       R7,#0x0
     69                del_cursor = cursor;
   \                     ??test3_29:
   \   000309   85....       MOV       ?V6,?V0
   \   00030C   85....       MOV       ?V7,?V1
     70                cursor = BF_cursor_next(cursor);
   \   00030F                ; Setup parameters for call to function BF_cursor_next
   \   00030F   AA..         MOV       R2,?V0
   \   000311   AB..         MOV       R3,?V1
   \   000313   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   000316   8A..         MOV       ?V4,R2
   \   000318   8B..         MOV       ?V5,R3
   \   00031A   85....       MOV       ?V0,?V4
   \   00031D   85....       MOV       ?V1,?V5
     71                if (!BF_remove(del_cursor))
                            ^
Warning[Pe223]: function "BF_remove" declared implicitly
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_buffer.c"
   \   000320                ; Setup parameters for call to function BF_remove
   \   000320   AA..         MOV       R2,?V6
   \   000322   AB..         MOV       R3,?V7
   \   000324   12....       LCALL     `??BF_remove::?relay`; Banked call to: BF_remove
   \   000327   8A..         MOV       ?V4,R2
   \   000329   8B..         MOV       ?V5,R3
   \   00032B   E5..         MOV       A,?V4
   \   00032D   45..         ORL       A,?V5
   \   00032F   7004         JNZ       ??test3_30
     72                  test_res = 6;
   \   000331   7E06         MOV       R6,#0x6
   \   000333   7F00         MOV       R7,#0x0
     73            }  
   \                     ??test3_30:
   \   000335   05..         INC       ?V2
   \   000337   E5..         MOV       A,?V2
   \   000339   7088         JNZ       ??test3_27
   \   00033B   05..         INC       ?V3
   \   00033D   8084         SJMP      ??test3_27
     74          
     75          
     76            cursor = BF_cursor_rx();
   \                     ??test3_28:
   \   00033F                ; Setup parameters for call to function BF_cursor_rx
   \   00033F   12....       LCALL     `??BF_cursor_rx::?relay`; Banked call to: BF_cursor_rx
   \   000342   8A..         MOV       ?V2,R2
   \   000344   8B..         MOV       ?V3,R3
   \   000346   85....       MOV       ?V0,?V2
   \   000349   85....       MOV       ?V1,?V3
     77            for (int i = 0; i < 10; i++){
   \   00034C   75..00       MOV       ?V2,#0x0
   \   00034F   75..00       MOV       ?V3,#0x0
   \                     ??test3_31:
   \   000352   C3           CLR       C
   \   000353   E5..         MOV       A,?V2
   \   000355   940A         SUBB      A,#0xa
   \   000357   E5..         MOV       A,?V3
   \   000359   9400         SUBB      A,#0x0
   \   00035B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00035D   65D0         XRL       A,PSW
   \   00035F   33           RLC       A
   \   000360   506C         JNC       ??test3_32
     78                if (!FR_delete(fr_rx[i]))
   \   000362                ; Setup parameters for call to function FR_delete
   \   000362   A8..         MOV       R0,?V2
   \   000364   A9..         MOV       R1,?V3
   \   000366   E8           MOV       A,R0
   \   000367   75F002       MOV       B,#0x2
   \   00036A   A4           MUL       AB
   \   00036B   C8           XCH       A,R0
   \   00036C   AAF0         MOV       R2,B
   \   00036E   75F000       MOV       B,#0x0
   \   000371   A4           MUL       AB
   \   000372   2A           ADD       A,R2
   \   000373   FA           MOV       R2,A
   \   000374   75F002       MOV       B,#0x2
   \   000377   E9           MOV       A,R1
   \   000378   A4           MUL       AB
   \   000379   2A           ADD       A,R2
   \   00037A   F9           MOV       R1,A
   \   00037B   7416         MOV       A,#0x16
   \   00037D   12....       LCALL     ?XSTACK_DISP0_8
   \   000380   E582         MOV       A,DPL
   \   000382   28           ADD       A,R0
   \   000383   F582         MOV       DPL,A
   \   000385   E583         MOV       A,DPH
   \   000387   39           ADDC      A,R1
   \   000388   F583         MOV       DPH,A
   \   00038A   E0           MOVX      A,@DPTR
   \   00038B   FA           MOV       R2,A
   \   00038C   A3           INC       DPTR
   \   00038D   E0           MOVX      A,@DPTR
   \   00038E   FB           MOV       R3,A
   \   00038F   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   000392   4004         JC        ??test3_33
     79                  test_res = 7;
   \   000394   7E07         MOV       R6,#0x7
   \   000396   7F00         MOV       R7,#0x0
     80                del_cursor = cursor;
   \                     ??test3_33:
   \   000398   85....       MOV       ?V6,?V0
   \   00039B   85....       MOV       ?V7,?V1
     81                cursor = BF_cursor_next(cursor);
   \   00039E                ; Setup parameters for call to function BF_cursor_next
   \   00039E   AA..         MOV       R2,?V0
   \   0003A0   AB..         MOV       R3,?V1
   \   0003A2   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   0003A5   8A..         MOV       ?V4,R2
   \   0003A7   8B..         MOV       ?V5,R3
   \   0003A9   85....       MOV       ?V0,?V4
   \   0003AC   85....       MOV       ?V1,?V5
     82                if (!BF_remove(del_cursor))
                            ^
Warning[Pe223]: function "BF_remove" declared implicitly
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_buffer.c"
   \   0003AF                ; Setup parameters for call to function BF_remove
   \   0003AF   AA..         MOV       R2,?V6
   \   0003B1   AB..         MOV       R3,?V7
   \   0003B3   12....       LCALL     `??BF_remove::?relay`; Banked call to: BF_remove
   \   0003B6   8A..         MOV       ?V4,R2
   \   0003B8   8B..         MOV       ?V5,R3
   \   0003BA   E5..         MOV       A,?V4
   \   0003BC   45..         ORL       A,?V5
   \   0003BE   7004         JNZ       ??test3_34
     83                  test_res = 8;
   \   0003C0   7E08         MOV       R6,#0x8
   \   0003C2   7F00         MOV       R7,#0x0
     84            }
   \                     ??test3_34:
   \   0003C4   05..         INC       ?V2
   \   0003C6   E5..         MOV       A,?V2
   \   0003C8   7088         JNZ       ??test3_31
   \   0003CA   05..         INC       ?V3
   \   0003CC   8084         SJMP      ??test3_31
     85            
     86            cursor = BF_cursor_tx();
   \                     ??test3_32:
   \   0003CE                ; Setup parameters for call to function BF_cursor_tx
   \   0003CE   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   0003D1   8A..         MOV       ?V2,R2
   \   0003D3   8B..         MOV       ?V3,R3
   \   0003D5   85....       MOV       ?V0,?V2
   \   0003D8   85....       MOV       ?V1,?V3
     87            if (cursor)
   \   0003DB   E5..         MOV       A,?V0
   \   0003DD   45..         ORL       A,?V1
   \   0003DF   6006         JZ        ??test3_35
     88                return 9; 
   \   0003E1   7A09         MOV       R2,#0x9
   \   0003E3   7B00         MOV       R3,#0x0
   \   0003E5   801D         SJMP      ??test3_36
     89          
     90            cursor = BF_cursor_rx();
   \                     ??test3_35:
   \   0003E7                ; Setup parameters for call to function BF_cursor_rx
   \   0003E7   12....       LCALL     `??BF_cursor_rx::?relay`; Banked call to: BF_cursor_rx
   \   0003EA   8A..         MOV       ?V2,R2
   \   0003EC   8B..         MOV       ?V3,R3
   \   0003EE   85....       MOV       ?V0,?V2
   \   0003F1   85....       MOV       ?V1,?V3
     91            if (cursor)
   \   0003F4   E5..         MOV       A,?V0
   \   0003F6   45..         ORL       A,?V1
   \   0003F8   6006         JZ        ??test3_37
     92                return 9;
   \   0003FA   7A09         MOV       R2,#0x9
   \   0003FC   7B00         MOV       R3,#0x0
   \   0003FE   8004         SJMP      ??test3_36
     93            
     94           return test_res;
   \                     ??test3_37:
   \   000400   EE           MOV       A,R6
   \   000401   FA           MOV       R2,A
   \   000402   EF           MOV       A,R7
   \   000403   FB           MOV       R3,A
   \                     ??test3_36:
   \   000404   742A         MOV       A,#0x2a
   \   000406   12....       LCALL     ?DEALLOC_XSTACK8
   \   000409   7F08         MOV       R7,#0x8
   \   00040B   02....       LJMP      ?BANKED_LEAVE_XDATA
     95          }
     96          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          static int test2(void){
   \                     ??test2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     98            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     99            
    100            struct frame* fr[20];
    101            struct frame* content;
    102            
    103            for (int i = 0; i < 20; i++){
   \   00000E   75..00       MOV       ?V0,#0x0
   \   000011   75..00       MOV       ?V1,#0x0
   \                     ??test2_4:
   \   000014   C3           CLR       C
   \   000015   E5..         MOV       A,?V0
   \   000017   9414         SUBB      A,#0x14
   \   000019   E5..         MOV       A,?V1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   5070         JNC       ??test2_5
    104              fr[i] = FR_create();
   \   000024                ; Setup parameters for call to function FR_create
   \   000024   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000027   A8..         MOV       R0,?V0
   \   000029   A9..         MOV       R1,?V1
   \   00002B   E8           MOV       A,R0
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   ACF0         MOV       R4,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   75F002       MOV       B,#0x2
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2C           ADD       A,R4
   \   00003F   F9           MOV       R1,A
   \   000040   7402         MOV       A,#0x2
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E582         MOV       A,DPL
   \   000047   28           ADD       A,R0
   \   000048   F582         MOV       DPL,A
   \   00004A   E583         MOV       A,DPH
   \   00004C   39           ADDC      A,R1
   \   00004D   F583         MOV       DPH,A
   \   00004F   EA           MOV       A,R2
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   EB           MOV       A,R3
   \   000053   F0           MOVX      @DPTR,A
    105              if (!BF_push_tx(fr[i]))
   \   000054                ; Setup parameters for call to function BF_push_tx
   \   000054   A8..         MOV       R0,?V0
   \   000056   A9..         MOV       R1,?V1
   \   000058   E8           MOV       A,R0
   \   000059   75F002       MOV       B,#0x2
   \   00005C   A4           MUL       AB
   \   00005D   C8           XCH       A,R0
   \   00005E   AAF0         MOV       R2,B
   \   000060   75F000       MOV       B,#0x0
   \   000063   A4           MUL       AB
   \   000064   2A           ADD       A,R2
   \   000065   FA           MOV       R2,A
   \   000066   75F002       MOV       B,#0x2
   \   000069   E9           MOV       A,R1
   \   00006A   A4           MUL       AB
   \   00006B   2A           ADD       A,R2
   \   00006C   F9           MOV       R1,A
   \   00006D   7402         MOV       A,#0x2
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E582         MOV       A,DPL
   \   000074   28           ADD       A,R0
   \   000075   F582         MOV       DPL,A
   \   000077   E583         MOV       A,DPH
   \   000079   39           ADDC      A,R1
   \   00007A   F583         MOV       DPH,A
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   000084   4004         JC        ??test2_6
    106                test_res = 1;
   \   000086   7E01         MOV       R6,#0x1
   \   000088   7F00         MOV       R7,#0x0
    107            }
   \                     ??test2_6:
   \   00008A   05..         INC       ?V0
   \   00008C   E5..         MOV       A,?V0
   \   00008E   7084         JNZ       ??test2_4
   \   000090   05..         INC       ?V1
   \   000092   8080         SJMP      ??test2_4
    108            
    109            void *cursor = BF_cursor_tx();
   \                     ??test2_5:
   \   000094                ; Setup parameters for call to function BF_cursor_tx
   \   000094   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000097   8A..         MOV       ?V2,R2
   \   000099   8B..         MOV       ?V3,R3
   \   00009B   85....       MOV       ?V0,?V2
   \   00009E   85....       MOV       ?V1,?V3
    110            for (int i = 0; i <20; i++){
   \   0000A1   75..00       MOV       ?V2,#0x0
   \   0000A4   75..00       MOV       ?V3,#0x0
   \                     ??test2_7:
   \   0000A7   C3           CLR       C
   \   0000A8   E5..         MOV       A,?V2
   \   0000AA   9414         SUBB      A,#0x14
   \   0000AC   E5..         MOV       A,?V3
   \   0000AE   9400         SUBB      A,#0x0
   \   0000B0   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000B2   65D0         XRL       A,PSW
   \   0000B4   33           RLC       A
   \   0000B5   507A         JNC       ??test2_8
    111                content = BF_content(cursor);
   \   0000B7                ; Setup parameters for call to function BF_content
   \   0000B7   AA..         MOV       R2,?V0
   \   0000B9   AB..         MOV       R3,?V1
   \   0000BB   12....       LCALL     `??BF_content::?relay`; Banked call to: BF_content
   \   0000BE   85..82       MOV       DPL,?XSP + 0
   \   0000C1   85..83       MOV       DPH,?XSP + 1
   \   0000C4   EA           MOV       A,R2
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   EB           MOV       A,R3
   \   0000C8   F0           MOVX      @DPTR,A
    112                if (content != fr[19-i])
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   FA           MOV       R2,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   FB           MOV       R3,A
   \   0000D4   C3           CLR       C
   \   0000D5   E4           CLR       A
   \   0000D6   95..         SUBB      A,?V2
   \   0000D8   F8           MOV       R0,A
   \   0000D9   E4           CLR       A
   \   0000DA   95..         SUBB      A,?V3
   \   0000DC   F9           MOV       R1,A
   \   0000DD   E8           MOV       A,R0
   \   0000DE   75F002       MOV       B,#0x2
   \   0000E1   A4           MUL       AB
   \   0000E2   C8           XCH       A,R0
   \   0000E3   ACF0         MOV       R4,B
   \   0000E5   75F000       MOV       B,#0x0
   \   0000E8   A4           MUL       AB
   \   0000E9   2C           ADD       A,R4
   \   0000EA   FC           MOV       R4,A
   \   0000EB   75F002       MOV       B,#0x2
   \   0000EE   E9           MOV       A,R1
   \   0000EF   A4           MUL       AB
   \   0000F0   2C           ADD       A,R4
   \   0000F1   F9           MOV       R1,A
   \   0000F2   7402         MOV       A,#0x2
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   E582         MOV       A,DPL
   \   0000F9   28           ADD       A,R0
   \   0000FA   F8           MOV       R0,A
   \   0000FB   E583         MOV       A,DPH
   \   0000FD   39           ADDC      A,R1
   \   0000FE   F9           MOV       R1,A
   \   0000FF   E8           MOV       A,R0
   \   000100   2426         ADD       A,#0x26
   \   000102   F582         MOV       DPL,A
   \   000104   E4           CLR       A
   \   000105   39           ADDC      A,R1
   \   000106   F583         MOV       DPH,A
   \   000108   E0           MOVX      A,@DPTR
   \   000109   6A           XRL       A,R2
   \   00010A   7003         JNZ       ??test2_9
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   6B           XRL       A,R3
   \                     ??test2_9:
   \   00010F   6004         JZ        ??test2_10
    113                  test_res = 2;
   \   000111   7E02         MOV       R6,#0x2
   \   000113   7F00         MOV       R7,#0x0
    114                cursor = BF_cursor_next(cursor);
   \                     ??test2_10:
   \   000115                ; Setup parameters for call to function BF_cursor_next
   \   000115   AA..         MOV       R2,?V0
   \   000117   AB..         MOV       R3,?V1
   \   000119   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   00011C   8A..         MOV       ?V4,R2
   \   00011E   8B..         MOV       ?V5,R3
   \   000120   85....       MOV       ?V0,?V4
   \   000123   85....       MOV       ?V1,?V5
    115            }
   \   000126   05..         INC       ?V2
   \   000128   E5..         MOV       A,?V2
   \   00012A   7002         JNZ       ??test2_11
   \   00012C   05..         INC       ?V3
   \                     ??test2_11:
   \   00012E   02....       LJMP      ??test2_7 & 0xFFFF
    116            
    117            void *del_cursor;
    118            cursor = BF_cursor_tx();
   \                     ??test2_8:
   \   000131                ; Setup parameters for call to function BF_cursor_tx
   \   000131   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000134   8A..         MOV       ?V2,R2
   \   000136   8B..         MOV       ?V3,R3
   \   000138   85....       MOV       ?V0,?V2
   \   00013B   85....       MOV       ?V1,?V3
    119            for (int i = 0; i < 20; i++){
   \   00013E   75..00       MOV       ?V2,#0x0
   \   000141   75..00       MOV       ?V3,#0x0
   \                     ??test2_12:
   \   000144   C3           CLR       C
   \   000145   E5..         MOV       A,?V2
   \   000147   9414         SUBB      A,#0x14
   \   000149   E5..         MOV       A,?V3
   \   00014B   9400         SUBB      A,#0x0
   \   00014D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00014F   65D0         XRL       A,PSW
   \   000151   33           RLC       A
   \   000152   506C         JNC       ??test2_13
    120                if (!FR_delete(fr[i]))
   \   000154                ; Setup parameters for call to function FR_delete
   \   000154   A8..         MOV       R0,?V2
   \   000156   A9..         MOV       R1,?V3
   \   000158   E8           MOV       A,R0
   \   000159   75F002       MOV       B,#0x2
   \   00015C   A4           MUL       AB
   \   00015D   C8           XCH       A,R0
   \   00015E   AAF0         MOV       R2,B
   \   000160   75F000       MOV       B,#0x0
   \   000163   A4           MUL       AB
   \   000164   2A           ADD       A,R2
   \   000165   FA           MOV       R2,A
   \   000166   75F002       MOV       B,#0x2
   \   000169   E9           MOV       A,R1
   \   00016A   A4           MUL       AB
   \   00016B   2A           ADD       A,R2
   \   00016C   F9           MOV       R1,A
   \   00016D   7402         MOV       A,#0x2
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   E582         MOV       A,DPL
   \   000174   28           ADD       A,R0
   \   000175   F582         MOV       DPL,A
   \   000177   E583         MOV       A,DPH
   \   000179   39           ADDC      A,R1
   \   00017A   F583         MOV       DPH,A
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   FA           MOV       R2,A
   \   00017E   A3           INC       DPTR
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   FB           MOV       R3,A
   \   000181   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   000184   4004         JC        ??test2_14
    121                  test_res = 3;
   \   000186   7E03         MOV       R6,#0x3
   \   000188   7F00         MOV       R7,#0x0
    122                del_cursor = cursor;
   \                     ??test2_14:
   \   00018A   85....       MOV       ?V6,?V0
   \   00018D   85....       MOV       ?V7,?V1
    123                cursor = BF_cursor_next(cursor);
   \   000190                ; Setup parameters for call to function BF_cursor_next
   \   000190   AA..         MOV       R2,?V0
   \   000192   AB..         MOV       R3,?V1
   \   000194   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   000197   8A..         MOV       ?V4,R2
   \   000199   8B..         MOV       ?V5,R3
   \   00019B   85....       MOV       ?V0,?V4
   \   00019E   85....       MOV       ?V1,?V5
    124                if (!BF_remove(del_cursor))
                            ^
Warning[Pe223]: function "BF_remove" declared implicitly
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_buffer.c"
   \   0001A1                ; Setup parameters for call to function BF_remove
   \   0001A1   AA..         MOV       R2,?V6
   \   0001A3   AB..         MOV       R3,?V7
   \   0001A5   12....       LCALL     `??BF_remove::?relay`; Banked call to: BF_remove
   \   0001A8   8A..         MOV       ?V4,R2
   \   0001AA   8B..         MOV       ?V5,R3
   \   0001AC   E5..         MOV       A,?V4
   \   0001AE   45..         ORL       A,?V5
   \   0001B0   7004         JNZ       ??test2_15
    125                  test_res = 4;
   \   0001B2   7E04         MOV       R6,#0x4
   \   0001B4   7F00         MOV       R7,#0x0
    126            }
   \                     ??test2_15:
   \   0001B6   05..         INC       ?V2
   \   0001B8   E5..         MOV       A,?V2
   \   0001BA   7088         JNZ       ??test2_12
   \   0001BC   05..         INC       ?V3
   \   0001BE   8084         SJMP      ??test2_12
    127            
    128            cursor = BF_cursor_tx();
   \                     ??test2_13:
   \   0001C0                ; Setup parameters for call to function BF_cursor_tx
   \   0001C0   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   0001C3   8A..         MOV       ?V2,R2
   \   0001C5   8B..         MOV       ?V3,R3
   \   0001C7   85....       MOV       ?V0,?V2
   \   0001CA   85....       MOV       ?V1,?V3
    129            if (cursor)
   \   0001CD   E5..         MOV       A,?V0
   \   0001CF   45..         ORL       A,?V1
   \   0001D1   6004         JZ        ??test2_16
    130                test_res =  5; 
   \   0001D3   7E05         MOV       R6,#0x5
   \   0001D5   7F00         MOV       R7,#0x0
    131            
    132            return test_res;
   \                     ??test2_16:
   \   0001D7   EE           MOV       A,R6
   \   0001D8   FA           MOV       R2,A
   \   0001D9   EF           MOV       A,R7
   \   0001DA   FB           MOV       R3,A
   \   0001DB   742A         MOV       A,#0x2a
   \   0001DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E0   7F08         MOV       R7,#0x8
   \   0001E2   02....       LJMP      ?BANKED_LEAVE_XDATA
    133          }
    134          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    135          static int test1(void){
   \                     ??test1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    136            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
    137            struct frame *fr = FR_create();
   \   00000E                ; Setup parameters for call to function FR_create
   \   00000E   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   85....       MOV       ?V2,?V0
   \   000018   85....       MOV       ?V3,?V1
    138            
    139            if (!BF_push_tx(fr))
   \   00001B                ; Setup parameters for call to function BF_push_tx
   \   00001B   AA..         MOV       R2,?V2
   \   00001D   AB..         MOV       R3,?V3
   \   00001F   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   000022   4004         JC        ??test1_4
    140              test_res = 1;
   \   000024   7E01         MOV       R6,#0x1
   \   000026   7F00         MOV       R7,#0x0
    141          
    142            void *cursor = BF_cursor_tx();
   \                     ??test1_4:
   \   000028                ; Setup parameters for call to function BF_cursor_tx
   \   000028   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   00002B   8A..         MOV       ?V4,R2
   \   00002D   8B..         MOV       ?V5,R3
   \   00002F   85....       MOV       ?V0,?V4
   \   000032   85....       MOV       ?V1,?V5
    143            if (!cursor)
   \   000035   E5..         MOV       A,?V0
   \   000037   45..         ORL       A,?V1
   \   000039   7004         JNZ       ??test1_5
    144              test_res = 2;
   \   00003B   7E02         MOV       R6,#0x2
   \   00003D   7F00         MOV       R7,#0x0
    145            
    146            struct frame *n_fr = BF_content(cursor);
   \                     ??test1_5:
   \   00003F                ; Setup parameters for call to function BF_content
   \   00003F   AA..         MOV       R2,?V0
   \   000041   AB..         MOV       R3,?V1
   \   000043   12....       LCALL     `??BF_content::?relay`; Banked call to: BF_content
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    147            if (fr != n_fr)
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F9           MOV       R1,A
   \   00005C   E5..         MOV       A,?V2
   \   00005E   68           XRL       A,R0
   \   00005F   7003         JNZ       ??test1_6
   \   000061   E5..         MOV       A,?V3
   \   000063   69           XRL       A,R1
   \                     ??test1_6:
   \   000064   6004         JZ        ??test1_7
    148              test_res = 3;
   \   000066   7E03         MOV       R6,#0x3
   \   000068   7F00         MOV       R7,#0x0
    149            
    150            struct frame *fr2 = FR_create();
   \                     ??test1_7:
   \   00006A                ; Setup parameters for call to function FR_create
   \   00006A   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   00006D   8A..         MOV       ?V4,R2
   \   00006F   8B..         MOV       ?V5,R3
   \   000071   85....       MOV       ?V6,?V4
   \   000074   85....       MOV       ?V7,?V5
    151            if (!BF_push_tx(fr2))
   \   000077                ; Setup parameters for call to function BF_push_tx
   \   000077   AA..         MOV       R2,?V6
   \   000079   AB..         MOV       R3,?V7
   \   00007B   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   00007E   4004         JC        ??test1_8
    152              test_res = 4;
   \   000080   7E04         MOV       R6,#0x4
   \   000082   7F00         MOV       R7,#0x0
    153            
    154            cursor = BF_cursor_tx();
   \                     ??test1_8:
   \   000084                ; Setup parameters for call to function BF_cursor_tx
   \   000084   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000087   8A..         MOV       ?V4,R2
   \   000089   8B..         MOV       ?V5,R3
   \   00008B   85....       MOV       ?V0,?V4
   \   00008E   85....       MOV       ?V1,?V5
    155            if (!cursor)
   \   000091   E5..         MOV       A,?V0
   \   000093   45..         ORL       A,?V1
   \   000095   7004         JNZ       ??test1_9
    156              test_res = 5;
   \   000097   7E05         MOV       R6,#0x5
   \   000099   7F00         MOV       R7,#0x0
    157            
    158            cursor = BF_cursor_next(cursor);  
   \                     ??test1_9:
   \   00009B                ; Setup parameters for call to function BF_cursor_next
   \   00009B   AA..         MOV       R2,?V0
   \   00009D   AB..         MOV       R3,?V1
   \   00009F   12....       LCALL     `??BF_cursor_next::?relay`; Banked call to: BF_cursor_next
   \   0000A2   8A..         MOV       ?V4,R2
   \   0000A4   8B..         MOV       ?V5,R3
   \   0000A6   85....       MOV       ?V0,?V4
   \   0000A9   85....       MOV       ?V1,?V5
    159            if (!cursor)
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   45..         ORL       A,?V1
   \   0000B0   7004         JNZ       ??test1_10
    160              test_res = 6;
   \   0000B2   7E06         MOV       R6,#0x6
   \   0000B4   7F00         MOV       R7,#0x0
    161              
    162            cursor = BF_cursor_tx();
   \                     ??test1_10:
   \   0000B6                ; Setup parameters for call to function BF_cursor_tx
   \   0000B6   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   0000B9   8A..         MOV       ?V4,R2
   \   0000BB   8B..         MOV       ?V5,R3
   \   0000BD   85....       MOV       ?V0,?V4
   \   0000C0   85....       MOV       ?V1,?V5
    163            if (!BF_remove(cursor))
                        ^
Warning[Pe223]: function "BF_remove" declared implicitly
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_buffer.c"
   \   0000C3                ; Setup parameters for call to function BF_remove
   \   0000C3   AA..         MOV       R2,?V0
   \   0000C5   AB..         MOV       R3,?V1
   \   0000C7   12....       LCALL     `??BF_remove::?relay`; Banked call to: BF_remove
   \   0000CA   8A..         MOV       ?V4,R2
   \   0000CC   8B..         MOV       ?V5,R3
   \   0000CE   E5..         MOV       A,?V4
   \   0000D0   45..         ORL       A,?V5
   \   0000D2   7006         JNZ       ??test1_11
    164                return 8;
   \   0000D4   7A08         MOV       R2,#0x8
   \   0000D6   7B00         MOV       R3,#0x0
   \   0000D8   805F         SJMP      ??test1_12
    165            
    166            cursor = BF_cursor_tx();
   \                     ??test1_11:
   \   0000DA                ; Setup parameters for call to function BF_cursor_tx
   \   0000DA   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   0000DD   8A..         MOV       ?V4,R2
   \   0000DF   8B..         MOV       ?V5,R3
   \   0000E1   85....       MOV       ?V0,?V4
   \   0000E4   85....       MOV       ?V1,?V5
    167            if (!BF_remove(cursor))
                        ^
Warning[Pe223]: function "BF_remove" declared implicitly
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_buffer.c"
   \   0000E7                ; Setup parameters for call to function BF_remove
   \   0000E7   AA..         MOV       R2,?V0
   \   0000E9   AB..         MOV       R3,?V1
   \   0000EB   12....       LCALL     `??BF_remove::?relay`; Banked call to: BF_remove
   \   0000EE   8A..         MOV       ?V4,R2
   \   0000F0   8B..         MOV       ?V5,R3
   \   0000F2   E5..         MOV       A,?V4
   \   0000F4   45..         ORL       A,?V5
   \   0000F6   7006         JNZ       ??test1_13
    168                return 9;
   \   0000F8   7A09         MOV       R2,#0x9
   \   0000FA   7B00         MOV       R3,#0x0
   \   0000FC   803B         SJMP      ??test1_12
    169          
    170            cursor = BF_cursor_tx();
   \                     ??test1_13:
   \   0000FE                ; Setup parameters for call to function BF_cursor_tx
   \   0000FE   12....       LCALL     `??BF_cursor_tx::?relay`; Banked call to: BF_cursor_tx
   \   000101   8A..         MOV       ?V4,R2
   \   000103   8B..         MOV       ?V5,R3
   \   000105   85....       MOV       ?V0,?V4
   \   000108   85....       MOV       ?V1,?V5
    171            if (cursor)
   \   00010B   E5..         MOV       A,?V0
   \   00010D   45..         ORL       A,?V1
   \   00010F   6006         JZ        ??test1_14
    172                return 10;  
   \   000111   7A0A         MOV       R2,#0xa
   \   000113   7B00         MOV       R3,#0x0
   \   000115   8022         SJMP      ??test1_12
    173            
    174            if (!FR_delete(fr))
   \                     ??test1_14:
   \   000117                ; Setup parameters for call to function FR_delete
   \   000117   AA..         MOV       R2,?V2
   \   000119   AB..         MOV       R3,?V3
   \   00011B   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   00011E   4006         JC        ??test1_15
    175              return 11;
   \   000120   7A0B         MOV       R2,#0xb
   \   000122   7B00         MOV       R3,#0x0
   \   000124   8013         SJMP      ??test1_12
    176          
    177            if (!FR_delete(fr2))
   \                     ??test1_15:
   \   000126                ; Setup parameters for call to function FR_delete
   \   000126   AA..         MOV       R2,?V6
   \   000128   AB..         MOV       R3,?V7
   \   00012A   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   00012D   4006         JC        ??test1_16
    178              return 12;
   \   00012F   7A0C         MOV       R2,#0xc
   \   000131   7B00         MOV       R3,#0x0
   \   000133   8004         SJMP      ??test1_12
    179            
    180            return test_res;
   \                     ??test1_16:
   \   000135   EE           MOV       A,R6
   \   000136   FA           MOV       R2,A
   \   000137   EF           MOV       A,R7
   \   000138   FB           MOV       R3,A
   \                     ??test1_12:
   \   000139   7402         MOV       A,#0x2
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013E   7F08         MOV       R7,#0x8
   \   000140   02....       LJMP      ?BANKED_LEAVE_XDATA
    181          }
E:\Neocore\Hardware\PRJ Test\u_debug.c
      1          #include "utest.h"
      2          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      3          struct test_unit UTEST_DEBUG = {.name = "DEBUG MODUL"};
   \                     UTEST_DEBUG:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UTEST_DEBUG>`
   \   000022                REQUIRE __INIT_XDATA_I
      4          
      5          static void u_test(void){
      6          
      7          }
E:\Neocore\Hardware\PRJ Test\u_frame.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          #include "stdbool.h"
      4          
      5          static int test1(void);
      6          static int test2(void);
      7          static int test3(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          struct test_unit UT_FR_1 = {.name = "FR:create-delete", .fun = test1};
   \                     UT_FR_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          struct test_unit UT_FR_2 = {.name = "FR:create-full", .fun = test2};
   \                     UT_FR_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_2>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          struct test_unit UT_FR_3 = {.name = "FR:header manipulation", .fun = test3};
   \                     UT_FR_3:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_3>`
   \   000022                REQUIRE __INIT_XDATA_I
     11          #include "frame.h"
     12          
     13          //struct frame* FR_create();
     14          //void FR_delete(struct frame*);
     15          //void FR_add_header(struct frame*, void *head, char len);
     16          //void FR_del_header(struct frame*, char len);
     17          //int FR_busy();
     18          //int FR_available();
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          static bool ch_cmp(void *dst, void *src, size_t len){
   \                     ??ch_cmp:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV       A,#0x9
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
     21            while (len-- > 0){
   \                     ??ch_cmp_1:
   \   00000F   E8           MOV       A,R0
   \   000010   FE           MOV       R6,A
   \   000011   E9           MOV       A,R1
   \   000012   FF           MOV       R7,A
   \   000013   EE           MOV       A,R6
   \   000014   24FF         ADD       A,#-0x1
   \   000016   F8           MOV       R0,A
   \   000017   EF           MOV       A,R7
   \   000018   34FF         ADDC      A,#-0x1
   \   00001A   F9           MOV       R1,A
   \   00001B   EE           MOV       A,R6
   \   00001C   4F           ORL       A,R7
   \   00001D   6011         JZ        ??ch_cmp_2
     22              if ( *(char*)dst != *(char*)src)
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6E           XRL       A,R6
   \   00002B   60E2         JZ        ??ch_cmp_1
     23                return false;
   \   00002D   C3           CLR       C
   \   00002E   8001         SJMP      ??ch_cmp_3
     24            }
     25            return true;
   \                     ??ch_cmp_2:
   \   000030   D3           SETB      C
   \                     ??ch_cmp_3:
   \   000031   7F01         MOV       R7,#0x1
   \   000033   02....       LJMP      ?BANKED_LEAVE_XDATA
     26          }
     27          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     28          static bool ch_cmp_val(void *dst, char val, size_t len){
   \                     ??ch_cmp_val:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     29            while (len-- > 0){
   \                     ??ch_cmp_val_1:
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   \   000009   EE           MOV       A,R6
   \   00000A   24FF         ADD       A,#-0x1
   \   00000C   FC           MOV       R4,A
   \   00000D   EF           MOV       A,R7
   \   00000E   34FF         ADDC      A,#-0x1
   \   000010   FD           MOV       R5,A
   \   000011   EE           MOV       A,R6
   \   000012   4F           ORL       A,R7
   \   000013   600B         JZ        ??ch_cmp_val_2
     30              if ( *(char*)dst != val)
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   69           XRL       A,R1
   \   00001B   60E8         JZ        ??ch_cmp_val_1
     31                return false;
   \   00001D   C3           CLR       C
   \   00001E   8001         SJMP      ??ch_cmp_val_3
     32            }
     33            return true;
   \                     ??ch_cmp_val_2:
   \   000020   D3           SETB      C
   \                     ??ch_cmp_val_3:
   \   000021   7F01         MOV       R7,#0x1
   \   000023   02....       LJMP      ?BANKED_LEAVE_XDATA
     34          }
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          static int test3(void){
   \                     ??test3_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     37            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     38            struct frame *fr = FR_create();
   \   00000E                ; Setup parameters for call to function FR_create
   \   00000E   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000011   8A..         MOV       ?V2,R2
   \   000013   8B..         MOV       ?V3,R3
   \   000015   85....       MOV       ?V0,?V2
   \   000018   85....       MOV       ?V1,?V3
     39            char hdr[10] = {1,2,3,4,5,6,7,8,9,10};
   \   00001B   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   740A         MOV       A,#0xa
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     40            FR_add_header(fr, hdr, sizeof(hdr));
   \   000027                ; Setup parameters for call to function FR_add_header
   \   000027   790A         MOV       R1,#0xa
   \   000029   AC..         MOV       R4,?XSP + 0
   \   00002B   AD..         MOV       R5,?XSP + 1
   \   00002D   AA..         MOV       R2,?V0
   \   00002F   AB..         MOV       R3,?V1
   \   000031   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
     41            if (!ch_cmp(hdr, fr->payload, sizeof(hdr)))
   \   000034                ; Setup parameters for call to function ch_cmp
   \   000034   75..0A       MOV       ?V2,#0xa
   \   000037   75..00       MOV       ?V3,#0x0
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   E5..         MOV       A,?V0
   \   000041   2415         ADD       A,#0x15
   \   000043   FC           MOV       R4,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V1
   \   000047   FD           MOV       R5,A
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?XSTACK_DISP101_8
   \   00004D   12....       LCALL     `??ch_cmp::?relay`; Banked call to: ch_cmp
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   4004         JC        ??test3_38
     42                test_res = 1;
   \   000057   7E01         MOV       R6,#0x1
   \   000059   7F00         MOV       R7,#0x0
     43            
     44            if (fr->len != sizeof(hdr))
   \                     ??test3_38:
   \   00005B   85..82       MOV       DPL,?V0
   \   00005E   85..83       MOV       DPH,?V1
   \   000061   E0           MOVX      A,@DPTR
   \   000062   640A         XRL       A,#0xa
   \   000064   6004         JZ        ??test3_39
     45                test_res = 2;
   \   000066   7E02         MOV       R6,#0x2
   \   000068   7F00         MOV       R7,#0x0
     46            
     47            FR_del_header(fr, 5);
   \                     ??test3_39:
   \   00006A                ; Setup parameters for call to function FR_del_header
   \   00006A   7905         MOV       R1,#0x5
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   AB..         MOV       R3,?V1
   \   000070   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
     48            if (!ch_cmp(&hdr[5], fr->payload, sizeof(hdr) - 5))
   \   000073                ; Setup parameters for call to function ch_cmp
   \   000073   75..05       MOV       ?V2,#0x5
   \   000076   75..00       MOV       ?V3,#0x0
   \   000079   78..         MOV       R0,#?V2
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   E5..         MOV       A,?V0
   \   000080   2415         ADD       A,#0x15
   \   000082   FC           MOV       R4,A
   \   000083   E4           CLR       A
   \   000084   35..         ADDC      A,?V1
   \   000086   FD           MOV       R5,A
   \   000087   7407         MOV       A,#0x7
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   AA82         MOV       R2,DPL
   \   00008E   AB83         MOV       R3,DPH
   \   000090   12....       LCALL     `??ch_cmp::?relay`; Banked call to: ch_cmp
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   4004         JC        ??test3_40
     49                test_res = 3;  
   \   00009A   7E03         MOV       R6,#0x3
   \   00009C   7F00         MOV       R7,#0x0
     50            
     51            if (fr->len != sizeof(hdr) - 5)
   \                     ??test3_40:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   6405         XRL       A,#0x5
   \   0000A7   6004         JZ        ??test3_41
     52              test_res = 4;
   \   0000A9   7E04         MOV       R6,#0x4
   \   0000AB   7F00         MOV       R7,#0x0
     53            
     54            if (!ch_cmp_val(&fr->payload[5], 0, MAX_PAYLOAD_SIZE - 5))
   \                     ??test3_41:
   \   0000AD                ; Setup parameters for call to function ch_cmp_val
   \   0000AD   7C7A         MOV       R4,#0x7a
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   7900         MOV       R1,#0x0
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   241A         ADD       A,#0x1a
   \   0000B7   FA           MOV       R2,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   FB           MOV       R3,A
   \   0000BC   12....       LCALL     `??ch_cmp_val::?relay`; Banked call to: ch_cmp_val
   \   0000BF   4004         JC        ??test3_42
     55              test_res = 5;  
   \   0000C1   7E05         MOV       R6,#0x5
   \   0000C3   7F00         MOV       R7,#0x0
     56            
     57            FR_del_header(fr, 5);
   \                     ??test3_42:
   \   0000C5                ; Setup parameters for call to function FR_del_header
   \   0000C5   7905         MOV       R1,#0x5
   \   0000C7   AA..         MOV       R2,?V0
   \   0000C9   AB..         MOV       R3,?V1
   \   0000CB   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
     58            if (!ch_cmp_val(&fr->payload, 0, MAX_PAYLOAD_SIZE))
   \   0000CE                ; Setup parameters for call to function ch_cmp_val
   \   0000CE   7C7F         MOV       R4,#0x7f
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   7900         MOV       R1,#0x0
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   2415         ADD       A,#0x15
   \   0000D8   FA           MOV       R2,A
   \   0000D9   E4           CLR       A
   \   0000DA   35..         ADDC      A,?V1
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??ch_cmp_val::?relay`; Banked call to: ch_cmp_val
   \   0000E0   4004         JC        ??test3_43
     59              test_res = 6; 
   \   0000E2   7E06         MOV       R6,#0x6
   \   0000E4   7F00         MOV       R7,#0x0
     60            
     61            if (fr->len != 0)
   \                     ??test3_43:
   \   0000E6   85..82       MOV       DPL,?V0
   \   0000E9   85..83       MOV       DPH,?V1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   6004         JZ        ??test3_44
     62                test_res = 7;
   \   0000EF   7E07         MOV       R6,#0x7
   \   0000F1   7F00         MOV       R7,#0x0
     63            
     64            if (FR_add_header(fr, hdr, 200))
   \                     ??test3_44:
   \   0000F3                ; Setup parameters for call to function FR_add_header
   \   0000F3   79C8         MOV       R1,#-0x38
   \   0000F5   AC..         MOV       R4,?XSP + 0
   \   0000F7   AD..         MOV       R5,?XSP + 1
   \   0000F9   AA..         MOV       R2,?V0
   \   0000FB   AB..         MOV       R3,?V1
   \   0000FD   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
   \   000100   5004         JNC       ??test3_45
     65              test_res = 8;
   \   000102   7E08         MOV       R6,#0x8
   \   000104   7F00         MOV       R7,#0x0
     66           
     67            if (FR_del_header(fr, 200))
   \                     ??test3_45:
   \   000106                ; Setup parameters for call to function FR_del_header
   \   000106   79C8         MOV       R1,#-0x38
   \   000108   AA..         MOV       R2,?V0
   \   00010A   AB..         MOV       R3,?V1
   \   00010C   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
   \   00010F   5004         JNC       ??test3_46
     68              test_res = 9;
   \   000111   7E09         MOV       R6,#0x9
   \   000113   7F00         MOV       R7,#0x0
     69            return test_res;
   \                     ??test3_46:
   \   000115   EE           MOV       A,R6
   \   000116   FA           MOV       R2,A
   \   000117   EF           MOV       A,R7
   \   000118   FB           MOV       R3,A
   \   000119   740A         MOV       A,#0xa
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011E   7F04         MOV       R7,#0x4
   \   000120   02....       LJMP      ?BANKED_LEAVE_XDATA
     70          }
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          static int test2(void){
   \                     ??test2_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     73            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     74            struct frame* all[20];
     75            
     76            for (int i = 0; i < 20; i++)
   \   00000E   75..00       MOV       ?V0,#0x0
   \   000011   75..00       MOV       ?V1,#0x0
   \                     ??test2_17:
   \   000014   C3           CLR       C
   \   000015   E5..         MOV       A,?V0
   \   000017   9414         SUBB      A,#0x14
   \   000019   E5..         MOV       A,?V1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   503B         JNC       ??test2_18
     77              all[i] = FR_create();
   \   000024                ; Setup parameters for call to function FR_create
   \   000024   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000027   A8..         MOV       R0,?V0
   \   000029   A9..         MOV       R1,?V1
   \   00002B   E8           MOV       A,R0
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   ACF0         MOV       R4,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   75F002       MOV       B,#0x2
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2C           ADD       A,R4
   \   00003F   F9           MOV       R1,A
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E582         MOV       A,DPL
   \   000048   28           ADD       A,R0
   \   000049   F582         MOV       DPL,A
   \   00004B   E583         MOV       A,DPH
   \   00004D   39           ADDC      A,R1
   \   00004E   F583         MOV       DPH,A
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   F0           MOVX      @DPTR,A
   \   000055   05..         INC       ?V0
   \   000057   E5..         MOV       A,?V0
   \   000059   70B9         JNZ       ??test2_17
   \   00005B   05..         INC       ?V1
   \   00005D   80B5         SJMP      ??test2_17
     78          
     79          // Нету NULL  
     80            for(int i = 0; i < 20; i++)
   \                     ??test2_18:
   \   00005F   7800         MOV       R0,#0x0
   \   000061   7900         MOV       R1,#0x0
   \                     ??test2_19:
   \   000063   C3           CLR       C
   \   000064   E8           MOV       A,R0
   \   000065   9414         SUBB      A,#0x14
   \   000067   E9           MOV       A,R1
   \   000068   9400         SUBB      A,#0x0
   \   00006A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006C   65D0         XRL       A,PSW
   \   00006E   33           RLC       A
   \   00006F   503D         JNC       ??test2_20
     81              if (all[i] == NULL)
   \   000071   E8           MOV       A,R0
   \   000072   FA           MOV       R2,A
   \   000073   E9           MOV       A,R1
   \   000074   FB           MOV       R3,A
   \   000075   EA           MOV       A,R2
   \   000076   75F002       MOV       B,#0x2
   \   000079   A4           MUL       AB
   \   00007A   CA           XCH       A,R2
   \   00007B   ACF0         MOV       R4,B
   \   00007D   75F000       MOV       B,#0x0
   \   000080   A4           MUL       AB
   \   000081   2C           ADD       A,R4
   \   000082   FC           MOV       R4,A
   \   000083   75F002       MOV       B,#0x2
   \   000086   EB           MOV       A,R3
   \   000087   A4           MUL       AB
   \   000088   2C           ADD       A,R4
   \   000089   FB           MOV       R3,A
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E582         MOV       A,DPL
   \   000092   2A           ADD       A,R2
   \   000093   F582         MOV       DPL,A
   \   000095   E583         MOV       A,DPH
   \   000097   3B           ADDC      A,R3
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FA           MOV       R2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   FB           MOV       R3,A
   \   00009F   EA           MOV       A,R2
   \   0000A0   4B           ORL       A,R3
   \   0000A1   7004         JNZ       ??test2_21
     82                test_res = 1;
   \   0000A3   7E01         MOV       R6,#0x1
   \   0000A5   7F00         MOV       R7,#0x0
   \                     ??test2_21:
   \   0000A7   08           INC       R0
   \   0000A8   E8           MOV       A,R0
   \   0000A9   70B8         JNZ       ??test2_19
   \   0000AB   09           INC       R1
   \   0000AC   80B5         SJMP      ??test2_19
     83          
     84          // Все слоты должны быть разные 
     85            for(int i = 1; i < 20; i++)
   \                     ??test2_20:
   \   0000AE   7801         MOV       R0,#0x1
   \   0000B0   7900         MOV       R1,#0x0
   \                     ??test2_22:
   \   0000B2   C3           CLR       C
   \   0000B3   E8           MOV       A,R0
   \   0000B4   9414         SUBB      A,#0x14
   \   0000B6   E9           MOV       A,R1
   \   0000B7   9400         SUBB      A,#0x0
   \   0000B9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000BB   65D0         XRL       A,PSW
   \   0000BD   33           RLC       A
   \   0000BE   5078         JNC       ??test2_23
     86              if (all[i] == all[i - 1])
   \   0000C0   E8           MOV       A,R0
   \   0000C1   FA           MOV       R2,A
   \   0000C2   E9           MOV       A,R1
   \   0000C3   FB           MOV       R3,A
   \   0000C4   EA           MOV       A,R2
   \   0000C5   75F002       MOV       B,#0x2
   \   0000C8   A4           MUL       AB
   \   0000C9   CA           XCH       A,R2
   \   0000CA   ACF0         MOV       R4,B
   \   0000CC   75F000       MOV       B,#0x0
   \   0000CF   A4           MUL       AB
   \   0000D0   2C           ADD       A,R4
   \   0000D1   FC           MOV       R4,A
   \   0000D2   75F002       MOV       B,#0x2
   \   0000D5   EB           MOV       A,R3
   \   0000D6   A4           MUL       AB
   \   0000D7   2C           ADD       A,R4
   \   0000D8   FB           MOV       R3,A
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   E582         MOV       A,DPL
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E583         MOV       A,DPH
   \   0000E6   3B           ADDC      A,R3
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   FC           MOV       R4,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FD           MOV       R5,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E9           MOV       A,R1
   \   0000F1   FB           MOV       R3,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   75F002       MOV       B,#0x2
   \   0000F6   A4           MUL       AB
   \   0000F7   CA           XCH       A,R2
   \   0000F8   85F0..       MOV       ?V0,B
   \   0000FB   75F000       MOV       B,#0x0
   \   0000FE   A4           MUL       AB
   \   0000FF   25..         ADD       A,?V0
   \   000101   F5..         MOV       ?V0,A
   \   000103   75F002       MOV       B,#0x2
   \   000106   EB           MOV       A,R3
   \   000107   A4           MUL       AB
   \   000108   25..         ADD       A,?V0
   \   00010A   FB           MOV       R3,A
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   E582         MOV       A,DPL
   \   000113   2A           ADD       A,R2
   \   000114   FA           MOV       R2,A
   \   000115   E583         MOV       A,DPH
   \   000117   3B           ADDC      A,R3
   \   000118   FB           MOV       R3,A
   \   000119   EA           MOV       A,R2
   \   00011A   24FE         ADD       A,#-0x2
   \   00011C   F582         MOV       DPL,A
   \   00011E   EB           MOV       A,R3
   \   00011F   34FF         ADDC      A,#-0x1
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6C           XRL       A,R4
   \   000125   7003         JNZ       ??test2_24
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6D           XRL       A,R5
   \                     ??test2_24:
   \   00012A   7004         JNZ       ??test2_25
     87                test_res = 2;   
   \   00012C   7E02         MOV       R6,#0x2
   \   00012E   7F00         MOV       R7,#0x0
   \                     ??test2_25:
   \   000130   08           INC       R0
   \   000131   E8           MOV       A,R0
   \   000132   7001         JNZ       ??test2_26
   \   000134   09           INC       R1
   \                     ??test2_26:
   \   000135   02....       LJMP      ??test2_22 & 0xFFFF
     88            
     89            if (FR_busy() != 20)
   \                     ??test2_23:
   \   000138                ; Setup parameters for call to function FR_busy
   \   000138   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00013B   8A..         MOV       ?V0,R2
   \   00013D   8B..         MOV       ?V1,R3
   \   00013F   7414         MOV       A,#0x14
   \   000141   65..         XRL       A,?V0
   \   000143   7004         JNZ       ??test2_27
   \   000145   7400         MOV       A,#0x0
   \   000147   65..         XRL       A,?V1
   \                     ??test2_27:
   \   000149   6004         JZ        ??test2_28
     90              test_res = 3;
   \   00014B   7E03         MOV       R6,#0x3
   \   00014D   7F00         MOV       R7,#0x0
     91            
     92            if (FR_available() != 0)
   \                     ??test2_28:
   \   00014F                ; Setup parameters for call to function FR_available
   \   00014F   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000152   8A..         MOV       ?V0,R2
   \   000154   8B..         MOV       ?V1,R3
   \   000156   E5..         MOV       A,?V0
   \   000158   45..         ORL       A,?V1
   \   00015A   6004         JZ        ??test2_29
     93              test_res = 4;
   \   00015C   7E04         MOV       R6,#0x4
   \   00015E   7F00         MOV       R7,#0x0
     94           
     95            // Выделяемм еще один. он должен быть NULL
     96            struct frame* fr = FR_create();
   \                     ??test2_29:
   \   000160                ; Setup parameters for call to function FR_create
   \   000160   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000163   8A..         MOV       ?V0,R2
   \   000165   8B..         MOV       ?V1,R3
   \   000167   85....       MOV       ?V2,?V0
   \   00016A   85....       MOV       ?V3,?V1
     97            if (fr)
   \   00016D   E5..         MOV       A,?V2
   \   00016F   45..         ORL       A,?V3
   \   000171   6004         JZ        ??test2_30
     98              test_res = 5;
   \   000173   7E05         MOV       R6,#0x5
   \   000175   7F00         MOV       R7,#0x0
     99            
    100             if (FR_busy() != 20)
   \                     ??test2_30:
   \   000177                ; Setup parameters for call to function FR_busy
   \   000177   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00017A   8A..         MOV       ?V0,R2
   \   00017C   8B..         MOV       ?V1,R3
   \   00017E   7414         MOV       A,#0x14
   \   000180   65..         XRL       A,?V0
   \   000182   7004         JNZ       ??test2_31
   \   000184   7400         MOV       A,#0x0
   \   000186   65..         XRL       A,?V1
   \                     ??test2_31:
   \   000188   6004         JZ        ??test2_32
    101              test_res = 6;
   \   00018A   7E06         MOV       R6,#0x6
   \   00018C   7F00         MOV       R7,#0x0
    102            
    103            if (FR_available() != 0)
   \                     ??test2_32:
   \   00018E                ; Setup parameters for call to function FR_available
   \   00018E   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000191   8A..         MOV       ?V0,R2
   \   000193   8B..         MOV       ?V1,R3
   \   000195   E5..         MOV       A,?V0
   \   000197   45..         ORL       A,?V1
   \   000199   6004         JZ        ??test2_33
    104              test_res = 7; 
   \   00019B   7E07         MOV       R6,#0x7
   \   00019D   7F00         MOV       R7,#0x0
    105            
    106          // Удаляем все что создали и контролим результат
    107            for (int i = 0; i < 20; i++)
   \                     ??test2_33:
   \   00019F   75..00       MOV       ?V0,#0x0
   \   0001A2   75..00       MOV       ?V1,#0x0
   \                     ??test2_34:
   \   0001A5   C3           CLR       C
   \   0001A6   E5..         MOV       A,?V0
   \   0001A8   9414         SUBB      A,#0x14
   \   0001AA   E5..         MOV       A,?V1
   \   0001AC   9400         SUBB      A,#0x0
   \   0001AE   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B0   65D0         XRL       A,PSW
   \   0001B2   33           RLC       A
   \   0001B3   5041         JNC       ??test2_35
    108              if (!FR_delete(all[i]))
   \   0001B5                ; Setup parameters for call to function FR_delete
   \   0001B5   A8..         MOV       R0,?V0
   \   0001B7   A9..         MOV       R1,?V1
   \   0001B9   E8           MOV       A,R0
   \   0001BA   75F002       MOV       B,#0x2
   \   0001BD   A4           MUL       AB
   \   0001BE   C8           XCH       A,R0
   \   0001BF   AAF0         MOV       R2,B
   \   0001C1   75F000       MOV       B,#0x0
   \   0001C4   A4           MUL       AB
   \   0001C5   2A           ADD       A,R2
   \   0001C6   FA           MOV       R2,A
   \   0001C7   75F002       MOV       B,#0x2
   \   0001CA   E9           MOV       A,R1
   \   0001CB   A4           MUL       AB
   \   0001CC   2A           ADD       A,R2
   \   0001CD   F9           MOV       R1,A
   \   0001CE   85..82       MOV       DPL,?XSP + 0
   \   0001D1   85..83       MOV       DPH,?XSP + 1
   \   0001D4   E582         MOV       A,DPL
   \   0001D6   28           ADD       A,R0
   \   0001D7   F582         MOV       DPL,A
   \   0001D9   E583         MOV       A,DPH
   \   0001DB   39           ADDC      A,R1
   \   0001DC   F583         MOV       DPH,A
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   FA           MOV       R2,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   FB           MOV       R3,A
   \   0001E3   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   0001E6   4004         JC        ??test2_36
    109                test_res = 8;   
   \   0001E8   7E08         MOV       R6,#0x8
   \   0001EA   7F00         MOV       R7,#0x0
   \                     ??test2_36:
   \   0001EC   05..         INC       ?V0
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   70B3         JNZ       ??test2_34
   \   0001F2   05..         INC       ?V1
   \   0001F4   80AF         SJMP      ??test2_34
    110          
    111             if (FR_busy() != 0)
   \                     ??test2_35:
   \   0001F6                ; Setup parameters for call to function FR_busy
   \   0001F6   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   0001F9   8A..         MOV       ?V0,R2
   \   0001FB   8B..         MOV       ?V1,R3
   \   0001FD   E5..         MOV       A,?V0
   \   0001FF   45..         ORL       A,?V1
   \   000201   6004         JZ        ??test2_37
    112              test_res = 9;
   \   000203   7E09         MOV       R6,#0x9
   \   000205   7F00         MOV       R7,#0x0
    113            
    114            if (FR_available() != 20)
   \                     ??test2_37:
   \   000207                ; Setup parameters for call to function FR_available
   \   000207   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   00020A   8A..         MOV       ?V0,R2
   \   00020C   8B..         MOV       ?V1,R3
   \   00020E   7414         MOV       A,#0x14
   \   000210   65..         XRL       A,?V0
   \   000212   7004         JNZ       ??test2_38
   \   000214   7400         MOV       A,#0x0
   \   000216   65..         XRL       A,?V1
   \                     ??test2_38:
   \   000218   6004         JZ        ??test2_39
    115              test_res = 10;  
   \   00021A   7E0A         MOV       R6,#0xa
   \   00021C   7F00         MOV       R7,#0x0
    116            
    117          // Еще разок пробуем все удалить 
    118            for (int i = 0; i < 20; i++)
   \                     ??test2_39:
   \   00021E   75..00       MOV       ?V0,#0x0
   \   000221   75..00       MOV       ?V1,#0x0
   \                     ??test2_40:
   \   000224   C3           CLR       C
   \   000225   E5..         MOV       A,?V0
   \   000227   9414         SUBB      A,#0x14
   \   000229   E5..         MOV       A,?V1
   \   00022B   9400         SUBB      A,#0x0
   \   00022D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00022F   65D0         XRL       A,PSW
   \   000231   33           RLC       A
   \   000232   5041         JNC       ??test2_41
    119              if (FR_delete(all[i]))
   \   000234                ; Setup parameters for call to function FR_delete
   \   000234   A8..         MOV       R0,?V0
   \   000236   A9..         MOV       R1,?V1
   \   000238   E8           MOV       A,R0
   \   000239   75F002       MOV       B,#0x2
   \   00023C   A4           MUL       AB
   \   00023D   C8           XCH       A,R0
   \   00023E   AAF0         MOV       R2,B
   \   000240   75F000       MOV       B,#0x0
   \   000243   A4           MUL       AB
   \   000244   2A           ADD       A,R2
   \   000245   FA           MOV       R2,A
   \   000246   75F002       MOV       B,#0x2
   \   000249   E9           MOV       A,R1
   \   00024A   A4           MUL       AB
   \   00024B   2A           ADD       A,R2
   \   00024C   F9           MOV       R1,A
   \   00024D   85..82       MOV       DPL,?XSP + 0
   \   000250   85..83       MOV       DPH,?XSP + 1
   \   000253   E582         MOV       A,DPL
   \   000255   28           ADD       A,R0
   \   000256   F582         MOV       DPL,A
   \   000258   E583         MOV       A,DPH
   \   00025A   39           ADDC      A,R1
   \   00025B   F583         MOV       DPH,A
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   FA           MOV       R2,A
   \   00025F   A3           INC       DPTR
   \   000260   E0           MOVX      A,@DPTR
   \   000261   FB           MOV       R3,A
   \   000262   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   000265   5004         JNC       ??test2_42
    120                test_res = 11; 
   \   000267   7E0B         MOV       R6,#0xb
   \   000269   7F00         MOV       R7,#0x0
   \                     ??test2_42:
   \   00026B   05..         INC       ?V0
   \   00026D   E5..         MOV       A,?V0
   \   00026F   70B3         JNZ       ??test2_40
   \   000271   05..         INC       ?V1
   \   000273   80AF         SJMP      ??test2_40
    121            
    122             if (FR_busy() != 0)
   \                     ??test2_41:
   \   000275                ; Setup parameters for call to function FR_busy
   \   000275   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   000278   8A..         MOV       ?V0,R2
   \   00027A   8B..         MOV       ?V1,R3
   \   00027C   E5..         MOV       A,?V0
   \   00027E   45..         ORL       A,?V1
   \   000280   6004         JZ        ??test2_43
    123              test_res = 12;
   \   000282   7E0C         MOV       R6,#0xc
   \   000284   7F00         MOV       R7,#0x0
    124            
    125            if (FR_available() != 20)
   \                     ??test2_43:
   \   000286                ; Setup parameters for call to function FR_available
   \   000286   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000289   8A..         MOV       ?V0,R2
   \   00028B   8B..         MOV       ?V1,R3
   \   00028D   7414         MOV       A,#0x14
   \   00028F   65..         XRL       A,?V0
   \   000291   7004         JNZ       ??test2_44
   \   000293   7400         MOV       A,#0x0
   \   000295   65..         XRL       A,?V1
   \                     ??test2_44:
   \   000297   6004         JZ        ??test2_45
    126              test_res = 13;
   \   000299   7E0D         MOV       R6,#0xd
   \   00029B   7F00         MOV       R7,#0x0
    127            
    128            return test_res;
   \                     ??test2_45:
   \   00029D   EE           MOV       A,R6
   \   00029E   FA           MOV       R2,A
   \   00029F   EF           MOV       A,R7
   \   0002A0   FB           MOV       R3,A
   \   0002A1   7428         MOV       A,#0x28
   \   0002A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A6   7F04         MOV       R7,#0x4
   \   0002A8   02....       LJMP      ?BANKED_LEAVE_XDATA
    129          }
    130          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          static int test1(void){
   \                     ??test1_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    132            int test_res = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    133            
    134            if (FR_busy() != 0)
   \   000009                ; Setup parameters for call to function FR_busy
   \   000009   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   6004         JZ        ??test1_17
    135              test_res = 1;
   \   000016   7E01         MOV       R6,#0x1
   \   000018   7F00         MOV       R7,#0x0
    136            
    137            if (FR_available() != 20)
   \                     ??test1_17:
   \   00001A                ; Setup parameters for call to function FR_available
   \   00001A   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   7414         MOV       A,#0x14
   \   000023   65..         XRL       A,?V0
   \   000025   7004         JNZ       ??test1_18
   \   000027   7400         MOV       A,#0x0
   \   000029   65..         XRL       A,?V1
   \                     ??test1_18:
   \   00002B   6004         JZ        ??test1_19
    138              test_res = 2;
   \   00002D   7E02         MOV       R6,#0x2
   \   00002F   7F00         MOV       R7,#0x0
    139            
    140            struct frame *fr = FR_create();
   \                     ??test1_19:
   \   000031                ; Setup parameters for call to function FR_create
   \   000031   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000034   8A..         MOV       ?V2,R2
   \   000036   8B..         MOV       ?V3,R3
   \   000038   85....       MOV       ?V0,?V2
   \   00003B   85....       MOV       ?V1,?V3
    141            
    142            if (!fr)
   \   00003E   E5..         MOV       A,?V0
   \   000040   45..         ORL       A,?V1
   \   000042   7004         JNZ       ??test1_20
    143              test_res = 3;
   \   000044   7E03         MOV       R6,#0x3
   \   000046   7F00         MOV       R7,#0x0
    144            
    145            if (FR_busy() != 1)
   \                     ??test1_20:
   \   000048                ; Setup parameters for call to function FR_busy
   \   000048   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00004B   8A..         MOV       ?V2,R2
   \   00004D   8B..         MOV       ?V3,R3
   \   00004F   7401         MOV       A,#0x1
   \   000051   65..         XRL       A,?V2
   \   000053   7004         JNZ       ??test1_21
   \   000055   7400         MOV       A,#0x0
   \   000057   65..         XRL       A,?V3
   \                     ??test1_21:
   \   000059   6004         JZ        ??test1_22
    146              test_res = 4;
   \   00005B   7E04         MOV       R6,#0x4
   \   00005D   7F00         MOV       R7,#0x0
    147            
    148            if (FR_available() != 19)
   \                     ??test1_22:
   \   00005F                ; Setup parameters for call to function FR_available
   \   00005F   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000062   8A..         MOV       ?V2,R2
   \   000064   8B..         MOV       ?V3,R3
   \   000066   7413         MOV       A,#0x13
   \   000068   65..         XRL       A,?V2
   \   00006A   7004         JNZ       ??test1_23
   \   00006C   7400         MOV       A,#0x0
   \   00006E   65..         XRL       A,?V3
   \                     ??test1_23:
   \   000070   6004         JZ        ??test1_24
    149              test_res = 5;  
   \   000072   7E05         MOV       R6,#0x5
   \   000074   7F00         MOV       R7,#0x0
    150            
    151            if (!FR_delete(fr))
   \                     ??test1_24:
   \   000076                ; Setup parameters for call to function FR_delete
   \   000076   AA..         MOV       R2,?V0
   \   000078   AB..         MOV       R3,?V1
   \   00007A   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   00007D   4004         JC        ??test1_25
    152              test_res = 6;
   \   00007F   7E06         MOV       R6,#0x6
   \   000081   7F00         MOV       R7,#0x0
    153            
    154            if (FR_busy() != 0)
   \                     ??test1_25:
   \   000083                ; Setup parameters for call to function FR_busy
   \   000083   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   000086   8A..         MOV       ?V2,R2
   \   000088   8B..         MOV       ?V3,R3
   \   00008A   E5..         MOV       A,?V2
   \   00008C   45..         ORL       A,?V3
   \   00008E   6004         JZ        ??test1_26
    155              test_res = 7;
   \   000090   7E07         MOV       R6,#0x7
   \   000092   7F00         MOV       R7,#0x0
    156            
    157            if (FR_available() != 20)
   \                     ??test1_26:
   \   000094                ; Setup parameters for call to function FR_available
   \   000094   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000097   8A..         MOV       ?V2,R2
   \   000099   8B..         MOV       ?V3,R3
   \   00009B   7414         MOV       A,#0x14
   \   00009D   65..         XRL       A,?V2
   \   00009F   7004         JNZ       ??test1_27
   \   0000A1   7400         MOV       A,#0x0
   \   0000A3   65..         XRL       A,?V3
   \                     ??test1_27:
   \   0000A5   6004         JZ        ??test1_28
    158              test_res = 8;   
   \   0000A7   7E08         MOV       R6,#0x8
   \   0000A9   7F00         MOV       R7,#0x0
    159            
    160            return test_res;
   \                     ??test1_28:
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FA           MOV       R2,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FB           MOV       R3,A
   \   0000AF   7F04         MOV       R7,#0x4
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
    161          }
E:\Neocore\Hardware\PRJ Test\u_macros.c
      1          #include "utest.h"
      2          static int test1(void);
      3          static int test2(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      4          struct test_unit UT_MACR_1 = {.name = "MACROS: EXCEPTIOS", .fun = test1};
   \                     UT_MACR_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MACR_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      5          struct test_unit UT_MACR_2 = {.name = "MACROS: EXCEPTIOS", .fun = test2};
   \                     UT_MACR_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MACR_2>`
   \   000022                REQUIRE __INIT_XDATA_I
      6          
      7          
      8          #include "stdint.h"
      9          #include "macros.h"
     10          #include "stdbool.h"
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static int test2(void){
   \                     ??test2_2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     13            bool catched = false;
   \   00000A   C2..         CLR       ?VB.0
     14            bool finalyed = false;
   \   00000C   C2..         CLR       ?VB.1
     15            bool noexe = true;
   \   00000E   D2..         SETB      ?VB.2
     16            
     17            TRY{
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7408         MOV       A,#0x8
   \   000018                REQUIRE ?V7
   \   000018   12....       LCALL     ?SETJMP_XDATA
   \   00001B   8A..         MOV       ?V0,R2
   \   00001D   8B..         MOV       ?V1,R3
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for test2>_0`:
   \   000024   0000         DW        0
   \   000026   01           DB        1
   \   000027   ....         DW        ??test2_46
   \   000029   ....         DW        ??test2_47
   \   00002B   ....         DW        ??test2_48
     18              THROW(2);
   \                     ??test2_47:
   \   00002D   7A02         MOV       R2,#0x2
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   7408         MOV       A,#0x8
   \   000039                REQUIRE ?V7
   \   000039   02....       LJMP      ?LONGJMP_XDATA
     19              noexe = false;
                     ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_macros.c"
     20            }
     21            CATCH(1){
     22              catched = true;
   \                     ??test2_48:
   \   00003C   D2..         SETB      ?VB.0
     23            }
     24            FINALLY{
     25              finalyed = true;
   \                     ??test2_46:
   \   00003E   D2..         SETB      ?VB.1
     26            }
     27            ETRY;  
     28            
     29            if (!noexe)
   \   000040   A2..         MOV       C,?VB.2
   \   000042   4006         JC        ??test2_49
     30              return 1;
   \   000044   7A01         MOV       R2,#0x1
   \   000046   7B00         MOV       R3,#0x0
   \   000048   8018         SJMP      ??test2_50
     31          
     32            if (catched)
   \                     ??test2_49:
   \   00004A   A2..         MOV       C,?VB.0
   \   00004C   5006         JNC       ??test2_51
     33              return 2;  
   \   00004E   7A02         MOV       R2,#0x2
   \   000050   7B00         MOV       R3,#0x0
   \   000052   800E         SJMP      ??test2_50
     34          
     35            if (!finalyed)
   \                     ??test2_51:
   \   000054   A2..         MOV       C,?VB.1
   \   000056   4006         JC        ??test2_52
     36              return 3;
   \   000058   7A03         MOV       R2,#0x3
   \   00005A   7B00         MOV       R3,#0x0
   \   00005C   8004         SJMP      ??test2_50
     37              
     38            return 0;
   \                     ??test2_52:
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   7B00         MOV       R3,#0x0
   \                     ??test2_50:
   \   000062   7431         MOV       A,#0x31
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   7F02         MOV       R7,#0x2
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
     39          }
     40          
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          static int test1(void){
   \                     ??test1_2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     43            bool catched = false;
   \   00000A   C2..         CLR       ?VB.0
     44            bool finalyed = false;
   \   00000C   C2..         CLR       ?VB.1
     45            bool noexe = true;
   \   00000E   D2..         SETB      ?VB.2
     46            
     47            TRY{
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7408         MOV       A,#0x8
   \   000018                REQUIRE ?V7
   \   000018   12....       LCALL     ?SETJMP_XDATA
   \   00001B   8A..         MOV       ?V0,R2
   \   00001D   8B..         MOV       ?V1,R3
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for test1>_0`:
   \   000024   0000         DW        0
   \   000026   01           DB        1
   \   000027   ....         DW        ??test1_29
   \   000029   ....         DW        ??test1_30
   \   00002B   ....         DW        ??test1_31
     48              THROW(1);
   \                     ??test1_30:
   \   00002D   7A01         MOV       R2,#0x1
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   7408         MOV       A,#0x8
   \   000039                REQUIRE ?V7
   \   000039   02....       LJMP      ?LONGJMP_XDATA
     49              noexe = false;
                     ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_macros.c"

  static void SW_Init(void){
              ^
"E:\Neocore\Hardware\STACK_CORE_SRC\alarm_timer.c",34  Warning[Pe177]: function
          "SW_Init" was declared but never referenced
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\STACK_CORE_SRC\alarm_timer.c"

  static void u_test(void){
              ^
"E:\Neocore\Hardware\PRJ Test\u_debug.c",5  Warning[Pe177]: function "u_test"
          was declared but never referenced
          detected during compilation of secondary translation unit
                    "E:\Neocore\Hardware\PRJ Test\u_debug.c"
     50            }
     51            CATCH(1){
     52              catched = true;
   \                     ??test1_31:
   \   00003C   D2..         SETB      ?VB.0
     53            }
     54            FINALLY{
     55              finalyed = true;
   \                     ??test1_29:
   \   00003E   D2..         SETB      ?VB.1
     56            }
     57            ETRY;  
     58            
     59            if (!noexe)
   \   000040   A2..         MOV       C,?VB.2
   \   000042   4006         JC        ??test1_32
     60              return 1;
   \   000044   7A01         MOV       R2,#0x1
   \   000046   7B00         MOV       R3,#0x0
   \   000048   8018         SJMP      ??test1_33
     61          
     62            if (!catched)
   \                     ??test1_32:
   \   00004A   A2..         MOV       C,?VB.0
   \   00004C   4006         JC        ??test1_34
     63              return 2;  
   \   00004E   7A02         MOV       R2,#0x2
   \   000050   7B00         MOV       R3,#0x0
   \   000052   800E         SJMP      ??test1_33
     64          
     65            if (!finalyed)
   \                     ??test1_34:
   \   000054   A2..         MOV       C,?VB.1
   \   000056   4006         JC        ??test1_35
     66              return 3;
   \   000058   7A03         MOV       R2,#0x3
   \   00005A   7B00         MOV       R3,#0x0
   \   00005C   8004         SJMP      ??test1_33
     67              
     68            return 0;
   \                     ??test1_35:
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   7B00         MOV       R3,#0x0
   \                     ??test1_33:
   \   000062   7431         MOV       A,#0x31
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   7F02         MOV       R7,#0x2
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
     69          }
     70          
     71          
E:\Neocore\Hardware\PRJ Test\u_mem_slots.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          
      4          static int test1(void);
      5          static int test2(void);
      6          static int test3(void);
      7          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          struct test_unit UT_MS_1 = {.name = "MS:create-delete", .fun = test1};
   \                     UT_MS_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          struct test_unit UT_MS_2 = {.name = "MS:create-full", .fun = test2};
   \                     UT_MS_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_2>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          struct test_unit UT_MS_3 = {.name = "MS:zone-check", .fun = test3};
   \                     UT_MS_3:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_3>`
   \   000022                REQUIRE __INIT_XDATA_I
     11          
     12          #include "mem_slots.h"
     13          
     14          //int SL_zone_check();
     15          //int SL_available();
     16          //int SL_busy();
     17          //bool SL_free(char *buff);
     18          //char* SL_alloc(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          static int test3(void){
   \                     ??test3_2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     20            int test_res = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
     21            
     22            if (!SL_zone_check())
   \   000009                ; Setup parameters for call to function SL_zone_check
   \   000009   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   7004         JNZ       ??test3_47
     23              test_res = 1;
   \   000016   7E01         MOV       R6,#0x1
   \   000018   7F00         MOV       R7,#0x0
     24            
     25            // Нарушаем границу во втором слоте
     26            char *sl1 = SL_alloc();
   \                     ??test3_47:
   \   00001A                ; Setup parameters for call to function SL_alloc
   \   00001A   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   85....       MOV       ?V6,?V0
   \   000024   85....       MOV       ?V7,?V1
     27            char *sl2 = SL_alloc();
   \   000027                ; Setup parameters for call to function SL_alloc
   \   000027   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00002A   8A..         MOV       ?V0,R2
   \   00002C   8B..         MOV       ?V1,R3
   \   00002E   85....       MOV       ?V2,?V0
   \   000031   85....       MOV       ?V3,?V1
     28            char *sl3 = SL_alloc();
   \   000034                ; Setup parameters for call to function SL_alloc
   \   000034   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000037   8A..         MOV       ?V4,R2
   \   000039   8B..         MOV       ?V5,R3
   \   00003B   85....       MOV       ?V0,?V4
   \   00003E   85....       MOV       ?V1,?V5
     29            for (int i = 0; i < 180; i++)
   \   000041   7800         MOV       R0,#0x0
   \   000043   7900         MOV       R1,#0x0
   \                     ??test3_48:
   \   000045   C3           CLR       C
   \   000046   E8           MOV       A,R0
   \   000047   94B4         SUBB      A,#-0x4c
   \   000049   E9           MOV       A,R1
   \   00004A   9400         SUBB      A,#0x0
   \   00004C   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00004E   65D0         XRL       A,PSW
   \   000050   33           RLC       A
   \   000051   5014         JNC       ??test3_49
     30              sl3[i] = 0x55;
   \   000053   E5..         MOV       A,?V0
   \   000055   28           ADD       A,R0
   \   000056   F582         MOV       DPL,A
   \   000058   E5..         MOV       A,?V1
   \   00005A   39           ADDC      A,R1
   \   00005B   F583         MOV       DPH,A
   \   00005D   7455         MOV       A,#0x55
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   08           INC       R0
   \   000061   E8           MOV       A,R0
   \   000062   70E1         JNZ       ??test3_48
   \   000064   09           INC       R1
   \   000065   80DE         SJMP      ??test3_48
     31            
     32            if (SL_zone_check()!=2)
   \                     ??test3_49:
   \   000067                ; Setup parameters for call to function SL_zone_check
   \   000067   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   00006A   8A..         MOV       ?V4,R2
   \   00006C   8B..         MOV       ?V5,R3
   \   00006E   7402         MOV       A,#0x2
   \   000070   65..         XRL       A,?V4
   \   000072   7004         JNZ       ??test3_50
   \   000074   7400         MOV       A,#0x0
   \   000076   65..         XRL       A,?V5
   \                     ??test3_50:
   \   000078   6004         JZ        ??test3_51
     33              test_res = 2;  
   \   00007A   7E02         MOV       R6,#0x2
   \   00007C   7F00         MOV       R7,#0x0
     34            
     35            return test_res;
   \                     ??test3_51:
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   7F08         MOV       R7,#0x8
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
     36          }
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static int test2(void){
   \                     ??test2_3:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     39          // Используем полностью все фреймы
     40            char *all[20];
     41            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     42            
     43            for (int i = 0; i < 20; i++)
   \   00000E   75..00       MOV       ?V0,#0x0
   \   000011   75..00       MOV       ?V1,#0x0
   \                     ??test2_53:
   \   000014   C3           CLR       C
   \   000015   E5..         MOV       A,?V0
   \   000017   9414         SUBB      A,#0x14
   \   000019   E5..         MOV       A,?V1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   503B         JNC       ??test2_54
     44              all[i] = SL_alloc();
   \   000024                ; Setup parameters for call to function SL_alloc
   \   000024   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000027   A8..         MOV       R0,?V0
   \   000029   A9..         MOV       R1,?V1
   \   00002B   E8           MOV       A,R0
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   ACF0         MOV       R4,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   75F002       MOV       B,#0x2
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2C           ADD       A,R4
   \   00003F   F9           MOV       R1,A
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E582         MOV       A,DPL
   \   000048   28           ADD       A,R0
   \   000049   F582         MOV       DPL,A
   \   00004B   E583         MOV       A,DPH
   \   00004D   39           ADDC      A,R1
   \   00004E   F583         MOV       DPH,A
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   F0           MOVX      @DPTR,A
   \   000055   05..         INC       ?V0
   \   000057   E5..         MOV       A,?V0
   \   000059   70B9         JNZ       ??test2_53
   \   00005B   05..         INC       ?V1
   \   00005D   80B5         SJMP      ??test2_53
     45          
     46          // Нету NULL  
     47            for(int i = 0; i < 20; i++)
   \                     ??test2_54:
   \   00005F   7800         MOV       R0,#0x0
   \   000061   7900         MOV       R1,#0x0
   \                     ??test2_55:
   \   000063   C3           CLR       C
   \   000064   E8           MOV       A,R0
   \   000065   9414         SUBB      A,#0x14
   \   000067   E9           MOV       A,R1
   \   000068   9400         SUBB      A,#0x0
   \   00006A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006C   65D0         XRL       A,PSW
   \   00006E   33           RLC       A
   \   00006F   503D         JNC       ??test2_56
     48              if (all[i] == NULL)
   \   000071   E8           MOV       A,R0
   \   000072   FA           MOV       R2,A
   \   000073   E9           MOV       A,R1
   \   000074   FB           MOV       R3,A
   \   000075   EA           MOV       A,R2
   \   000076   75F002       MOV       B,#0x2
   \   000079   A4           MUL       AB
   \   00007A   CA           XCH       A,R2
   \   00007B   ACF0         MOV       R4,B
   \   00007D   75F000       MOV       B,#0x0
   \   000080   A4           MUL       AB
   \   000081   2C           ADD       A,R4
   \   000082   FC           MOV       R4,A
   \   000083   75F002       MOV       B,#0x2
   \   000086   EB           MOV       A,R3
   \   000087   A4           MUL       AB
   \   000088   2C           ADD       A,R4
   \   000089   FB           MOV       R3,A
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E582         MOV       A,DPL
   \   000092   2A           ADD       A,R2
   \   000093   F582         MOV       DPL,A
   \   000095   E583         MOV       A,DPH
   \   000097   3B           ADDC      A,R3
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FA           MOV       R2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   FB           MOV       R3,A
   \   00009F   EA           MOV       A,R2
   \   0000A0   4B           ORL       A,R3
   \   0000A1   7004         JNZ       ??test2_57
     49                test_res = 1;
   \   0000A3   7E01         MOV       R6,#0x1
   \   0000A5   7F00         MOV       R7,#0x0
   \                     ??test2_57:
   \   0000A7   08           INC       R0
   \   0000A8   E8           MOV       A,R0
   \   0000A9   70B8         JNZ       ??test2_55
   \   0000AB   09           INC       R1
   \   0000AC   80B5         SJMP      ??test2_55
     50          
     51          // Все слоты должны быть разные 
     52            for(int i = 1; i < 20; i++)
   \                     ??test2_56:
   \   0000AE   7801         MOV       R0,#0x1
   \   0000B0   7900         MOV       R1,#0x0
   \                     ??test2_58:
   \   0000B2   C3           CLR       C
   \   0000B3   E8           MOV       A,R0
   \   0000B4   9414         SUBB      A,#0x14
   \   0000B6   E9           MOV       A,R1
   \   0000B7   9400         SUBB      A,#0x0
   \   0000B9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000BB   65D0         XRL       A,PSW
   \   0000BD   33           RLC       A
   \   0000BE   5078         JNC       ??test2_59
     53              if (all[i] == all[i - 1])
   \   0000C0   E8           MOV       A,R0
   \   0000C1   FA           MOV       R2,A
   \   0000C2   E9           MOV       A,R1
   \   0000C3   FB           MOV       R3,A
   \   0000C4   EA           MOV       A,R2
   \   0000C5   75F002       MOV       B,#0x2
   \   0000C8   A4           MUL       AB
   \   0000C9   CA           XCH       A,R2
   \   0000CA   ACF0         MOV       R4,B
   \   0000CC   75F000       MOV       B,#0x0
   \   0000CF   A4           MUL       AB
   \   0000D0   2C           ADD       A,R4
   \   0000D1   FC           MOV       R4,A
   \   0000D2   75F002       MOV       B,#0x2
   \   0000D5   EB           MOV       A,R3
   \   0000D6   A4           MUL       AB
   \   0000D7   2C           ADD       A,R4
   \   0000D8   FB           MOV       R3,A
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   E582         MOV       A,DPL
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E583         MOV       A,DPH
   \   0000E6   3B           ADDC      A,R3
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   FC           MOV       R4,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FD           MOV       R5,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E9           MOV       A,R1
   \   0000F1   FB           MOV       R3,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   75F002       MOV       B,#0x2
   \   0000F6   A4           MUL       AB
   \   0000F7   CA           XCH       A,R2
   \   0000F8   85F0..       MOV       ?V0,B
   \   0000FB   75F000       MOV       B,#0x0
   \   0000FE   A4           MUL       AB
   \   0000FF   25..         ADD       A,?V0
   \   000101   F5..         MOV       ?V0,A
   \   000103   75F002       MOV       B,#0x2
   \   000106   EB           MOV       A,R3
   \   000107   A4           MUL       AB
   \   000108   25..         ADD       A,?V0
   \   00010A   FB           MOV       R3,A
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   E582         MOV       A,DPL
   \   000113   2A           ADD       A,R2
   \   000114   FA           MOV       R2,A
   \   000115   E583         MOV       A,DPH
   \   000117   3B           ADDC      A,R3
   \   000118   FB           MOV       R3,A
   \   000119   EA           MOV       A,R2
   \   00011A   24FE         ADD       A,#-0x2
   \   00011C   F582         MOV       DPL,A
   \   00011E   EB           MOV       A,R3
   \   00011F   34FF         ADDC      A,#-0x1
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6C           XRL       A,R4
   \   000125   7003         JNZ       ??test2_60
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6D           XRL       A,R5
   \                     ??test2_60:
   \   00012A   7004         JNZ       ??test2_61
     54                test_res = 2;  
   \   00012C   7E02         MOV       R6,#0x2
   \   00012E   7F00         MOV       R7,#0x0
   \                     ??test2_61:
   \   000130   08           INC       R0
   \   000131   E8           MOV       A,R0
   \   000132   7001         JNZ       ??test2_62
   \   000134   09           INC       R1
   \                     ??test2_62:
   \   000135   02....       LJMP      ??test2_58 & 0xFFFF
     55          
     56          // Все слоты занятыы
     57            if (SL_busy() != 20)
   \                     ??test2_59:
   \   000138                ; Setup parameters for call to function SL_busy
   \   000138   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00013B   8A..         MOV       ?V0,R2
   \   00013D   8B..         MOV       ?V1,R3
   \   00013F   7414         MOV       A,#0x14
   \   000141   65..         XRL       A,?V0
   \   000143   7004         JNZ       ??test2_63
   \   000145   7400         MOV       A,#0x0
   \   000147   65..         XRL       A,?V1
   \                     ??test2_63:
   \   000149   6004         JZ        ??test2_64
     58              test_res = 3;  
   \   00014B   7E03         MOV       R6,#0x3
   \   00014D   7F00         MOV       R7,#0x0
     59          
     60          // Свободных слотов нет
     61            if (SL_available() != 0)
   \                     ??test2_64:
   \   00014F                ; Setup parameters for call to function SL_available
   \   00014F   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000152   8A..         MOV       ?V0,R2
   \   000154   8B..         MOV       ?V1,R3
   \   000156   E5..         MOV       A,?V0
   \   000158   45..         ORL       A,?V1
   \   00015A   6004         JZ        ??test2_65
     62              test_res = 4;   
   \   00015C   7E04         MOV       R6,#0x4
   \   00015E   7F00         MOV       R7,#0x0
     63            
     64          // Слотов нет и при выделении должен быть NULL  
     65            char *sl =  SL_alloc();
   \                     ??test2_65:
   \   000160                ; Setup parameters for call to function SL_alloc
   \   000160   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000163   8A..         MOV       ?V0,R2
   \   000165   8B..         MOV       ?V1,R3
   \   000167   85....       MOV       ?V2,?V0
   \   00016A   85....       MOV       ?V3,?V1
     66            if (sl)
   \   00016D   E5..         MOV       A,?V2
   \   00016F   45..         ORL       A,?V3
   \   000171   6007         JZ        ??test2_66
     67              return 5;  
   \   000173   7A05         MOV       R2,#0x5
   \   000175   7B00         MOV       R3,#0x0
   \   000177   02....       LJMP      ??test2_67 & 0xFFFF
     68            
     69          // Убедимся что счетчики не уехали
     70          // Все слоты занятыы
     71            if (SL_busy() != 20)
   \                     ??test2_66:
   \   00017A                ; Setup parameters for call to function SL_busy
   \   00017A   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00017D   8A..         MOV       ?V0,R2
   \   00017F   8B..         MOV       ?V1,R3
   \   000181   7414         MOV       A,#0x14
   \   000183   65..         XRL       A,?V0
   \   000185   7004         JNZ       ??test2_68
   \   000187   7400         MOV       A,#0x0
   \   000189   65..         XRL       A,?V1
   \                     ??test2_68:
   \   00018B   6004         JZ        ??test2_69
     72              test_res = 6;  
   \   00018D   7E06         MOV       R6,#0x6
   \   00018F   7F00         MOV       R7,#0x0
     73          
     74          // Свободных слотов нет
     75            if (SL_available() != 0)
   \                     ??test2_69:
   \   000191                ; Setup parameters for call to function SL_available
   \   000191   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000194   8A..         MOV       ?V0,R2
   \   000196   8B..         MOV       ?V1,R3
   \   000198   E5..         MOV       A,?V0
   \   00019A   45..         ORL       A,?V1
   \   00019C   6004         JZ        ??test2_70
     76              test_res = 7; 
   \   00019E   7E07         MOV       R6,#0x7
   \   0001A0   7F00         MOV       R7,#0x0
     77            
     78          // Удаляем все что создали и контролим результат
     79            for (int i = 0; i < 20; i++)
   \                     ??test2_70:
   \   0001A2   75..00       MOV       ?V0,#0x0
   \   0001A5   75..00       MOV       ?V1,#0x0
   \                     ??test2_71:
   \   0001A8   C3           CLR       C
   \   0001A9   E5..         MOV       A,?V0
   \   0001AB   9414         SUBB      A,#0x14
   \   0001AD   E5..         MOV       A,?V1
   \   0001AF   9400         SUBB      A,#0x0
   \   0001B1   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B3   65D0         XRL       A,PSW
   \   0001B5   33           RLC       A
   \   0001B6   5041         JNC       ??test2_72
     80              if (!SL_free(all[i]))
   \   0001B8                ; Setup parameters for call to function SL_free
   \   0001B8   A8..         MOV       R0,?V0
   \   0001BA   A9..         MOV       R1,?V1
   \   0001BC   E8           MOV       A,R0
   \   0001BD   75F002       MOV       B,#0x2
   \   0001C0   A4           MUL       AB
   \   0001C1   C8           XCH       A,R0
   \   0001C2   AAF0         MOV       R2,B
   \   0001C4   75F000       MOV       B,#0x0
   \   0001C7   A4           MUL       AB
   \   0001C8   2A           ADD       A,R2
   \   0001C9   FA           MOV       R2,A
   \   0001CA   75F002       MOV       B,#0x2
   \   0001CD   E9           MOV       A,R1
   \   0001CE   A4           MUL       AB
   \   0001CF   2A           ADD       A,R2
   \   0001D0   F9           MOV       R1,A
   \   0001D1   85..82       MOV       DPL,?XSP + 0
   \   0001D4   85..83       MOV       DPH,?XSP + 1
   \   0001D7   E582         MOV       A,DPL
   \   0001D9   28           ADD       A,R0
   \   0001DA   F582         MOV       DPL,A
   \   0001DC   E583         MOV       A,DPH
   \   0001DE   39           ADDC      A,R1
   \   0001DF   F583         MOV       DPH,A
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   FA           MOV       R2,A
   \   0001E3   A3           INC       DPTR
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   FB           MOV       R3,A
   \   0001E6   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   0001E9   4004         JC        ??test2_73
     81                test_res = 8; 
   \   0001EB   7E08         MOV       R6,#0x8
   \   0001ED   7F00         MOV       R7,#0x0
   \                     ??test2_73:
   \   0001EF   05..         INC       ?V0
   \   0001F1   E5..         MOV       A,?V0
   \   0001F3   70B3         JNZ       ??test2_71
   \   0001F5   05..         INC       ?V1
   \   0001F7   80AF         SJMP      ??test2_71
     82          
     83          // Все слоты свободны
     84            if (SL_busy() != 0)
   \                     ??test2_72:
   \   0001F9                ; Setup parameters for call to function SL_busy
   \   0001F9   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   0001FC   8A..         MOV       ?V0,R2
   \   0001FE   8B..         MOV       ?V1,R3
   \   000200   E5..         MOV       A,?V0
   \   000202   45..         ORL       A,?V1
   \   000204   6004         JZ        ??test2_74
     85              test_res = 9;  
   \   000206   7E09         MOV       R6,#0x9
   \   000208   7F00         MOV       R7,#0x0
     86          
     87            if (SL_available() != 20)
   \                     ??test2_74:
   \   00020A                ; Setup parameters for call to function SL_available
   \   00020A   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00020D   8A..         MOV       ?V0,R2
   \   00020F   8B..         MOV       ?V1,R3
   \   000211   7414         MOV       A,#0x14
   \   000213   65..         XRL       A,?V0
   \   000215   7004         JNZ       ??test2_75
   \   000217   7400         MOV       A,#0x0
   \   000219   65..         XRL       A,?V1
   \                     ??test2_75:
   \   00021B   6004         JZ        ??test2_76
     88              test_res = 10;
   \   00021D   7E0A         MOV       R6,#0xa
   \   00021F   7F00         MOV       R7,#0x0
     89            
     90          // Пробуем удалить уже удаленное рез. должен быть false  
     91            for (int i = 0; i < 20; i++)
   \                     ??test2_76:
   \   000221   75..00       MOV       ?V0,#0x0
   \   000224   75..00       MOV       ?V1,#0x0
   \                     ??test2_77:
   \   000227   C3           CLR       C
   \   000228   E5..         MOV       A,?V0
   \   00022A   9414         SUBB      A,#0x14
   \   00022C   E5..         MOV       A,?V1
   \   00022E   9400         SUBB      A,#0x0
   \   000230   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000232   65D0         XRL       A,PSW
   \   000234   33           RLC       A
   \   000235   5041         JNC       ??test2_78
     92              if (SL_free(all[i]))
   \   000237                ; Setup parameters for call to function SL_free
   \   000237   A8..         MOV       R0,?V0
   \   000239   A9..         MOV       R1,?V1
   \   00023B   E8           MOV       A,R0
   \   00023C   75F002       MOV       B,#0x2
   \   00023F   A4           MUL       AB
   \   000240   C8           XCH       A,R0
   \   000241   AAF0         MOV       R2,B
   \   000243   75F000       MOV       B,#0x0
   \   000246   A4           MUL       AB
   \   000247   2A           ADD       A,R2
   \   000248   FA           MOV       R2,A
   \   000249   75F002       MOV       B,#0x2
   \   00024C   E9           MOV       A,R1
   \   00024D   A4           MUL       AB
   \   00024E   2A           ADD       A,R2
   \   00024F   F9           MOV       R1,A
   \   000250   85..82       MOV       DPL,?XSP + 0
   \   000253   85..83       MOV       DPH,?XSP + 1
   \   000256   E582         MOV       A,DPL
   \   000258   28           ADD       A,R0
   \   000259   F582         MOV       DPL,A
   \   00025B   E583         MOV       A,DPH
   \   00025D   39           ADDC      A,R1
   \   00025E   F583         MOV       DPH,A
   \   000260   E0           MOVX      A,@DPTR
   \   000261   FA           MOV       R2,A
   \   000262   A3           INC       DPTR
   \   000263   E0           MOVX      A,@DPTR
   \   000264   FB           MOV       R3,A
   \   000265   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   000268   5004         JNC       ??test2_79
     93                test_res = 11;
   \   00026A   7E0B         MOV       R6,#0xb
   \   00026C   7F00         MOV       R7,#0x0
   \                     ??test2_79:
   \   00026E   05..         INC       ?V0
   \   000270   E5..         MOV       A,?V0
   \   000272   70B3         JNZ       ??test2_77
   \   000274   05..         INC       ?V1
   \   000276   80AF         SJMP      ??test2_77
     94            
     95          // Все слоты свободны
     96            if (SL_busy() != 0)
   \                     ??test2_78:
   \   000278                ; Setup parameters for call to function SL_busy
   \   000278   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00027B   8A..         MOV       ?V0,R2
   \   00027D   8B..         MOV       ?V1,R3
   \   00027F   E5..         MOV       A,?V0
   \   000281   45..         ORL       A,?V1
   \   000283   6004         JZ        ??test2_80
     97              test_res = 12;  
   \   000285   7E0C         MOV       R6,#0xc
   \   000287   7F00         MOV       R7,#0x0
     98          
     99            if (SL_available() != 20)
   \                     ??test2_80:
   \   000289                ; Setup parameters for call to function SL_available
   \   000289   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00028C   8A..         MOV       ?V0,R2
   \   00028E   8B..         MOV       ?V1,R3
   \   000290   7414         MOV       A,#0x14
   \   000292   65..         XRL       A,?V0
   \   000294   7004         JNZ       ??test2_81
   \   000296   7400         MOV       A,#0x0
   \   000298   65..         XRL       A,?V1
   \                     ??test2_81:
   \   00029A   6004         JZ        ??test2_82
    100              test_res = 13;
   \   00029C   7E0D         MOV       R6,#0xd
   \   00029E   7F00         MOV       R7,#0x0
    101            
    102            return test_res;
   \                     ??test2_82:
   \   0002A0   EE           MOV       A,R6
   \   0002A1   FA           MOV       R2,A
   \   0002A2   EF           MOV       A,R7
   \   0002A3   FB           MOV       R3,A
   \                     ??test2_67:
   \   0002A4   7428         MOV       A,#0x28
   \   0002A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A9   7F04         MOV       R7,#0x4
   \   0002AB   02....       LJMP      ?BANKED_LEAVE_XDATA
    103          }
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          static int test1(void){
   \                     ??test1_3:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    106            // Простой тест на создание и удаление
    107            bool test_res = 0;
   \   000005   C2..         CLR       ?VB.0
    108            
    109            if (SL_busy() != 0)
   \   000007                ; Setup parameters for call to function SL_busy
   \   000007   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   E5..         MOV       A,?V0
   \   000010   45..         ORL       A,?V1
   \   000012   6002         JZ        ??test1_36
    110              test_res = 1;  
   \   000014   D2..         SETB      ?VB.0
    111          
    112            if (SL_available() != 20)
   \                     ??test1_36:
   \   000016                ; Setup parameters for call to function SL_available
   \   000016   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000019   8A..         MOV       ?V0,R2
   \   00001B   8B..         MOV       ?V1,R3
   \   00001D   7414         MOV       A,#0x14
   \   00001F   65..         XRL       A,?V0
   \   000021   7004         JNZ       ??test1_37
   \   000023   7400         MOV       A,#0x0
   \   000025   65..         XRL       A,?V1
   \                     ??test1_37:
   \   000027   6002         JZ        ??test1_38
    113              test_res = 2;    
   \   000029   D2..         SETB      ?VB.0
    114            
    115            char* slot = SL_alloc();
   \                     ??test1_38:
   \   00002B                ; Setup parameters for call to function SL_alloc
   \   00002B   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AE..         MOV       R6,?V0
   \   000034   AF..         MOV       R7,?V1
    116            if (SL_busy() != 1)
   \   000036                ; Setup parameters for call to function SL_busy
   \   000036   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000039   8A..         MOV       ?V0,R2
   \   00003B   8B..         MOV       ?V1,R3
   \   00003D   7401         MOV       A,#0x1
   \   00003F   65..         XRL       A,?V0
   \   000041   7004         JNZ       ??test1_39
   \   000043   7400         MOV       A,#0x0
   \   000045   65..         XRL       A,?V1
   \                     ??test1_39:
   \   000047   6002         JZ        ??test1_40
    117              test_res = 3;
   \   000049   D2..         SETB      ?VB.0
    118            
    119            if (SL_available() != 19)
   \                     ??test1_40:
   \   00004B                ; Setup parameters for call to function SL_available
   \   00004B   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00004E   8A..         MOV       ?V0,R2
   \   000050   8B..         MOV       ?V1,R3
   \   000052   7413         MOV       A,#0x13
   \   000054   65..         XRL       A,?V0
   \   000056   7004         JNZ       ??test1_41
   \   000058   7400         MOV       A,#0x0
   \   00005A   65..         XRL       A,?V1
   \                     ??test1_41:
   \   00005C   6002         JZ        ??test1_42
    120              test_res = 4;  
   \   00005E   D2..         SETB      ?VB.0
    121            
    122            SL_free(slot);
   \                     ??test1_42:
   \   000060                ; Setup parameters for call to function SL_free
   \   000060   EE           MOV       A,R6
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
    123            if (SL_busy() != 0)
   \   000067                ; Setup parameters for call to function SL_busy
   \   000067   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00006A   8A..         MOV       ?V0,R2
   \   00006C   8B..         MOV       ?V1,R3
   \   00006E   E5..         MOV       A,?V0
   \   000070   45..         ORL       A,?V1
   \   000072   6002         JZ        ??test1_43
    124              test_res = 5;  
   \   000074   D2..         SETB      ?VB.0
    125            
    126            if (SL_available() != 20)
   \                     ??test1_43:
   \   000076                ; Setup parameters for call to function SL_available
   \   000076   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000079   8A..         MOV       ?V0,R2
   \   00007B   8B..         MOV       ?V1,R3
   \   00007D   7414         MOV       A,#0x14
   \   00007F   65..         XRL       A,?V0
   \   000081   7004         JNZ       ??test1_44
   \   000083   7400         MOV       A,#0x0
   \   000085   65..         XRL       A,?V1
   \                     ??test1_44:
   \   000087   6002         JZ        ??test1_45
    127              test_res = 6; 
   \   000089   D2..         SETB      ?VB.0
    128            
    129            return test_res;
   \                     ??test1_45:
   \   00008B   A2..         MOV       C,?VB.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   FA           MOV       R2,A
   \   000090   7B00         MOV       R3,#0x0
   \   000092   7F02         MOV       R7,#0x2
   \   000094   02....       LJMP      ?BANKED_LEAVE_XDATA
    130          }
    131          
E:\Neocore\Hardware\PRJ Test\u_mem_utils.c
      1          #include "debug.h"
      2          #include "mem_utils.h"
      3          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      4          void u_mem_utils(void){
   \                     u_mem_utils:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
      5            char tst1[10] = {1,2,3,4,5,6,7,8,9,10};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1`
   \   00000D   7409         MOV       A,#0x9
   \   00000F   12....       LCALL     ?XSTACK_DISP102_8
   \   000012   740A         MOV       A,#0xa
   \   000014   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
      6            char tst2[10];
      7            int cmp_res;
      8            
      9            struct memcpy memcpy = {.src = tst1, .dst = tst2, .len = sizeof(tst1)};
   \   000017   90....       MOV       DPTR,#`?<Constant {(char *)0, (char *)0, 10}>`
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   7405         MOV       A,#0x5
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000024   7413         MOV       A,#0x13
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E8           MOV       A,R0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
   \   000033   7409         MOV       A,#0x9
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   7406         MOV       A,#0x6
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   F0           MOVX      @DPTR,A
     10            MEM_memcpy(&memcpy);
   \   000042                ; Setup parameters for call to function MEM_memcpy
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     11            
     12            for (int i = 0; i < sizeof(tst1); i++){
   \   00004A   75..00       MOV       ?V0,#0x0
   \   00004D   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_0:
   \   000050   C3           CLR       C
   \   000051   E5..         MOV       A,?V0
   \   000053   940A         SUBB      A,#0xa
   \   000055   E5..         MOV       A,?V1
   \   000057   9400         SUBB      A,#0x0
   \   000059   5065         JNC       ??u_mem_utils_1
     13              cmp_res = tst1[i] == tst2[i];
   \   00005B   7409         MOV       A,#0x9
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E582         MOV       A,DPL
   \   000062   25..         ADD       A,?V0
   \   000064   F582         MOV       DPL,A
   \   000066   E583         MOV       A,DPH
   \   000068   35..         ADDC      A,?V1
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F8           MOV       R0,A
   \   00006E   7413         MOV       A,#0x13
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E582         MOV       A,DPL
   \   000075   25..         ADD       A,?V0
   \   000077   F582         MOV       DPL,A
   \   000079   E583         MOV       A,DPH
   \   00007B   35..         ADDC      A,?V1
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   68           XRL       A,R0
   \   000081   7006         JNZ       ??u_mem_utils_2
   \   000083   7E01         MOV       R6,#0x1
   \   000085   7F00         MOV       R7,#0x0
   \   000087   8004         SJMP      ??u_mem_utils_3
   \                     ??u_mem_utils_2:
   \   000089   7E00         MOV       R6,#0x0
   \   00008B   7F00         MOV       R7,#0x0
     14              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_3:
   \   00008D   EE           MOV       A,R6
   \   00008E   4F           ORL       A,R7
   \   00008F   6025         JZ        ??u_mem_utils_4
   \   000091                ; Setup parameters for call to function printf
   \   000091   75..0E       MOV       ?V2,#0xe
   \   000094   75..00       MOV       ?V3,#0x0
   \   000097   78..         MOV       R0,#?V2
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   00009F   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000A2   78..         MOV       R0,#?V2
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_8` & 0xff
   \   0000A9   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_8` >> 8) & 0xff
   \   0000AB   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000AE   7404         MOV       A,#0x4
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3                ; Setup parameters for call to function DBG_CORE_HALT
   \   0000B3   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     15              }
   \                     ??u_mem_utils_4:
   \   0000B6   05..         INC       ?V0
   \   0000B8   E5..         MOV       A,?V0
   \   0000BA   7094         JNZ       ??u_mem_utils_0
   \   0000BC   05..         INC       ?V1
   \   0000BE   8090         SJMP      ??u_mem_utils_0
     16            LOG_ON("MEM_memcpy ok!");
   \                     ??u_mem_utils_1:
   \   0000C0                ; Setup parameters for call to function printf
   \   0000C0   75....       MOV       ?V0,#??__FUNCTION___13 & 0xff
   \   0000C3   75....       MOV       ?V1,#(??__FUNCTION___13 >> 8) & 0xff
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CB   75..10       MOV       ?V0,#0x10
   \   0000CE   75..00       MOV       ?V1,#0x0
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D6   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0000D9   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   0000E3   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   0000E5   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000E8   7406         MOV       A,#0x6
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED                ; Setup parameters for call to function printf
   \   0000ED   7A..         MOV       R2,#`?<Constant "MEM_memcpy ok!">` & 0xff
   \   0000EF   7B..         MOV       R3,#(`?<Constant "MEM_memcpy ok!">` >> 8) & 0xff
   \   0000F1   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000F4                ; Setup parameters for call to function printf
   \   0000F4   7A..         MOV       R2,#`?<Constant "\\r\\n">_3` & 0xff
   \   0000F6   7B..         MOV       R3,#(`?<Constant "\\r\\n">_3` >> 8) & 0xff
   \   0000F8   12....       LCALL     `??printf::?relay`; Banked call to: printf
     17            
     18            struct memset memset = {.dst = tst1, .val = 7, .len = sizeof(tst1)};
   \   0000FB   90....       MOV       DPTR,#`?<Constant {(char *)0, 10, 7}>`
   \   0000FE   AC..         MOV       R4,?XSP + 0
   \   000100   AD..         MOV       R5,?XSP + 1
   \   000102   7404         MOV       A,#0x4
   \   000104   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000107   7409         MOV       A,#0x9
   \   000109   12....       LCALL     ?XSTACK_DISP100_8
   \   00010C   85..82       MOV       DPL,?XSP + 0
   \   00010F   85..83       MOV       DPH,?XSP + 1
   \   000112   E8           MOV       A,R0
   \   000113   F0           MOVX      @DPTR,A
   \   000114   A3           INC       DPTR
   \   000115   E9           MOV       A,R1
   \   000116   F0           MOVX      @DPTR,A
     19            MEM_memset(&memset);
   \   000117                ; Setup parameters for call to function MEM_memset
   \   000117   AA..         MOV       R2,?XSP + 0
   \   000119   AB..         MOV       R3,?XSP + 1
   \   00011B   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     20          
     21            for (int i = 0; i < sizeof(tst1); i++){
   \   00011E   75..00       MOV       ?V0,#0x0
   \   000121   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_5:
   \   000124   C3           CLR       C
   \   000125   E5..         MOV       A,?V0
   \   000127   940A         SUBB      A,#0xa
   \   000129   E5..         MOV       A,?V1
   \   00012B   9400         SUBB      A,#0x0
   \   00012D   5053         JNC       ??u_mem_utils_6
     22              cmp_res = tst1[i] == 7;
   \   00012F   7409         MOV       A,#0x9
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   E582         MOV       A,DPL
   \   000136   25..         ADD       A,?V0
   \   000138   F582         MOV       DPL,A
   \   00013A   E583         MOV       A,DPH
   \   00013C   35..         ADDC      A,?V1
   \   00013E   F583         MOV       DPH,A
   \   000140   E0           MOVX      A,@DPTR
   \   000141   6407         XRL       A,#0x7
   \   000143   7006         JNZ       ??u_mem_utils_7
   \   000145   7E01         MOV       R6,#0x1
   \   000147   7F00         MOV       R7,#0x0
   \   000149   8004         SJMP      ??u_mem_utils_8
   \                     ??u_mem_utils_7:
   \   00014B   7E00         MOV       R6,#0x0
   \   00014D   7F00         MOV       R7,#0x0
     23              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_8:
   \   00014F   EE           MOV       A,R6
   \   000150   4F           ORL       A,R7
   \   000151   6025         JZ        ??u_mem_utils_9
   \   000153                ; Setup parameters for call to function printf
   \   000153   75..17       MOV       ?V2,#0x17
   \   000156   75..00       MOV       ?V3,#0x0
   \   000159   78..         MOV       R0,#?V2
   \   00015B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015E   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   000161   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   000164   78..         MOV       R0,#?V2
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000169   7A..         MOV       R2,#`?<Constant "!%s:%d\\r\\n">_8` & 0xff
   \   00016B   7B..         MOV       R3,#(`?<Constant "!%s:%d\\r\\n">_8` >> 8) & 0xff
   \   00016D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000170   7404         MOV       A,#0x4
   \   000172   12....       LCALL     ?DEALLOC_XSTACK8
   \   000175                ; Setup parameters for call to function DBG_CORE_HALT
   \   000175   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     24              }
   \                     ??u_mem_utils_9:
   \   000178   05..         INC       ?V0
   \   00017A   E5..         MOV       A,?V0
   \   00017C   70A6         JNZ       ??u_mem_utils_5
   \   00017E   05..         INC       ?V1
   \   000180   80A2         SJMP      ??u_mem_utils_5
     25            LOG_ON("MEM_memset ok!");
   \                     ??u_mem_utils_6:
   \   000182                ; Setup parameters for call to function printf
   \   000182   75....       MOV       ?V0,#??__FUNCTION___13 & 0xff
   \   000185   75....       MOV       ?V1,#(??__FUNCTION___13 >> 8) & 0xff
   \   000188   78..         MOV       R0,#?V0
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018D   75..19       MOV       ?V0,#0x19
   \   000190   75..00       MOV       ?V1,#0x0
   \   000193   78..         MOV       R0,#?V0
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000198   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   00019B   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   00019E   78..         MOV       R0,#?V0
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   0001A5   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   0001A7   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001AA   7406         MOV       A,#0x6
   \   0001AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AF                ; Setup parameters for call to function printf
   \   0001AF   7A..         MOV       R2,#`?<Constant "MEM_memset ok!">` & 0xff
   \   0001B1   7B..         MOV       R3,#(`?<Constant "MEM_memset ok!">` >> 8) & 0xff
   \   0001B3   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001B6                ; Setup parameters for call to function printf
   \   0001B6   7A..         MOV       R2,#`?<Constant "\\r\\n">_3` & 0xff
   \   0001B8   7B..         MOV       R3,#(`?<Constant "\\r\\n">_3` >> 8) & 0xff
   \   0001BA   12....       LCALL     `??printf::?relay`; Banked call to: printf
     26          }
   \   0001BD   741D         MOV       A,#0x1d
   \   0001BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C2   7F04         MOV       R7,#0x4
   \   0001C4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, (char *)0, 10}>`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0H
   \   000004   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 10, 7}>`:
   \   000000   0000         DW 0H
   \   000002   0A           DB 10
   \   000003   07           DB 7
E:\Neocore\Hardware\STACK_CORE_SRC\ustimer.c
      1          #include "ioCC2530.h"
      2          #include "ustimer.h"
      3          #include "stdint.h"
      4          #include "action_manager.h"
      5          #include "stdbool.h"
      6          
      7          
      8          #define ACCURATE_VAL_US 500 
      9          
     10          // Максимальное кол-во тактов таймера. Константа 40 бит, 5 байт

   \                                 In  segment XDATA_ROM_C, align 1
     11          static const uint32_t MAC_TIMER_MAX = 0xFFFFFFFFUL; 
   \                     ??MAC_TIMER_MAX:
   \   000000   FFFFFFFF     DD 4294967295

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          static uint32_t DELAY_CALIBRATE_TICS; // Калибровка функции задержки
   \                     ??DELAY_CALIBRATE_TICS:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     13          
     14          static void DelayCalibrate(void);
     15          static void HW_Init(void);  

   \                                 In  segment XDATA_I, align 1, keep-with-next
     16          module_s UST_MODULE = {ALIAS(HW_Init)};
   \                     UST_MODULE:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for UST_MODULE>`
   \   00000A                REQUIRE __INIT_XDATA_I
     17          
     18          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          void HW_Init(void){
   \                     ??HW_Init_7:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     20            // Запускаем таймер, LATCH MODE = 1
     21            // Latch mode фиксирует значение таймера переполнения при чтении T2M0
     22            // ЗАпускаем MAC таймер без синхронизации с кварцем 32.768к
     23            T2CTRL = (1<<0) | (1<<3); 
   \   000004   759409       MOV       0x94,#0x9
     24            // Калибровка функции задержки
     25            DelayCalibrate();
   \   000007                ; Setup parameters for call to function DelayCalibrate
   \   000007   12....       LCALL     `??DelayCalibrate::?relay`; Banked call to: DelayCalibrate
     26          }
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
   \   000011                REQUIRE T2CTRL
     27          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     28          ustime_t UST_now(void){
   \                     UST_now:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     29            ustime_t now;
     30            ((char*)&now)[0] = T2M0;
   \   000009   E5A2         MOV       A,0xa2
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
     31            ((char*)&now)[1] = T2M1;
   \   000016   E5A3         MOV       A,0xa3
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   F0           MOVX      @DPTR,A
     32            ((char*)&now)[2] = T2MOVF0;
   \   000022   E5A4         MOV       A,0xa4
   \   000024   C0E0         PUSH      A
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   F0           MOVX      @DPTR,A
     33            ((char*)&now)[3] = T2MOVF1;
   \   00002E   E5A5         MOV       A,0xa5
   \   000030   C0E0         PUSH      A
   \   000032   7403         MOV       A,#0x3
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
     34            return now;
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   12....       LCALL     ?XLOAD_R2345
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET
   \   00004F                REQUIRE T2M0
   \   00004F                REQUIRE T2M1
   \   00004F                REQUIRE T2MOVF0
   \   00004F                REQUIRE T2MOVF1
     35          }
     36          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          bool UST_time_over(stamp_t beg, ustime_t wait){
   \                     UST_time_over:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?L_MOV_X
     38            stamp_t now = UST_now(); 
   \   000024                ; Setup parameters for call to function UST_now
   \   000024   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   12....       LCALL     ?XSTORE_R2345
     39            ustime_t delta = UST_interval(beg, now);
   \   000030                ; Setup parameters for call to function UST_interval
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000039   7408         MOV       A,#0x8
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?XLOAD_R2345
   \   000041   12....       LCALL     `??UST_interval::?relay`; Banked call to: UST_interval
   \   000044   7404         MOV       A,#0x4
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049   8A..         MOV       ?V4,R2
   \   00004B   8B..         MOV       ?V5,R3
   \   00004D   8C..         MOV       ?V6,R4
   \   00004F   8D..         MOV       ?V7,R5
     40            return (delta > wait) ?  true:false;
   \   000051   78..         MOV       R0,#?V4
   \   000053   79..         MOV       R1,#?V0
   \   000055   12....       LCALL     ?UL_GT
   \   000058   5004         JNC       ??UST_time_over_0
   \   00005A   D2F0         SETB      B.0
   \   00005C   8002         SJMP      ??UST_time_over_1
   \                     ??UST_time_over_0:
   \   00005E   C2F0         CLR       B.0
   \                     ??UST_time_over_1:
   \   000060   A2F0         MOV       C,B.0
   \   000062   7408         MOV       A,#0x8
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   7F08         MOV       R7,#0x8
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
     41          }
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          ustime_t UST_interval(stamp_t beg, stamp_t end){
   \                     UST_interval:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EC           MOV       A,R4
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?L_MOV_X
     44            return (end >= beg) ? 
     45              TICKS_TO_US(end - beg) :
     46              TICKS_TO_US(MAC_TIMER_MAX - beg + end);
   \   000025   85..82       MOV       DPL,?XSP + 0
   \   000028   85..83       MOV       DPH,?XSP + 1
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?UL_GE_X
   \   000030   501E         JNC       ??UST_interval_0
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?L_SUB_X
   \   00003D   7405         MOV       A,#0x5
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?UL_SHR
   \   000044   7404         MOV       A,#0x4
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_MOV_TO_X
   \   00004E   802B         SJMP      ??UST_interval_1
   \                     ??UST_interval_0:
   \   000050   90....       MOV       DPTR,#??MAC_TIMER_MAX
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?L_MOV_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?L_SUB_X
   \   000063   78..         MOV       R0,#?V4
   \   000065   79..         MOV       R1,#?V0
   \   000067   12....       LCALL     ?L_ADD
   \   00006A   7405         MOV       A,#0x5
   \   00006C   78..         MOV       R0,#?V4
   \   00006E   12....       LCALL     ?UL_SHR
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   78..         MOV       R0,#?V4
   \   000078   12....       LCALL     ?L_MOV_TO_X
   \                     ??UST_interval_1:
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?XLOAD_R2345
   \   000083   7408         MOV       A,#0x8
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   7F08         MOV       R7,#0x8
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA
     47          };
     48          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     49          void UST_delay(ustime_t time){
   \                     UST_delay:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
     50            stamp_t now = UST_now();
   \   00001A                ; Setup parameters for call to function UST_now
   \   00001A   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00001D   7408         MOV       A,#0x8
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?XSTORE_R2345
     51            stamp_t len = US_TO_TICKS(time);
   \   000025   740C         MOV       A,#0xc
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?L_MOV_X
   \   00002F   90....       MOV       DPTR,#__Constant_20
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?L_MOV_X
   \   000037   78..         MOV       R0,#?V0
   \   000039   79..         MOV       R1,#?V4
   \   00003B   12....       LCALL     ?L_MUL
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?L_MOV_TO_X
     52            stamp_t offset = (time > DELAY_CALIBRATE_TICS) ?
     53                              DELAY_CALIBRATE_TICS : 0;
   \   000048   740C         MOV       A,#0xc
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   90....       MOV       DPTR,#??DELAY_CALIBRATE_TICS
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?UL_GT_X
   \   00005A   5011         JNC       ??UST_delay_0
   \   00005C   90....       MOV       DPTR,#??DELAY_CALIBRATE_TICS
   \   00005F   12....       LCALL     ?XLOAD_R0123
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   12....       LCALL     ?XSTORE_R0123
   \   00006B   8015         SJMP      ??UST_delay_1
   \                     ??UST_delay_0:
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   7400         MOV       A,#0x0
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   7400         MOV       A,#0x0
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   7400         MOV       A,#0x0
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   7400         MOV       A,#0x0
   \   000081   F0           MOVX      @DPTR,A
     54            while (UST_now() < (now + len - offset));
   \                     ??UST_delay_1:
   \   000082   7408         MOV       A,#0x8
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_MOV_X
   \   00008C   7404         MOV       A,#0x4
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?L_ADD_X
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   12....       LCALL     ?L_SUB_X
   \   0000A1                ; Setup parameters for call to function UST_now
   \   0000A1   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   0000A4   8A..         MOV       ?V4,R2
   \   0000A6   8B..         MOV       ?V5,R3
   \   0000A8   8C..         MOV       ?V6,R4
   \   0000AA   8D..         MOV       ?V7,R5
   \   0000AC   78..         MOV       R0,#?V0
   \   0000AE   79..         MOV       R1,#?V4
   \   0000B0   12....       LCALL     ?UL_GT
   \   0000B3   40CD         JC        ??UST_delay_1
     55          }
   \   0000B5   7410         MOV       A,#0x10
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   7F08         MOV       R7,#0x8
   \   0000BC   02....       LJMP      ?BANKED_LEAVE_XDATA
     56          
     57          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     58          stamp_t _interval(stamp_t beg, stamp_t end){
   \                     _interval:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EC           MOV       A,R4
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?L_MOV_X
     59            return (end >= beg) ? 
     60              (end - beg) :
     61              (MAC_TIMER_MAX - beg + end);
   \   000025   85..82       MOV       DPL,?XSP + 0
   \   000028   85..83       MOV       DPH,?XSP + 1
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?UL_GE_X
   \   000030   5017         JNC       ??_interval_0
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?L_SUB_X
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?L_MOV_TO_X
   \   000047   8024         SJMP      ??_interval_1
   \                     ??_interval_0:
   \   000049   90....       MOV       DPTR,#??MAC_TIMER_MAX
   \   00004C   78..         MOV       R0,#?V4
   \   00004E   12....       LCALL     ?L_MOV_X
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?L_SUB_X
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   79..         MOV       R1,#?V0
   \   000060   12....       LCALL     ?L_ADD
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   78..         MOV       R0,#?V4
   \   00006A   12....       LCALL     ?L_MOV_TO_X
   \                     ??_interval_1:
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?XLOAD_R2345
   \   000075   7408         MOV       A,#0x8
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   7F08         MOV       R7,#0x8
   \   00007C   02....       LJMP      ?BANKED_LEAVE_XDATA
     62          };
     63          
     64          /**
     65          @brief Калибровка функции задержки TIM_delay
     66          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          static void DelayCalibrate(void){
   \                     ??DelayCalibrate:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     68            DELAY_CALIBRATE_TICS = 0;  
   \   00000A   90....       MOV       DPTR,#??DELAY_CALIBRATE_TICS
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
     69            stamp_t start = UST_now();
   \   00001C                ; Setup parameters for call to function UST_now
   \   00001C   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   12....       LCALL     ?XSTORE_R2345
     70            UST_delay(ACCURATE_VAL_US);
   \   000028                ; Setup parameters for call to function UST_delay
   \   000028   90....       MOV       DPTR,#__Constant_1f4
   \   00002B   12....       LCALL     ?XLOAD_R2345
   \   00002E   12....       LCALL     `??UST_delay::?relay`; Banked call to: UST_delay
     71            stamp_t end = UST_now();
   \   000031                ; Setup parameters for call to function UST_now
   \   000031   12....       LCALL     `??UST_now::?relay`; Banked call to: UST_now
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   8C..         MOV       ?V2,R4
   \   00003A   8D..         MOV       ?V3,R5
     72            DELAY_CALIBRATE_TICS = _interval(start, end) -
     73                                    US_TO_TICKS(ACCURATE_VAL_US);
   \   00003C                ; Setup parameters for call to function _interval
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?XLOAD_R2345
   \   000049   12....       LCALL     `??_interval::?relay`; Banked call to: _interval
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   8A..         MOV       ?V4,R2
   \   000053   8B..         MOV       ?V5,R3
   \   000055   8C..         MOV       ?V6,R4
   \   000057   8D..         MOV       ?V7,R5
   \   000059   90....       MOV       DPTR,#__Constant_ffffc180
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?L_ADD_X
   \   000061   90....       MOV       DPTR,#??DELAY_CALIBRATE_TICS
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?L_MOV_TO_X
     74          };
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7F08         MOV       R7,#0x8
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\Neocore\Hardware\PRJ Test\utest.c
      1          #include "utest.h"
      2          #include "macros.h"
      3          #include "stdio.h"
      4          #include "action_manager.h"
      5          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      6          struct test_unit* TEST_FUN[] = TEST_FUN_DEF;
   \                     TEST_FUN:
   \   000000                DS 22
   \   000016                REQUIRE `?<Initializer for TEST_FUN>`
   \   000016                REQUIRE __INIT_XDATA_I
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          static int passed = 0;
   \                     ??passed:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          static int common_count = 0;
   \                     ??common_count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     10          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static inline void run_unit_fun(struct test_unit* unit){
   \                     ??run_unit_fun:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
     12            if (!unit->fun){
   \   000009   E5..         MOV       A,?V0
   \   00000B   2420         ADD       A,#0x20
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   35..         ADDC      A,?V1
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   49           ORL       A,R1
   \   00001B   7009         JNZ       ??run_unit_fun_1
     13            printf("Test function not assigned!!!");
   \   00001D                ; Setup parameters for call to function printf
   \   00001D   7A..         MOV       R2,#`?<Constant "Test function not ass...">` & 0xff
   \   00001F   7B..         MOV       R3,#(`?<Constant "Test function not ass...">` >> 8) & 0xff
   \   000021   12....       LCALL     `??printf::?relay`; Banked call to: printf
     14            while(true);
   \                     ??run_unit_fun_2:
   \   000024   80FE         SJMP      ??run_unit_fun_2
     15            }
     16            int res;
     17            common_count++;
   \                     ??run_unit_fun_1:
   \   000026   90....       MOV       DPTR,#??common_count
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2401         ADD       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \   000031   F0           MOVX      @DPTR,A
     18            res = unit->fun();
   \   000032                ; Setup parameters for indirect call
   \   000032   E5..         MOV       A,?V0
   \   000034   2420         ADD       A,#0x20
   \   000036   F582         MOV       DPL,A
   \   000038   E4           CLR       A
   \   000039   35..         ADDC      A,?V1
   \   00003B   F583         MOV       DPH,A
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F583         MOV       DPH,A
   \   000043   8882         MOV       DPL,R0
   \   000045   12....       LCALL     ?CALL_IND
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   85....       MOV       ?V2,?V4
   \   00004F   85....       MOV       ?V3,?V5
     19            
     20            printf("TESTING:\t%-32s", unit->name);
   \   000052                ; Setup parameters for call to function printf
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7A..         MOV       R2,#`?<Constant "TESTING:\\t%-32s">` & 0xff
   \   000059   7B..         MOV       R3,#(`?<Constant "TESTING:\\t%-32s">` >> 8) & 0xff
   \   00005B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
     21            if (res == 0){
   \   000063   E5..         MOV       A,?V2
   \   000065   45..         ORL       A,?V3
   \   000067   7015         JNZ       ??run_unit_fun_3
     22              printf("\tPASSED\r\n");
   \   000069                ; Setup parameters for call to function printf
   \   000069   7A..         MOV       R2,#`?<Constant "\\tPASSED\\r\\n">` & 0xff
   \   00006B   7B..         MOV       R3,#(`?<Constant "\\tPASSED\\r\\n">` >> 8) & 0xff
   \   00006D   12....       LCALL     `??printf::?relay`; Banked call to: printf
     23              passed++;
   \   000070   90....       MOV       DPTR,#??passed
   \   000073   E0           MOVX      A,@DPTR
   \   000074   2401         ADD       A,#0x1
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   3400         ADDC      A,#0x0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   8011         SJMP      ??run_unit_fun_4
     24            }
     25            else
     26              printf("\tERR = %d. FAILED <--------------\r\n", res);           
   \                     ??run_unit_fun_3:
   \   00007E                ; Setup parameters for call to function printf
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   7A..         MOV       R2,#`?<Constant "\\tERR = %d. FAILED <--...">` & 0xff
   \   000085   7B..         MOV       R3,#(`?<Constant "\\tERR = %d. FAILED <--...">` >> 8) & 0xff
   \   000087   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
     27          };
   \                     ??run_unit_fun_4:
   \   00008F   7F06         MOV       R7,#0x6
   \   000091   02....       LJMP      ?BANKED_LEAVE_XDATA
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          static void show_grating(void){
   \                     ??show_grating:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     30            printf("Begin unit test\r\n");
   \   000004                ; Setup parameters for call to function printf
   \   000004   7A..         MOV       R2,#`?<Constant "Begin unit test\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "Begin unit test\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??printf::?relay`; Banked call to: printf
     31          }
   \   00000B   D083         POP       DPH
   \   00000D   D082         POP       DPL
   \   00000F   02....       LJMP      ?BRET
     32          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          static void show_statistic(void){
   \                     ??show_statistic:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     34            printf("\r\n##########################################\r\n");
   \   000004                ; Setup parameters for call to function printf
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n###################...">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n###################...">` >> 8) & 0xff
   \   000008   12....       LCALL     `??printf::?relay`; Banked call to: printf
     35            printf("Test runned: \t%d\r\n", common_count);
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   90....       MOV       DPTR,#??common_count
   \   00000E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000011   7A..         MOV       R2,#`?<Constant "Test runned: \\t%d\\r\\n">` & 0xff
   \   000013   7B..         MOV       R3,#(`?<Constant "Test runned: \\t%d\\r\\n">` >> 8) & 0xff
   \   000015   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?DEALLOC_XSTACK8
     36            printf("Test passed: \t%d\r\n", passed);
   \   00001D                ; Setup parameters for call to function printf
   \   00001D   90....       MOV       DPTR,#??passed
   \   000020   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000023   7A..         MOV       R2,#`?<Constant "Test passed: \\t%d\\r\\n">` & 0xff
   \   000025   7B..         MOV       R3,#(`?<Constant "Test passed: \\t%d\\r\\n">` >> 8) & 0xff
   \   000027   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
     37            if (common_count == passed)
   \   00002F   90....       MOV       DPTR,#??common_count
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   90....       MOV       DPTR,#??passed
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??show_statistic_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   69           XRL       A,R1
   \                     ??show_statistic_1:
   \   000041   7009         JNZ       ??show_statistic_2
     38              printf("Succes!\r\n");
   \   000043                ; Setup parameters for call to function printf
   \   000043   7A..         MOV       R2,#`?<Constant "Succes!\\r\\n">` & 0xff
   \   000045   7B..         MOV       R3,#(`?<Constant "Succes!\\r\\n">` >> 8) & 0xff
   \   000047   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004A   8007         SJMP      ??show_statistic_3
     39            else
     40              printf("Failed!\r\n");
   \                     ??show_statistic_2:
   \   00004C                ; Setup parameters for call to function printf
   \   00004C   7A..         MOV       R2,#`?<Constant "Failed!\\r\\n">` & 0xff
   \   00004E   7B..         MOV       R3,#(`?<Constant "Failed!\\r\\n">` >> 8) & 0xff
   \   000050   12....       LCALL     `??printf::?relay`; Banked call to: printf
     41          }
   \                     ??show_statistic_3:
   \   000053   D083         POP       DPH
   \   000055   D082         POP       DPL
   \   000057   02....       LJMP      ?BRET
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void run_tests(void){
   \                     run_tests:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     44            show_grating();
   \   000005                ; Setup parameters for call to function show_grating
   \   000005   12....       LCALL     `??show_grating::?relay`; Banked call to: show_grating
     45            struct test_unit* unit;
     46            for (int i = 0; i < sizeof(TEST_FUN)/sizeof(struct test_unit*); i++){
   \   000008   7E00         MOV       R6,#0x0
   \   00000A   7F00         MOV       R7,#0x0
   \                     ??run_tests_0:
   \   00000C   C3           CLR       C
   \   00000D   EE           MOV       A,R6
   \   00000E   940B         SUBB      A,#0xb
   \   000010   EF           MOV       A,R7
   \   000011   9400         SUBB      A,#0x0
   \   000013   503D         JNC       ??run_tests_1
     47              unit = TEST_FUN[i];
   \   000015   EE           MOV       A,R6
   \   000016   F8           MOV       R0,A
   \   000017   EF           MOV       A,R7
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   75F002       MOV       B,#0x2
   \   00001D   A4           MUL       AB
   \   00001E   C8           XCH       A,R0
   \   00001F   AAF0         MOV       R2,B
   \   000021   75F000       MOV       B,#0x0
   \   000024   A4           MUL       AB
   \   000025   2A           ADD       A,R2
   \   000026   FA           MOV       R2,A
   \   000027   75F002       MOV       B,#0x2
   \   00002A   E9           MOV       A,R1
   \   00002B   A4           MUL       AB
   \   00002C   2A           ADD       A,R2
   \   00002D   F9           MOV       R1,A
   \   00002E   74..         MOV       A,#TEST_FUN & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F582         MOV       DPL,A
   \   000033   74..         MOV       A,#(TEST_FUN >> 8) & 0xff
   \   000035   39           ADDC      A,R1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   88..         MOV       ?V0,R0
   \   00003F   89..         MOV       ?V1,R1
     48              AM_SW_Init();
   \   000041                ; Setup parameters for call to function AM_SW_Init
   \   000041   12....       LCALL     `??AM_SW_Init::?relay`; Banked call to: AM_SW_Init
     49              run_unit_fun(unit);
   \   000044                ; Setup parameters for call to function run_unit_fun
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   12....       LCALL     `??run_unit_fun::?relay`; Banked call to: run_unit_fun
     50            };
   \   00004B   0E           INC       R6
   \   00004C   EE           MOV       A,R6
   \   00004D   70BD         JNZ       ??run_tests_0
   \   00004F   0F           INC       R7
   \   000050   80BA         SJMP      ??run_tests_0
     51            show_statistic();  
   \                     ??run_tests_1:
   \   000052                ; Setup parameters for call to function show_statistic
   \   000052   12....       LCALL     `??show_statistic::?relay`; Banked call to: show_statistic
     52          }
   \   000055   7F02         MOV       R7,#0x2
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??TimerCompareInterrupt::??INTVEC 43`:
   \   00002B   02....       LJMP       (TimerCompareInterrupt)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for COLD_MOD>`:
   \   000000   ....         DW SYNC_MODULE
   \   000002   ....         DW LLC_MODULE
   \   000004   ....         DW LED_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for HOT_MOD>`:
   \   000000   ....         DW RTC_MODULE
   \   000002   ....         DW SYNC_MODULE
   \   000004   ....         DW LLC_MODULE
   \   000006   ....         DW LED_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for HW_MOD>`:
   \   000000   ....         DW CPU_MODULE
   \   000002   ....         DW DBG_MODULE
   \   000004   ....         DW AT_MODULE
   \   000006   ....         DW UST_MODULE
   \   000008   ....         DW DMA_MODULE
   \   00000A   ....         DW CODER_MODULE
   \   00000C   ....         DW RADIO_MODULE
   \   00000E   ....         DW LED_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SW_MOD>`:
   \   000000   ....         DW FR_MODULE
   \   000002   ....         DW MD_MODULE
   \   000004   ....         DW MS_MODULE
   \   000006   ....         DW BF_MODULE
   \   000008   ....         DW RADIO_MODULE
   \   00000A   ....         DW SYNC_MODULE
   \   00000C   ....         DW LLC_MODULE
   \   00000E   ....         DW MAC_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for IRQ_MOD>`:
   \   000000   ....         DW BF_MODULE
   \   000002   ....         DW MAC_MODULE
   \   000004   ....         DW LLC_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AT_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for BF_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay`
   \   000004   ....         DW `??IRQ_Init::?relay`
   \   000006   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TX_LIST_HEAD>`:
   \   000000   ....         DW TX_LIST_HEAD
   \   000002   ....         DW TX_LIST_HEAD

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RX_LIST_HEAD>`:
   \   000000   ....         DW RX_LIST_HEAD
   \   000002   ....         DW RX_LIST_HEAD

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CODER_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_1`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CPU_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_2`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DBG_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_3`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DMA_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_4`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FR_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_1`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LED_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_5`
   \   000002   ....         DW `??SW_Init::?relay_2`
   \   000004   0000         DW 0H
   \   000006   ....         DW `??Cold_Start::?relay`
   \   000008   ....         DW `??Hot_Start::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LLC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_3`
   \   000004   ....         DW `??IRQ_Init::?relay_1`
   \   000006   ....         DW `??Cold_Start::?relay_1`
   \   000008   ....         DW `??Hot_Start::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MAC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_4`
   \   000004   ....         DW `??IRQ_Init::?relay_2`
   \   000006   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MS_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_5`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MD_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_6`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RADIO_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_6`
   \   000002   ....         DW `??SW_Init::?relay_7`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RTC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_8`
   \   000004   0000         DW 0H
   \   000006   ....         DW `??Cold_Start::?relay_2`
   \   000008   ....         DW `??Hot_Start::?relay_2`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SYNC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_9`
   \   000004   0000         DW 0H
   \   000006   ....         DW `??Cold_Start::?relay_3`
   \   000008   ....         DW `??Hot_Start::?relay_3`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_BF_1>`:
   \   000000   42463A70     DB "BF:push tx"
   \            75736820
   \            747800  
   \   00000B   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000013   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001B   00000000     DB 0, 0, 0, 0, 0
   \            00      
   \   000020   ....         DW `??test1::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_BF_2>`:
   \   000000   42463A70     DB "BF:push-pop tx all"
   \            7573682D
   \            706F7020
   \            74782061
   \            6C6C00  
   \   000013   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001B   00000000     DB 0, 0, 0, 0, 0
   \            00      
   \   000020   ....         DW `??test2::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_BF_3>`:
   \   000000   42463A6D     DB "BF:mix rx-tx bufs"
   \            69782072
   \            782D7478
   \            20627566
   \            7300    
   \   000012   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001A   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000020   ....         DW `??test3::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UTEST_DEBUG>`:
   \   000000   44454255     DB "DEBUG MODUL"
   \            47204D4F
   \            44554C00
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001C   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_1>`:
   \   000000   46523A63     DB "FR:create-delete"
   \            72656174
   \            652D6465
   \            6C657465
   \            00      
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  
   \   000020   ....         DW `??test1::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_2>`:
   \   000000   46523A63     DB "FR:create-full"
   \            72656174
   \            652D6675
   \            6C6C00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test2::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_3>`:
   \   000000   46523A68     DB "FR:header manipulation"
   \            65616465
   \            72206D61
   \            6E697075
   \            6C617469
   \            6F6E00  
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test3::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MACR_1>`:
   \   000000   4D414352     DB "MACROS: EXCEPTIOS"
   \            4F533A20
   \            45584345
   \            5054494F
   \            5300    
   \   000012   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001A   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000020   ....         DW `??test1::?relay_2`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MACR_2>`:
   \   000000   4D414352     DB "MACROS: EXCEPTIOS"
   \            4F533A20
   \            45584345
   \            5054494F
   \            5300    
   \   000012   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001A   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000020   ....         DW `??test2::?relay_2`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_1>`:
   \   000000   4D533A63     DB "MS:create-delete"
   \            72656174
   \            652D6465
   \            6C657465
   \            00      
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  
   \   000020   ....         DW `??test1::?relay_3`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_2>`:
   \   000000   4D533A63     DB "MS:create-full"
   \            72656174
   \            652D6675
   \            6C6C00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test2::?relay_3`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_3>`:
   \   000000   4D533A7A     DB "MS:zone-check"
   \            6F6E652D
   \            63686563
   \            6B00    
   \   00000E   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000016   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001E   0000         DB 0, 0
   \   000020   ....         DW `??test3::?relay_2`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UST_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_7`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TEST_FUN>`:
   \   000000   ....         DW UT_MS_1
   \   000002   ....         DW UT_MS_2
   \   000004   ....         DW UT_MS_3
   \   000006   ....         DW UT_FR_1
   \   000008   ....         DW UT_FR_2
   \   00000A   ....         DW UT_FR_3
   \   00000C   ....         DW UT_BF_1
   \   00000E   ....         DW UT_BF_2
   \   000010   ....         DW UT_BF_3
   \   000012   ....         DW UT_MACR_1
   \   000014   ....         DW UT_MACR_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_set_callback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_set_callback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Callback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Callback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Cold_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Cold_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Hot_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Hot_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_IRQ_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_IRQ_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_enable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_enable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_interval::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_interval

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_alarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_alarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcCompareTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??calcCompareTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ReadTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ReadTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??loadTimerCompare::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??loadTimerCompare

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??isIRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??isIRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INIT_LIST_HEAD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??INIT_LIST_HEAD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_add_valid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_add_valid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del_entry_valid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del_entry_valid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_add::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_add

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_add::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_add

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del_entry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del_entry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_del::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_del

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_is_last::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_is_last

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_empty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_empty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQ_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQ_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_rx_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_rx_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_tx_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_tx_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_available_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_available_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_available_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_available_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??find_free_node::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??find_free_node

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_push_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_push_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_push_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_push_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_cursor_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_cursor_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_cursor_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_cursor_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_cursor_next::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_cursor_next

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_remove_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_remove_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_remove_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_remove_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_content::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_content

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AES_StreamCoder::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AES_StreamCoder

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CTR_enc_decrypt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??CTR_enc_decrypt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CBCMAC_buf_encrypt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??CBCMAC_buf_encrypt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??generateAuthData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??generateAuthData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AES_CCMEncrypt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AES_CCMEncrypt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AES_CCMDecrypt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AES_CCMDecrypt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_HALT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_HALT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_FAULT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_FAULT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uart_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??uart_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MyLowLevelPutchar::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MyLowLevelPutchar

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    __write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_4`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_4

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_create::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_create

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_add_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_add_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_del_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_del_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_5`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_5

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQ_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQ_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LLC_open_slot::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LLC_open_slot

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LLC_close_slot::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LLC_close_slot

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LLC_add_tx_frame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LLC_add_tx_frame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??scheduler_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??scheduler_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??scheduler_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??scheduler_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??transmite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??transmite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_4`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_4

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQ_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQ_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_recv_frame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_recv_frame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xor_calc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??xor_calc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_send_ack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_send_ack

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_Receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_Receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_send_frame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_send_frame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_recv_ack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_recv_ack

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??is_array_ptr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??is_array_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??array_index::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??array_index

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_5`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_5

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_zone_check::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_zone_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_6`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_6

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_7`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_7

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_6`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_6

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setFreq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??setFreq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pre_config::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??pre_config

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RI_SetChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RI_SetChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LoadTXData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??LoadTXData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RI_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RI_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UnLoadRXData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??UnLoadRXData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RecvData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??RecvData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RI_Receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RI_Receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bits_count::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??bits_count

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??getRNDByte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??getRNDByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??readRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??readRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??random_core_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??random_core_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RI_Measure_POW::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RI_Measure_POW

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_8`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_8

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_9`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_9

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??validate_sync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??validate_sync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??accept_sync_data::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??accept_sync_data

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??syncronize_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??syncronize_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mode_1_receive_process::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??mode_1_receive_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_throw_dice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_throw_dice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mode_1_retransmition_process::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??mode_1_retransmition_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mode_1_process::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??mode_1_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mode_2_process::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??mode_2_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??recv_sync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??recv_sync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??send_sync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??send_sync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??network_recv_sync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??network_recv_sync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??network_sync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    network_sync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_SetAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_SetAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_ClrAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_ClrAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_inc_timeslot::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_inc_timeslot

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_find_next_active::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_find_next_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??scheulder_next_alarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??scheulder_next_alarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_IRQ::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_IRQ

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mcu_sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??mcu_sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_clr_all::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_clr_all

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??start_mode_1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??start_mode_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??start_mode_2::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??start_mode_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Neocore_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Neocore_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_alarm_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_alarm_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test3::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ch_cmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ch_cmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ch_cmp_val::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ch_cmp_val

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test3::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test3_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test3::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test3_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_mem_utils::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_mem_utils

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_7`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_7

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UST_now::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UST_now

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UST_time_over::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UST_time_over

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UST_interval::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UST_interval

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UST_delay::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UST_delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_interval::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _interval

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DelayCalibrate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??DelayCalibrate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??run_unit_fun::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??run_unit_fun

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??show_grating::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??show_grating

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??show_statistic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??show_statistic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??run_tests::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    run_tests

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "action_manager.c">`:
   \   000000   61637469     DB "action_manager.c"
   \            6F6E5F6D
   \            616E6167
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_1`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "alarm_timer.c">`:
   \   000000   616C6172     DB "alarm_timer.c"
   \            6D5F7469
   \            6D65722E
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_2`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "buffer.c">`:
   \   000000   62756666     DB "buffer.c"
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10
   \   00000A   0B           DB 11
   \   00000B   0C           DB 12
   \   00000C   0D           DB 13
   \   00000D   0E           DB 14
   \   00000E   0F           DB 15
   \   00000F   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_1`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10
   \   00000A   0B           DB 11
   \   00000B   0C           DB 12
   \   00000C   0D           DB 13
   \   00000D   0E           DB 14
   \   00000E   0F           DB 15
   \   00000F   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_2`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10
   \   00000A   0B           DB 11
   \   00000B   0C           DB 12
   \   00000C   0D           DB 13
   \   00000D   0E           DB 14
   \   00000E   0F           DB 15
   \   00000F   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_3`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10
   \   00000A   0B           DB 11
   \   00000B   0C           DB 12
   \   00000C   0D           DB 13
   \   00000D   0E           DB 14
   \   00000E   0F           DB 15
   \   00000F   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_3`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "llc.c">`:
   \   000000   6C6C632E     DB "llc.c"
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Error">`:
   \   000000   4572726F     DB "Error"
   \            7200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Send success">`:
   \   000000   53656E64     DB "Send success"
   \            20737563
   \            63657373
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CCA/ACK err">`:
   \   000000   4343412F     DB "CCA/ACK err"
   \            41434B20
   \            65727200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Attempts exired">`:
   \   000000   41747465     DB "Attempts exired"
   \            6D707473
   \            20657869
   \            72656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_1`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "mac.c">`:
   \   000000   6D61632E     DB "mac.c"
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Wrong channel">`:
   \   000000   57726F6E     DB "Wrong channel"
   \            67206368
   \            616E6E65
   \            6C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "push">`:
   \   000000   70757368     DB "push"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">_1`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "push del">`:
   \   000000   70757368     DB "push del"
   \            2064656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_4`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "mem_slots.c">`:
   \   000000   6D656D5F     DB "mem_slots.c"
   \            736C6F74
   \            732E6300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_5`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "radio.c">`:
   \   000000   72616469     DB "radio.c"
   \            6F2E6300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_2`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "sync.c">`:
   \   000000   73796E63     DB "sync.c"
   \            2E6300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sync err %d">`:
   \   000000   53796E63     DB "Sync err %d"
   \            20657272
   \            20256400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">_2`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sichronize sync RSSI ...">`:
   \   000000   53696368     DB "Sichronize sync RSSI = %d"
   \            726F6E69
   \            7A652073
   \            796E6320
   \            52535349
   \            203D2025
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "unsynced">`:
   \   000000   756E7379     DB "unsynced"
   \            6E636564
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Wrong mode">`:
   \   000000   57726F6E     DB "Wrong mode"
   \            67206D6F
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Wrong channel">_1`:
   \   000000   57726F6E     DB "Wrong channel"
   \            67206368
   \            616E6E65
   \            6C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_6`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SYNC sended, res = %d">`:
   \   000000   53594E43     DB "SYNC sended, res = %d"
   \            2073656E
   \            6465642C
   \            20726573
   \            203D2025
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_7`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "time_manager.c">`:
   \   000000   74696D65     DB "time_manager.c"
   \            5F6D616E
   \            61676572
   \            2E6300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_3`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Incorrect MODEL.TM.MODE">`:
   \   000000   496E636F     DB "Incorrect MODEL.TM.MODE"
   \            72726563
   \            74204D4F
   \            44454C2E
   \            544D2E4D
   \            4F444500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!%s:%d\\r\\n">_8`:
   \   000000   2125733A     DB "!%s:%d\015\012"
   \            25640D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "u_mem_utils.c">`:
   \   000000   755F6D65     DB "u_mem_utils.c"
   \            6D5F7574
   \            696C732E
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_4`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MEM_memcpy ok!">`:
   \   000000   4D454D5F     DB "MEM_memcpy ok!"
   \            6D656D63
   \            7079206F
   \            6B2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">_3`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MEM_memset ok!">`:
   \   000000   4D454D5F     DB "MEM_memset ok!"
   \            6D656D73
   \            6574206F
   \            6B2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test function not ass...">`:
   \   000000   54657374     DB "Test function not assigned!!!"
   \            2066756E
   \            6374696F
   \            6E206E6F
   \            74206173
   \            7369676E
   \            65642121
   \            2100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TESTING:\\t%-32s">`:
   \   000000   54455354     DB "TESTING:\t%-32s"
   \            494E473A
   \            09252D33
   \            327300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\tPASSED\\r\\n">`:
   \   000000   09504153     DB "\tPASSED\015\012"
   \            5345440D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\tERR = %d. FAILED <--...">`:
   \   000000   09455252     DB "\tERR = %d. FAILED <--------------\015\012"
   \            203D2025
   \            642E2046
   \            41494C45
   \            44203C2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Begin unit test\\r\\n">`:
   \   000000   42656769     DB "Begin unit test\015\012"
   \            6E20756E
   \            69742074
   \            6573740D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n###################...">`:
   \   000000   0D0A2323     DB "\015\012##########################################\015\012"
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test runned: \\t%d\\r\\n">`:
   \   000000   54657374     DB "Test runned: \t%d\015\012"
   \            2072756E
   \            6E65643A
   \            20092564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test passed: \\t%d\\r\\n">`:
   \   000000   54657374     DB "Test passed: \t%d\015\012"
   \            20706173
   \            7365643A
   \            20092564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Succes!\\r\\n">`:
   \   000000   53756363     DB "Succes!\015\012"
   \            6573210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Failed!\\r\\n">`:
   \   000000   4661696C     DB "Failed!\015\012"
   \            6564210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff:
   \   000000   FF7F0000     DD 32767

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffff8000:
   \   000000   0080FFFF     DD 4294934528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8000:
   \   000000   00800000     DD 32768

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffff:
   \   000000   FFFFFF00     DD 16777215

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_9c4:
   \   000000   C4090000     DD 2500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_396:
   \   000000   96030000     DD 918

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19833891:
   \   000000   91388319     DD 428030097

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3d:
   \   000000   3D000000     DD 61

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_20:
   \   000000   20000000     DD 32

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffc180:
   \   000000   80C1FFFF     DD 4294951296

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     74   AES_CCMDecrypt
        0     68   -> CBCMAC_buf_encrypt
        0     72   -> CTR_enc_decrypt
        0     70   -> generateAuthData
        0     70   -> memcpy
        0     70   -> memset
      1     58   AES_CCMEncrypt
        0     52   -> CBCMAC_buf_encrypt
        0     56   -> CTR_enc_decrypt
        0     54   -> generateAuthData
        0     54   -> memcpy
        0     54   -> memset
      0    106   AES_StreamCoder
        0     43   -> memcpy
        0     43   -> memset
      0     14   AM_Callback
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     23   AM_Cold_start
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     14   AM_HW_Init
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     23   AM_Hot_start
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     14   AM_IRQ_Init
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     24   AM_SW_Init
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     14   AM_set_callback
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     18   AT_enable
        0      9   -> IRQEnable
        0      9   -> __cli
      0     14   AT_interval
      0     30   AT_set_alarm
        0     12   -> DBG_CORE_HALT
        0     12   -> IRQEnable
        0     12   -> calcCompareTime
        0     12   -> loadTimerCompare
        0     16   -> printf
      0     32   AT_set_time
        0     14   -> AT_set_alarm
        0     14   -> DBG_CORE_HALT
        0     14   -> ReadTimer
        0     14   -> isIRQEnable
        0     18   -> printf
      0     83   AT_time
        0     16   -> ReadTimer
      0     79   AT_wait
        0     12   -> DBG_CORE_HALT
        0     16   -> printf
      0     72   BF_available
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      2      0   BF_available_rx
      2      0   BF_available_tx
      2     58   BF_content
      0    123   BF_cursor_next
        0     65   -> __cli
        0     65   -> list_is_last
      0     68   BF_cursor_rx
        0     10   -> __cli
        0     10   -> list_empty
      0     68   BF_cursor_tx
        0     10   -> __cli
        0     10   -> list_empty
      0     67   BF_push_rx
        0      9   -> __cli
        0      9   -> _push
      0     67   BF_push_tx
        0      9   -> __cli
        0      9   -> _push
      0     11   BF_remove_rx
        0     11   -> __cli
        0     11   -> list_del
      0     25   BF_remove_tx
        0     11   -> __cli
        0     11   -> list_del
      2     58   BF_rx_busy
      2     58   BF_tx_busy
      0    118   CBCMAC_buf_encrypt
        0     50   -> memcpy
        0     50   -> memset
      0    111   CTR_enc_decrypt
        0     39   -> memcpy
        0     39   -> memset
      0      0   Cold_Start
      2      0   Cold_Start
        2      0   -> scheduler_rx
        2      0   -> scheduler_tx
      0      0   Cold_Start
      0      0   Cold_Start
      0      0   DBG_CORE_FAULT
      0     63   DBG_CORE_HALT
      0     24   DelayCalibrate
        0     20   -> UST_delay
        0     20   -> UST_now
        0     24   -> _interval
      1     59   FR_add_header
        0     23   -> MEM_memcpy
      2     52   FR_available
        2      0   -> SL_available
      2     52   FR_busy
        2      0   -> SL_busy
      2     58   FR_create
        2      0   -> SL_alloc
      1     40   FR_del_header
        0     18   -> MEM_memcpy
        0     18   -> MEM_memset
      0     82   FR_delete
        0      9   -> SL_free
      2      0   HW_Init
        2      0   -> IRQEnable
      2      0   HW_Init
        2      0   -> DelayCalibrate
      0      0   HW_Init
      0      0   HW_Init
      2      0   HW_Init
        2      0   -> uart_init
      2     84   HW_Init
        2     84   -> MEM_memcpy
      3      1   HW_Init
      0      0   HW_Init
      0     16   Hot_Start
        0     10   -> DBG_CORE_HALT
        0     10   -> mode_1_process
        0     10   -> mode_2_process
        0     10   -> printf
        0     16   -> printf
      0      9   Hot_Start
        0      9   -> receive
        0      9   -> transmite
      0      0   Hot_Start
      0     12   Hot_Start
      2      9   INIT_LIST_HEAD
      0     15   IRQEnable
      0      0   IRQ_Init
      2      0   IRQ_Init
      0      0   IRQ_Init
      0     14   LLC_add_tx_frame
        0     10   -> AES_StreamCoder
        0     10   -> BF_push_tx
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     14   LLC_close_slot
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      1     14   LLC_open_slot
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      2     59   LoadTXData
      1     27   MAC_Receive
        0     12   -> AES_StreamCoder
        0     12   -> BF_push_rx
        0     12   -> FR_delete
        0     12   -> _recv_frame
        0     12   -> _send_ack
        0     12   -> printf
        0     18   -> printf
      0     23   MAC_Send
        0      9   -> FR_delete
        0      9   -> _recv_ack
        0      9   -> _send_frame
      3     84   MEM_memcpy
      3     41   MEM_memset
      0     16   MyLowLevelPutchar
      0     16   Neocore_start
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
        0     10   -> start_mode_1
        0     10   -> start_mode_2
      1     16   RI_Measure_POW
        0     14   -> UST_delay
      1    103   RI_Receive
        0     36   -> DBG_CORE_HALT
        0     36   -> FR_add_header
        0     36   -> FR_create
        0     38   -> RecvData
        0     40   -> UST_interval
        0     36   -> UST_now
        0     36   -> UnLoadRXData
        0     36   -> pre_config
        0     40   -> printf
      0     55   RI_Send
        0     30   -> DBG_CORE_HALT
        0     30   -> SendData
        0     34   -> UST_interval
        0     30   -> UST_now
        0     30   -> pre_config
        0     34   -> printf
      2     63   RI_SetChannel
      2     22   ReadTimer
      0    109   RecvData
        0     67   -> AT_time
        0     67   -> UST_now
        0     71   -> UST_time_over
      0     67   SL_alloc
        0     15   -> MEM_memset
        0     15   -> __cli
      0     66   SL_available
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     66   SL_busy
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     61   SL_free
        0      9   -> __cli
        0      9   -> _free
      2     16   SL_zone_check
      0      9   SW_Init
        0      9   -> INIT_LIST_HEAD
      0      0   SW_Init
      0      0   SW_Init
      2      0   SW_Init
      0      0   SW_Init
      0     13   SW_Init
        0     13   -> MEM_memset
      0      0   SW_Init
      2      0   SW_Init
        2      0   -> random_core_init
      0      0   SW_Init
      2      0   SW_Init
      0     89   SendData
        0     59   -> AT_time
        0     59   -> AT_wait
        0     59   -> LoadTXData
      0     28   TM_ClrAlarm
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     24   TM_IRQ
        0      9   -> AM_Cold_start
        0      9   -> AM_Hot_start
        0      9   -> AT_enable
        0      9   -> __cli
        0      9   -> scheulder_next_alarm
      0     28   TM_SetAlarm
        0     10   -> DBG_CORE_HALT
        0     14   -> printf
      0     15   TimerCompareInterrupt
        0     15   -> AT_time
        0     15   -> IRQEnable
        0     15   -> TM_IRQ
      0     52   UST_delay
        0     32   -> UST_now
      0     64   UST_interval
      3     77   UST_now
      0    105   UST_time_over
        0     28   -> UST_interval
        0     24   -> UST_now
      3     36   UnLoadRXData
      0      9   __cli
      0     15   __cli
      0     65   __cli
      0      9   __cli
      0     26   __list_add
        0     14   -> __list_add_valid
      0     14   __list_add_valid
      2      9   __list_del
      0     18   __list_del_entry
        0      9   -> __list_del
        0      9   -> __list_del_entry_valid
      0      9   __list_del_entry_valid
      0     18   __write
        0     16   -> MyLowLevelPutchar
      2      0   _clr_all
      0     18   _find_next_active
        0      9   -> _inc_timeslot
      0     23   _free
        0     14   -> array_index
        0     14   -> is_array_ptr
      0      9   _inc_timeslot
      0     48   _interval
      0     27   _push
        0     14   -> DBG_CORE_HALT
        0     14   -> find_free_node
        0     14   -> list_add
        0     18   -> printf
      0      9   _recv_ack
      0     32   _recv_frame
        0     14   -> AT_time
        0     14   -> DBG_CORE_HALT
        0     14   -> RI_Receive
        0     14   -> RI_SetChannel
        0     14   -> printf
        0     20   -> printf
      1     25   _send_ack
        0     13   -> FR_add_header
        0     13   -> FR_create
        0     13   -> FR_delete
        0     13   -> RI_Send
        0     13   -> xor_calc
      0     25   _send_frame
        0     10   -> DBG_CORE_HALT
        0     10   -> RI_Send
        0     10   -> RI_SetChannel
        0     10   -> UST_delay
        0     10   -> printf
        0     16   -> printf
      0     10   _throw_dice
        0     10   -> rand
      0     23   accept_sync_data
      0     26   array_index
      0      9   bits_count
      2     34   calcCompareTime
        0     22   -> ReadTimer
      0     33   ch_cmp
      0     31   ch_cmp_val
      0     23   find_free_node
        0      9   -> INIT_LIST_HEAD
      0     88   generateAuthData
        0     18   -> memcpy
      2      9   getRNDByte
      2      0   init
        2      0   -> AT_enable
        2      0   -> _clr_all
        2      0   -> scheulder_next_alarm
      0     14   isIRQEnable
      0     26   is_array_ptr
      0     26   list_add
        0     12   -> __list_add
      0     20   list_del
        0      9   -> __list_del_entry
      2     10   list_empty
      2     65   list_is_last
      0     28   loadTimerCompare
      0      0   main
        0      0   -> run_tests
      0      0   mcu_sleep
      2     28   mode_1_process
        0     12   -> mode_1_receive_process
        0     12   -> mode_1_retransmition_process
        0     12   -> printf
        0     18   -> printf
      0     32   mode_1_receive_process
        0     14   -> FR_delete
        0     14   -> accept_sync_data
        0     14   -> printf
        0     16   -> printf
        0     20   -> printf
        0     14   -> recv_sync
        0     14   -> syncronize_timer
        0     14   -> validate_sync
      2     12   mode_1_retransmition_process
        2      0   -> _throw_dice
        2      0   -> send_sync
      0     22   mode_2_process
        0     12   -> send_sync
      0    142   network_recv_sync
        0     63   -> AES_StreamCoder
        0     63   -> DBG_CORE_HALT
        0     63   -> FR_delete
        0     63   -> RI_Receive
        0     63   -> RI_SetChannel
        0     63   -> printf
        0     69   -> printf
      0     77   network_sync
        0     73   -> FR_delete
        0     73   -> UST_now
        0     77   -> UST_time_over
        0     73   -> network_recv_sync
        0     73   -> syncronize_timer
      2     36   pre_config
        2      0   -> setFreq
      0      9   random_core_init
        0      9   -> pre_config
        0      9   -> rand
        0      9   -> readRandom
        0      9   -> srand
      0     18   readRandom
        0      9   -> bits_count
        0      9   -> getRNDByte
      0     18   receive
        0      9   -> MAC_Receive
      0     83   recv_sync
        0     63   -> AES_StreamCoder
        0     63   -> AT_wait
        0     63   -> DBG_CORE_HALT
        0     63   -> FR_delete
        0     63   -> RI_Receive
        0     63   -> RI_SetChannel
        0     63   -> printf
        0     69   -> printf
      0     10   run_tests
        0     10   -> AM_SW_Init
        0     10   -> run_unit_fun
        0     10   -> show_grating
        0     10   -> show_statistic
      0     26   run_unit_fun
        0     14   -> printf
        0     16   -> printf
      0     14   scheduler_rx
        0     10   -> DBG_CORE_HALT
        0     10   -> TM_ClrAlarm
        0     10   -> TM_SetAlarm
        0     14   -> printf
      0     20   scheduler_tx
        0     14   -> BF_content
        0     14   -> BF_cursor_next
        0     14   -> BF_cursor_tx
        0     14   -> BF_remove_tx
        0     14   -> DBG_CORE_HALT
        0     14   -> TM_SetAlarm
        0     14   -> printf
        0     18   -> printf
        0     20   -> printf
      0     18   scheulder_next_alarm
        0      9   -> AT_set_alarm
        0      9   -> _find_next_active
      1     39   send_sync
        0     21   -> AES_StreamCoder
        0     21   -> DBG_CORE_HALT
        0     21   -> FR_add_header
        0     21   -> FR_create
        0     21   -> FR_delete
        0     21   -> RI_Send
        0     21   -> RI_SetChannel
        0     21   -> printf
        0     23   -> printf
        0     25   -> printf
        0     27   -> printf
      1     15   setFreq
        0     11   -> DBG_CORE_HALT
        0     15   -> printf
      2     10   show_grating
        2      0   -> printf
      2     12   show_statistic
        2      0   -> printf
        2      2   -> printf
      2     10   start_mode_1
        2      0   -> AM_Callback
        2      0   -> AM_IRQ_Init
        2      0   -> AT_enable
        2      0   -> init
        2      0   -> mcu_sleep
      2     10   start_mode_2
        2      0   -> AM_IRQ_Init
        2      0   -> init
      0     93   syncronize_timer
        0     14   -> AT_interval
        0     14   -> AT_set_time
        0     14   -> AT_time
        0     14   -> printf
        0     16   -> printf
        0     20   -> printf
      0     59   test1
      0     10   test1
        0     10   -> SL_alloc
        0     10   -> SL_available
        0     10   -> SL_busy
        0     10   -> SL_free
      0     18   test1
        0     18   -> BF_content
        0     18   -> BF_cursor_next
        0     18   -> BF_cursor_tx
        0     18   -> BF_push_tx
        0     18   -> BF_remove
        0     18   -> FR_create
        0     18   -> FR_delete
      0     12   test1
        0     12   -> FR_available
        0     12   -> FR_busy
        0     12   -> FR_create
        0     12   -> FR_delete
      0     52   test2
        0     52   -> FR_available
        0     52   -> FR_busy
        0     52   -> FR_create
        0     52   -> FR_delete
      0     58   test2
        0     58   -> BF_content
        0     58   -> BF_cursor_next
        0     58   -> BF_cursor_tx
        0     58   -> BF_push_tx
        0     58   -> BF_remove
        0     58   -> FR_create
        0     58   -> FR_delete
      0     52   test2
        0     52   -> SL_alloc
        0     52   -> SL_available
        0     52   -> SL_busy
        0     52   -> SL_free
      0     59   test2
      0     16   test3
        0     16   -> SL_alloc
        0     16   -> SL_zone_check
      0     24   test3
        0     22   -> FR_add_header
        0     22   -> FR_create
        0     22   -> FR_del_header
        0     24   -> ch_cmp
        0     22   -> ch_cmp_val
      0     58   test3
        0     58   -> BF_available
        0     58   -> BF_content
        0     58   -> BF_cursor_next
        0     58   -> BF_cursor_rx
        0     58   -> BF_cursor_tx
        0     58   -> BF_push_rx
        0     58   -> BF_push_tx
        0     58   -> BF_remove
        0     58   -> BF_rx_busy
        0     58   -> BF_tx_busy
        0     58   -> FR_create
        0     58   -> FR_delete
      0     29   transmite
        0     14   -> DBG_CORE_HALT
        0     14   -> MAC_Send
        0     14   -> TM_ClrAlarm
        0     14   -> printf
        0     20   -> printf
      0      9   u_alarm_timer
        0      9   -> AT_set_alarm
      0     47   u_mem_utils
        0     41   -> DBG_CORE_HALT
        0     41   -> MEM_memcpy
        0     41   -> MEM_memset
        0     41   -> printf
        0     45   -> printf
        0     47   -> printf
      0      0   uart_init
      0     26   validate_sync
      0     22   xor_calc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant "!%s:%d\r\n">
       9  ?<Constant "!%s:%d\r\n">_1
       9  ?<Constant "!%s:%d\r\n">_2
       9  ?<Constant "!%s:%d\r\n">_3
       9  ?<Constant "!%s:%d\r\n">_4
       9  ?<Constant "!%s:%d\r\n">_5
       9  ?<Constant "!%s:%d\r\n">_6
       9  ?<Constant "!%s:%d\r\n">_7
       9  ?<Constant "!%s:%d\r\n">_8
      13  ?<Constant "%s:%d:%s -> ">
      13  ?<Constant "%s:%d:%s -> ">_1
      13  ?<Constant "%s:%d:%s -> ">_2
      13  ?<Constant "%s:%d:%s -> ">_3
      13  ?<Constant "%s:%d:%s -> ">_4
      16  ?<Constant "Attempts exired">
      18  ?<Constant "Begin unit test\r\n">
      12  ?<Constant "CCA/ACK err">
       6  ?<Constant "Error">
      10  ?<Constant "Failed!\r\n">
      24  ?<Constant "Incorrect MODEL.TM.MODE">
      15  ?<Constant "MEM_memcpy ok!">
      15  ?<Constant "MEM_memset ok!">
      22  ?<Constant "SYNC sended, res = %d">
      13  ?<Constant "Send success">
      26  ?<Constant "Sichronize sync RSSI ...">
      10  ?<Constant "Succes!\r\n">
      12  ?<Constant "Sync err %d">
      15  ?<Constant "TESTING:\t%-32s">
      30  ?<Constant "Test function not ass...">
      19  ?<Constant "Test passed: \t%d\r\n">
      19  ?<Constant "Test runned: \t%d\r\n">
      14  ?<Constant "Wrong channel">
      14  ?<Constant "Wrong channel">_1
      11  ?<Constant "Wrong mode">
       3  ?<Constant "\r\n">
       3  ?<Constant "\r\n">_1
       3  ?<Constant "\r\n">_2
       3  ?<Constant "\r\n">_3
      47  ?<Constant "\r\n###################...">
      36  ?<Constant "\tERR = %d. FAILED <--...">
      10  ?<Constant "\tPASSED\r\n">
      17  ?<Constant "action_manager.c">
      14  ?<Constant "alarm_timer.c">
       9  ?<Constant "buffer.c">
       6  ?<Constant "llc.c">
       6  ?<Constant "mac.c">
      12  ?<Constant "mem_slots.c">
       9  ?<Constant "push del">
       5  ?<Constant "push">
       8  ?<Constant "radio.c">
       7  ?<Constant "sync.c">
      15  ?<Constant "time_manager.c">
      14  ?<Constant "u_mem_utils.c">
       9  ?<Constant "unsynced">
       5  ?<Constant {(char *)0, (char *)0, 10}>
       4  ?<Constant {(char *)0, 0, 0}>
       4  ?<Constant {(char *)0, 10, 7}>
       4  ?<Constant {(char *)0, 150, 0}>
       4  ?<Constant {(char *)0, 150, 0}>_1
       5  ?<Constant {(char *)MODEL.AES.CCM_IV, (char *)
       5  ?<Constant {(char *)MODEL.AES.CCM_KEY, (char *
       5  ?<Constant {(char *)MODEL.AES.STREAM_IV, (char
       5  ?<Constant {(char *)MODEL.AES.STREAM_KEY, (cha
      16  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
      16  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_1
      16  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_2
      16  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,_3
      10  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>
      10  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1
      10  ?<Initializer for AT_MODULE>
      10  ?<Initializer for BF_MODULE>
      10  ?<Initializer for CODER_MODULE>
       6  ?<Initializer for COLD_MOD>
      10  ?<Initializer for CPU_MODULE>
      10  ?<Initializer for DBG_MODULE>
      10  ?<Initializer for DMA_MODULE>
      10  ?<Initializer for FR_MODULE>
       8  ?<Initializer for HOT_MOD>
      16  ?<Initializer for HW_MOD>
       6  ?<Initializer for IRQ_MOD>
      10  ?<Initializer for LED_MODULE>
      10  ?<Initializer for LLC_MODULE>
      10  ?<Initializer for MAC_MODULE>
      10  ?<Initializer for MD_MODULE>
      10  ?<Initializer for MS_MODULE>
      10  ?<Initializer for RADIO_MODULE>
      10  ?<Initializer for RTC_MODULE>
       4  ?<Initializer for RX_LIST_HEAD>
      16  ?<Initializer for SW_MOD>
      10  ?<Initializer for SYNC_MODULE>
      22  ?<Initializer for TEST_FUN>
       4  ?<Initializer for TX_LIST_HEAD>
      10  ?<Initializer for UST_MODULE>
      34  ?<Initializer for UTEST_DEBUG>
      34  ?<Initializer for UT_BF_1>
      34  ?<Initializer for UT_BF_2>
      34  ?<Initializer for UT_BF_3>
      34  ?<Initializer for UT_FR_1>
      34  ?<Initializer for UT_FR_2>
      34  ?<Initializer for UT_FR_3>
      34  ?<Initializer for UT_MACR_1>
      34  ?<Initializer for UT_MACR_2>
      34  ?<Initializer for UT_MS_1>
      34  ?<Initializer for UT_MS_2>
      34  ?<Initializer for UT_MS_3>
     150  ACTIONSLOTS
     482  AES_CCMDecrypt
       6  AES_CCMDecrypt::?relay
     452  AES_CCMEncrypt
       6  AES_CCMEncrypt::?relay
     632  AES_StreamCoder
       6  AES_StreamCoder::?relay
      50  ALARMS
      73  AM_Callback
       6  AM_Callback::?relay
     180  AM_Cold_start
       6  AM_Cold_start::?relay
     168  AM_HW_Init
       6  AM_HW_Init::?relay
     180  AM_Hot_start
       6  AM_Hot_start::?relay
     176  AM_IRQ_Init
       6  AM_IRQ_Init::?relay
     172  AM_SW_Init
       6  AM_SW_Init::?relay
      63  AM_set_callback
       6  AM_set_callback::?relay
      10  AT_MODULE
      43  AT_enable
       6  AT_enable::?relay
      34  AT_interval
       6  AT_interval::?relay
     112  AT_set_alarm
       6  AT_set_alarm::?relay
     126  AT_set_time
       6  AT_set_time::?relay
      55  AT_time
       6  AT_time::?relay
     160  AT_wait
       6  AT_wait::?relay
      10  BF_MODULE
      88  BF_available
       6  BF_available::?relay
      28  BF_available_rx
       6  BF_available_rx::?relay
      28  BF_available_tx
       6  BF_available_tx::?relay
      34  BF_content
       6  BF_content::?relay
     207  BF_cursor_next
       6  BF_cursor_next::?relay
      77  BF_cursor_rx
       6  BF_cursor_rx::?relay
      77  BF_cursor_tx
       6  BF_cursor_tx::?relay
      89  BF_push_rx
       6  BF_push_rx::?relay
      89  BF_push_tx
       6  BF_push_tx::?relay
      85  BF_remove_rx
       6  BF_remove_rx::?relay
      85  BF_remove_tx
       6  BF_remove_tx::?relay
      19  BF_rx_busy
       6  BF_rx_busy::?relay
      19  BF_tx_busy
       6  BF_tx_busy::?relay
       2  CALLBACK
     469  CBCMAC_buf_encrypt
       6  CBCMAC_buf_encrypt::?relay
       1  CLKCONCMD
       1  CLKCONSTA
      10  CODER_MODULE
       6  COLD_MOD
       4  COMPARE_TIME
      10  CPU_MODULE
     608  CTR_enc_decrypt
       6  CTR_enc_decrypt::?relay
       3  Cold_Start
       3  Cold_Start
       3  Cold_Start
      23  Cold_Start
       6  Cold_Start::?relay
       6  Cold_Start::?relay
       6  Cold_Start::?relay
       6  Cold_Start::?relay
       2  DBG_CORE_FAULT
       6  DBG_CORE_FAULT::?relay
       2  DBG_CORE_HALT
       6  DBG_CORE_HALT::?relay
      10  DBG_MODULE
       4  DELAY_CALIBRATE_TICS
       1  DMA0CFGH
       1  DMA0CFGL
       1  DMA1CFGH
       1  DMA1CFGL
       1  DMAARM
       1  DMAREQ
      40  DMA_CH
      10  DMA_MODULE
     115  DelayCalibrate
       6  DelayCalibrate::?relay
       1  ENCCS
      10  FR_MODULE
     211  FR_add_header
       6  FR_add_header::?relay
      14  FR_available
       6  FR_available::?relay
      14  FR_busy
       6  FR_busy::?relay
      14  FR_create
       6  FR_create::?relay
     179  FR_del_header
       6  FR_del_header::?relay
      21  FR_delete
       6  FR_delete::?relay
       8  HOT_MOD
       3  HW_Init
      17  HW_Init
      19  HW_Init
      23  HW_Init
      37  HW_Init
      44  HW_Init
      63  HW_Init
     409  HW_Init
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
      16  HW_MOD
       3  Hot_Start
      41  Hot_Start
      48  Hot_Start
      95  Hot_Start
       6  Hot_Start::?relay
       6  Hot_Start::?relay
       6  Hot_Start::?relay
       6  Hot_Start::?relay
      31  INIT_LIST_HEAD
       6  INIT_LIST_HEAD::?relay
      17  IRQEnable
       6  IRQEnable::?relay
       3  IRQ_Init
       3  IRQ_Init
      52  IRQ_Init
       6  IRQ_Init::?relay
       6  IRQ_Init::?relay
       6  IRQ_Init::?relay
       6  IRQ_MOD
      10  LED_MODULE
      10  LLC_MODULE
      93  LLC_add_tx_frame
       6  LLC_add_tx_frame::?relay
      96  LLC_close_slot
       6  LLC_close_slot::?relay
     150  LLC_open_slot
       6  LLC_open_slot::?relay
      54  LoadTXData
       6  LoadTXData::?relay
      10  MAC_MODULE
     229  MAC_Receive
       6  MAC_Receive::?relay
     120  MAC_Send
       6  MAC_Send::?relay
       4  MAC_TIMER_MAX
      10  MD_MODULE
     116  MEM_memcpy
       6  MEM_memcpy::?relay
      79  MEM_memset
       6  MEM_memset::?relay
     152  MODEL
      10  MS_MODULE
      12  MyLowLevelPutchar
       6  MyLowLevelPutchar::?relay
     120  NODE_LIST
      89  Neocore_start
       6  Neocore_start::?relay
       1  P0SEL
       1  P1DIR
       1  PCON
       1  PERCFG
      10  RADIO_MODULE
       1  RFD
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
      96  RI_Measure_POW
       6  RI_Measure_POW::?relay
     561  RI_Receive
       6  RI_Receive::?relay
     238  RI_Send
       6  RI_Send::?relay
      32  RI_SetChannel
       6  RI_SetChannel::?relay
      10  RTC_MODULE
     128  RXBUFF
       2  RX_BUFF_FRAME_COUNT
       4  RX_LIST_HEAD
      59  ReadTimer
       6  ReadTimer::?relay
     203  RecvData
       6  RecvData::?relay
       1  SLEEPCMD
       1  SLEEPSTA
    3060  SLOT_POOL
     155  SL_alloc
       6  SL_alloc::?relay
      82  SL_available
       6  SL_available::?relay
      73  SL_busy
       6  SL_busy::?relay
      49  SL_free
       6  SL_free::?relay
      76  SL_zone_check
       6  SL_zone_check::?relay
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
       3  SW_Init
       3  SW_Init
       3  SW_Init
       3  SW_Init
       3  SW_Init
      52  SW_Init
      62  SW_Init
      83  SW_Init
      87  SW_Init
     117  SW_Init
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
      16  SW_MOD
      10  SYNC_MODULE
     281  SendData
       6  SendData::?relay
       1  T2CTRL
       1  T2M0
       1  T2M1
       1  T2MOVF0
       1  T2MOVF1
      22  TEST_FUN
      77  TM_ClrAlarm
       6  TM_ClrAlarm::?relay
     110  TM_IRQ
       6  TM_IRQ::?relay
      74  TM_SetAlarm
       6  TM_SetAlarm::?relay
       2  TOFFSET
       2  TX_BUFF_FRAME_COUNT
       4  TX_LIST_HEAD
      37  TimerCompareInterrupt
       3  TimerCompareInterrupt::??INTVEC 43
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
      10  UST_MODULE
     191  UST_delay
       6  UST_delay::?relay
     141  UST_interval
       6  UST_interval::?relay
      79  UST_now
       6  UST_now::?relay
     108  UST_time_over
       6  UST_time_over::?relay
      34  UTEST_DEBUG
      34  UT_BF_1
      34  UT_BF_2
      34  UT_BF_3
      34  UT_FR_1
      34  UT_FR_2
      34  UT_FR_3
      34  UT_MACR_1
      34  UT_MACR_2
      34  UT_MS_1
      34  UT_MS_2
      34  UT_MS_3
      44  UnLoadRXData
       6  UnLoadRXData::?relay
       1  _A_IEN0
       1  _A_IRCON
       1  _A_P1
       4  __Constant_1
       4  __Constant_19833891
       4  __Constant_1f4
       4  __Constant_20
       4  __Constant_396
       4  __Constant_3d
       4  __Constant_7fff
       4  __Constant_8000
       4  __Constant_9c4
       4  __Constant_a
       4  __Constant_ffff8000
       4  __Constant_ffffc180
       4  __Constant_ffffff
       7  __cli
       7  __cli
       7  __cli
       7  __cli
       6  __cli::?relay
       6  __cli::?relay
       6  __cli::?relay
       6  __cli::?relay
     101  __list_add
       6  __list_add::?relay
       4  __list_add_valid
       6  __list_add_valid::?relay
      31  __list_del
       6  __list_del::?relay
      46  __list_del_entry
       6  __list_del_entry::?relay
       4  __list_del_entry_valid
       6  __list_del_entry_valid::?relay
     156  __write
       6  __write::?relay
      34  _clr_all
       6  _clr_all::?relay
      50  _find_next_active
       6  _find_next_active::?relay
     136  _free
       6  _free::?relay
      18  _inc_timeslot
       6  _inc_timeslot::?relay
     127  _interval
       6  _interval::?relay
     105  _push
       6  _push::?relay
       4  _recv_ack
       6  _recv_ack::?relay
     119  _recv_frame
       6  _recv_frame::?relay
      97  _send_ack
       6  _send_ack::?relay
     106  _send_frame
       6  _send_frame::?relay
      52  _throw_dice
       6  _throw_dice::?relay
      26  accept_sync_data
       6  accept_sync_data::?relay
      48  array_index
       6  array_index::?relay
      34  bits_count
       6  bits_count::?relay
     162  buf
     189  calcCompareTime
       6  calcCompareTime::?relay
      54  ch_cmp
       6  ch_cmp::?relay
      38  ch_cmp_val
       6  ch_cmp_val::?relay
       2  common_count
      65  find_free_node
       6  find_free_node::?relay
     241  generateAuthData
       6  generateAuthData::?relay
      53  getRNDByte
       6  getRNDByte::?relay
      26  init
       6  init::?relay
       5  isIRQEnable
       6  isIRQEnable::?relay
      60  is_array_ptr
       6  is_array_ptr::?relay
      41  list_add
       6  list_add::?relay
      45  list_del
       6  list_del::?relay
      41  list_empty
       6  list_empty::?relay
      41  list_is_last
       6  list_is_last::?relay
      70  loadTimerCompare
       6  loadTimerCompare::?relay
       5  main
       6  main::?relay
       9  mcu_sleep
       6  mcu_sleep::?relay
     153  mode_1_process
       6  mode_1_process::?relay
     221  mode_1_receive_process
       6  mode_1_receive_process::?relay
      32  mode_1_retransmition_process
       6  mode_1_retransmition_process::?relay
      59  mode_2_process
       6  mode_2_process::?relay
     244  network_recv_sync
       6  network_recv_sync::?relay
     406  network_sync
       6  network_sync::?relay
       2  passed
      27  pre_config
       6  pre_config::?relay
      78  random_core_init
       6  random_core_init::?relay
      54  readRandom
       6  readRandom::?relay
      55  receive
       6  receive::?relay
     251  recv_sync
       6  recv_sync::?relay
       4  ret_val
       1  retransmite
      90  run_tests
       6  run_tests::?relay
     148  run_unit_fun
       6  run_unit_fun::?relay
     118  scheduler_rx
       6  scheduler_rx::?relay
     342  scheduler_tx
       6  scheduler_tx::?relay
      65  scheulder_next_alarm
       6  scheulder_next_alarm::?relay
     350  send_sync
       6  send_sync::?relay
     103  setFreq
       6  setFreq::?relay
      18  show_grating
       6  show_grating::?relay
      90  show_statistic
       6  show_statistic::?relay
       2  slot_busy
      38  start_mode_1
       6  start_mode_1::?relay
      17  start_mode_2
       6  start_mode_2::?relay
     163  syncronize_timer
       6  syncronize_timer::?relay
     108  test1
     151  test1
     180  test1
     323  test1
       6  test1::?relay
       6  test1::?relay
       6  test1::?relay
       6  test1::?relay
     108  test2
     485  test2
     683  test2
     686  test2
       6  test2::?relay
       6  test2::?relay
       6  test2::?relay
       6  test2::?relay
     135  test3
     291  test3
    1038  test3
       6  test3::?relay
       6  test3::?relay
       6  test3::?relay
     495  transmite
       6  transmite::?relay
      20  u_alarm_timer
       6  u_alarm_timer::?relay
     455  u_mem_utils
       6  u_mem_utils::?relay
      23  uart_init
       6  uart_init::?relay
       4  val
      59  validate_sync
       6  validate_sync::?relay
      51  xor_calc
       6  xor_calc::?relay
     188  -- Other

 
 21 527 bytes in segment BANKED_CODE
  1 086 bytes in segment BANK_RELAYS
      3 bytes in segment INTVEC
     37 bytes in segment NEAR_CODE
     35 bytes in segment SFR_AN
    650 bytes in segment XDATA_I
    650 bytes in segment XDATA_ID
  1 072 bytes in segment XDATA_ROM_C
  3 893 bytes in segment XDATA_Z
 
  1 773 bytes of CODE     memory (+  3 bytes shared)
  1 020 bytes of CONST    memory (+ 52 bytes shared)
      0 bytes of DATA     memory (+ 35 bytes shared)
 21 527 bytes of HUGECODE memory
  4 543 bytes of XDATA    memory

Errors: none
Warnings: 16
